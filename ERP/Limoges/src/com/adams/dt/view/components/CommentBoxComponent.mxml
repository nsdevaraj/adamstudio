<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" 
		 xmlns:components="com.adams.swizdao.views.components.*">
	
	<fx:Metadata>
		[Event(name="commentBoxMove", type="flash.events.Event")]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.adams.dt.model.vo.CommentVO;
			import com.adams.dt.signal.ControlSignal;
			
			import mx.collections.ArrayCollection;
			
			import org.osflash.signals.Signal;
			
			
			public var noteCancelSignal:Signal = new Signal(CommentBoxComponent);
			public var noteSaveSignal:Signal = new Signal(CommentVO,CommentBoxComponent);
			public var noteDeleteSignal:Signal = new Signal(CommentVO,CommentBoxComponent);
			public var noteReplySignal:Signal = new Signal(CommentVO,CommentBoxComponent);
			private var _currentComment:CommentVO= new CommentVO();
			public var commentVO:CommentVO = new CommentVO();
			public static const COMMENT_BOX_MOVE:String = "commentBoxMove";
			public static const SHAPE_FIRST_NOTE_SPLITTER:String = "*@**";
			
			[Inject]
			public var controlSignal:ControlSignal;
			
			[Bindable]
			public var historydetailCollection:ArrayCollection = new ArrayCollection();
			
			private var _targetName:String = '';
			
			public function get targetName():String
			{
				return _targetName;
			}
			
			public function set targetName(value:String):void
			{
				_targetName = value;
			}
			
			[Bindable]
			public function get currentComment():CommentVO
			{
				return _currentComment;
			}
			
			public function set currentComment(value:CommentVO):void
			{
				_currentComment = value;
				var str:String  = value.commentDescription.toString();
				commentArea.text = str.substring(str.lastIndexOf(SHAPE_FIRST_NOTE_SPLITTER)+SHAPE_FIRST_NOTE_SPLITTER.length)
				commentTitleId.text = value.commentTitle;
			}
			
			protected function cancelCommentHandler(event:MouseEvent):void
			{
				noteCancelSignal.dispatch(this);
			}
			
			protected function editCommentHandler(event:MouseEvent):void
			{ 
				noteSaveSignal.dispatch(currentComment,this);
			}
			
			protected function saveCommentHandler(event:MouseEvent):void
			{
				noteSaveSignal.dispatch(currentComment,this);
			}
			
			protected function deleteCommentHandler(event:MouseEvent):void
			{
				noteDeleteSignal.dispatch(currentComment,this);
			}
			
			protected function replyCommentHandler(event:MouseEvent):void
			{
				commentArea.text = ""
				noteReplySignal.dispatch(currentComment,this);
			} 
			
			protected function mouseHandler(event:MouseEvent):void
			{
				if(event.type == MouseEvent.MOUSE_DOWN){
					this.startDrag(false, new Rectangle(0,0,parent.width-width,parent.height-height));
				}
				if(event.type == MouseEvent.MOUSE_MOVE){
					dispatchEvent(new Event(COMMENT_BOX_MOVE));
				}
				if(event.type == MouseEvent.MOUSE_UP){
					this.stopDrag()
				}
			}
			
			protected function historyStepperHandler(event:Event):void
			{
				var str:String = ''
				if(historyStepper.value == 0){
					str = currentComment.commentDescription.toString();
				}else{
					str = CommentVO(historydetailCollection.getItemAt(historyStepper.value-1)).commentDescription.toString();
				}
				commentArea.text = str.substring(str.lastIndexOf(SHAPE_FIRST_NOTE_SPLITTER)+SHAPE_FIRST_NOTE_SPLITTER.length)
			}
			
		]]>
	</fx:Script> 
	<s:states>
		<s:State name="createNote"/>
		<s:State name="editNote"/>
		<s:State name="replyNote"/>
	</s:states>
	<s:Group mouseDown="mouseHandler(event)" mouseMove="mouseHandler(event)" mouseUp="mouseHandler(event)">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#000000" alpha="0.5"/>
			</s:fill>
		</s:Rect>
		<s:VGroup width="250" height="170" 
				  horizontalAlign="left" paddingLeft="5" paddingRight="5" paddingBottom="5" paddingTop="5">
			<s:Label text="Title" />
			<s:TextInput id="commentTitleId" width="100%" />
			<s:Label text="Description" />
			<s:TextArea heightInLines="2" id="commentArea" 
						width="100%" height="70" toolTip="Enter Note"/>
			<s:HGroup>
				<components:NativeButton label="save" styleName="saveIcon" id="saveComment" includeIn="createNote" click="saveCommentHandler(event)"/>
				<components:NativeButton id="cancelComment" label="Cancel" width="60" includeIn="createNote" click="cancelCommentHandler(event)"/>
				<components:NativeButton id="editComment" label="Edit" width="60" includeIn="editNote" click="editCommentHandler(event)"/>
				<components:NativeButton id="replyComment" label="Reply" width="60" includeIn="replyNote" click="replyCommentHandler(event)"/>
				<s:NumericStepper id="historyStepper" minimum="0" maximum="{historydetailCollection.length}" change="historyStepperHandler(event)"/>
			</s:HGroup>
			
		</s:VGroup>
	</s:Group>
</s:Group>