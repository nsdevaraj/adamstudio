<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"  xmlns:view="com.adams.dt.view.components.*" 
	       xmlns:cmp="com.adams.dt.view.components.*" xmlns:todo="com.adams.dt.view.components.todolistscreens.*"
	       creationCompleteEffect = "{ mx.effects.Fade }" creationComplete="onCreationComplete()"
	       styleName="contsWidth" >
<mx:Binding source="model.updateToDo" destination="this.onUpdatingToDo"/>	   
<mx:Binding source="model.propertiespresetsCollection" destination="this.projectProperty"/>	    
<mx:Metadata>
		[Event(name="mapDeparture", type="com.adams.dt.event.departure.DepartureMapEvent")]
	</mx:Metadata>
<mx:Script>
	<![CDATA[
		import com.adams.dt.model.vo.Categories;
		import mx.events.ValidationResultEvent;
		import com.adams.dt.event.departure.DepartureMapEvent;
		import com.adams.dt.view.components.todolistscreens.RadioGropus;
		import mx.controls.CheckBox;
		import com.adams.dt.model.vo.Propertiespj;
		import com.adams.dt.model.vo.Proppresetstemplates;
		import com.adams.dt.model.vo.Propertiespresets;
		
		import mx.binding.utils.BindingUtils;
		import com.adams.dt.view.components.ConfirmationDemandeValidation;
		import com.adams.dt.model.mainView.ViewFactory;
		import com.adams.dt.business.util.StringUtils;
		import com.adams.dt.model.vo.Workflowstemplates;
		import com.adams.dt.business.util.StageRef;
		import com.adams.dt.business.util.KeyHandler;
		import com.adams.dt.event.RefreshEvent;
		import com.universalmind.cairngorm.events.Callbacks;
		import mx.rpc.IResponder;
		import mx.managers.PopUpManager;
		import com.adams.dt.business.util.GetVOUtil;
		import com.adams.dt.event.ProjectMessageEvent;
		import com.adams.dt.model.vo.Status;
		import com.adams.dt.model.vo.WorkflowTemplatePermission;
		import com.adams.dt.model.vo.ProjectStatus;
		import com.adams.dt.event.TasksEvent;
		import com.adams.dt.business.util.Utils;
		import mx.events.CloseEvent;
		import com.adams.dt.model.vo.TaskStatus;
		import mx.collections.IViewCursor;
		import mx.collections.SortField;
		import mx.collections.Sort;
		import com.adams.dt.event.PersonsEvent;
		import com.adams.dt.event.OpenToDoListScreenEvent;
		import mx.effects.Fade;
		import mx.controls.Alert;
		import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import com.adams.dt.event.FileDetailsEvent;
		import com.adams.dt.model.vo.FileDetails;
		import mx.collections.ArrayCollection;
		import com.adams.dt.model.vo.Tasks;
		import com.adams.dt.view.components.todolistscreens.ITodoList;
		import mx.core.UIComponent;
		import com.adams.dt.model.vo.Persons;
		import com.adams.dt.model.vo.ViewState;
		import com.adams.dt.model.ModelLocator;
		[Bindable]
		private var model:ModelLocator = ModelLocator.getInstance();		
		private var sep:String = "&#$%^!@";	
		
		private var popPriority:Array = ["Low","Medium","High"];
			
		private function getBody(str:String):String{
			str = str.split(sep)[2];
			return str.substr(str.indexOf(" "));
		}
		[Bindable]
        private var _archiveVisibility:Boolean;
		
		private var _onUpdatingToDo:Boolean;
		[Bindable]
		public function get onUpdatingToDo():Boolean {
			return _onUpdatingToDo;
		}
		public function set onUpdatingToDo( value:Boolean ):void {
			_onUpdatingToDo = value;
			updateSelectedScreen();
		}
		
		private function onCreationComplete():void {
			getView( model.workflowState );
		}
		
		private function updateSelectedScreen():void {
			if(  Canvas(stack.selectedChild).getChildAt(0)   is ITodoList ) {
				ITodoList(  Canvas(stack.selectedChild).getChildAt(0)).updateProperties();
			}
		}
		
		/**
		 * reset upload component
		 */
		private function resetUploadComp():void{
			uploadComp.listFiles.dataProvider=[];
			uploadComp.UploadFiles = [];
			model.currentProjectFiles = new ArrayCollection();
		}
		
		private function checkFileAccess( work:Workflowstemplates ):Boolean {
			for each( var item:Workflowstemplates in model.fileAccessTemplates ) {
				if( item.workflowTemplateId == work.workflowTemplateId )  return true;
			}
			return false;
		}
		/**
		 * @param workdlowState 
		 * function binded with viewstack
		 * based on the changes in model.workflowState the nw screen will be load
		 * set the property value corresponding to the screen
		 */
		private var todoTskcode:String;
		private var taskFABtoIMP:Boolean; 
		public function getView( workflowState:Number ):int {
			
			if( !StageRef.stage ) StageRef.stage = stage;
			if( !kh ) kh = new KeyHandler( "F5", onRefresh );
			
			//model.release = 0;
			//file type is basic except the pdf conversion file
			uploadComp.type = "Basic";			
			taskFABtoIMP = false;	
			
			trace("currentUserProfileCode :"+model.currentUserProfileCode);
			//if( model.currentUserProfileCode == "FAB" || model.currentUserProfileCode == "OPE" )
			//	model.fileAccess = false;
						
			if( model.currentTasks ) {
				
				var tsklbl:String = model.currentTasks.workflowtemplateFK.taskLabel;
				todoTskcode = model.currentTasks.workflowtemplateFK.taskCode;
				
				var stopLabel:Array = [];
				if( model.currentTasks.workflowtemplateFK.optionStopLabel )
					stopLabel = model.currentTasks.workflowtemplateFK.optionStopLabel.split( "," );
				
				var version:Boolean = false;
				for( var i:int = 0; i < stopLabel.length; i++ ) { 
					if( int( Number( stopLabel[ i ] ) ) == WorkflowTemplatePermission.VERSIONLOOP ) {
						version = true;
					}
				}	
				trace("\n\n ************************************************************************************************************* ");
				trace("tsklbl :"+tsklbl+" -- todoTskcode --"+todoTskcode+" --uploadComp.type-- "+uploadComp.type+" --stopLabel-- "+stopLabel+"-- version -- "+version);
				
				if( version ){
					uploadComp.type = "Tasks";
				}
				else if( tsklbl == "NEW TASK ORDER" || 
					tsklbl == "TASK ORDER CORRECTION REQUEST") {
					uploadComp.type = "Basic";
				}
				else if( tsklbl == "VALIDATION PROCESS" ) {  //PREPARATION TECHNIQUE //VALIDATION PROCESS
					taskFABtoIMP = true;
 				}
				else {
					uploadComp.type = "Tasks";
				}
			}
			trace(" Final uploadComp.type : "+uploadComp.type);
			trace("************************************************************************************************************* \n\n ");

            //check visiblity of component based on the screen		
			if( workflowState != 0 ) {
				 resetUploadComp();	
				 changePersonBox.visible = false;
				 changePersonBox.includeInLayout = false;
				 commentBox.visible = true;
				 commentBox.includeInLayout = true;
			}
			
			if( workflowState == 0 ) {
				model.fileAccess = false;
				commentBox.visible = false;
				commentBox.includeInLayout = false;
				model.businessCard =  model.person;
				if( _archiveVisibility )	_archiveVisibility = false; 
				if( model.clientCode == "ADM" ) {
					changePersonBox.visible = true;
				    changePersonBox.includeInLayout = true;
				}
				else {
					changePersonBox.visible = false;
				 	changePersonBox.includeInLayout = false;
				}
			}
			else if( workflowState == OpenToDoListScreenEvent.OPEN_VIEWMESSAGSCREEN ) {				
				commentBox.visible = false;
				commentBox.includeInLayout= false;
			}
			
			//Enable the navigation button if project in inprogress
			if( model.currentProjects.projectId != 0 ) {
				if( model.currentProjects.projectStatusFK == ProjectStatus.STANDBY || model.currentProjects.projectStatusFK == ProjectStatus.ABORTED ) {
					prevTask.enabled = false;
					nextTask.enabled = false;
					jumpTask.enabled = false;
					loopTask.enabled = false;
				}
				else {
					prevTask.enabled = true;
					nextTask.enabled = true;
					jumpTask.enabled = true;
					loopTask.enabled = true;
				}
			}
			updateComment();
			//NEW TODOLIST UPDATEION
        	//************************
			updateProperties();
        	//************************
			adminMonitorSwitch( workflowState );
			model.preloaderVisibility = false;			
			return workflowState;     
        }
        public function checkTemplate(preset:Propertiespresets):Proppresetstemplates{
			if(preset!=null){
				for each(var item:Proppresetstemplates in model.currentProjects.presetTemplateFK.propertiesPresetSet){
					if(preset.propertyPresetId == item.propertypresetFK){
						return item
					} 
				}
			}
			return null;
		}
		public function getPropertyValue(id:int):String{
			for each(var item:Propertiespj in model.currentProjects.propertiespjSet){
				if(item.propertyPreset.propertyPresetId == id){
					return item.fieldValue;
				}
				
			}
			return '';
		}
		public function getDate(str:String):Date{
			var arr:Array = str.split("/");
			var date:Date = new Date(arr[2],Number(arr[1])-1,arr[0]);
			return date;						
		}
		public function getPropertiespjSet():ArrayCollection{
			var arrC:ArrayCollection = new ArrayCollection();
			for (var i:int=0; i<projectProperty.length;i++){				
				var item:Propertiespresets = Propertiespresets(projectProperty.getItemAt(i));
				var propertySets:Propertiespj = new Propertiespj();
				if(hasOwnProperty("text_"+item.fieldName)){						
					/* propertySets = checkItemExist(item);
					propertySets.projectFk = model.currentProjects.projectId;
					propertySets.propertyPreset = item;
					propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
					propertySets.fieldValue = this["text_"+item.fieldName].text;	
					arrC.addItem(propertySets); */	
					
					if(item.fieldName == "ean"){
						propertySets = checkItemExist(item);
						propertySets.projectFk = model.currentProjects.projectId;
						propertySets.propertyPreset = item;
						propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
						propertySets.fieldValue = popup_priority.selectedIndex.toString();
						arrC.addItem(propertySets);
					}
					else if(item.fieldName == "sap"){
						propertySets = checkItemExist(item);
						propertySets.projectFk = model.currentProjects.projectId;
						propertySets.propertyPreset = item;
						propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
						propertySets.fieldValue = date_clt_date.text.toString();
						arrC.addItem(propertySets);
					}else{
						propertySets = checkItemExist(item);
						propertySets.projectFk = model.currentProjects.projectId;
						propertySets.propertyPreset = item;
						propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
						propertySets.fieldValue = this["text_"+item.fieldName].text;	
						arrC.addItem(propertySets); 
					}
				}
				if(hasOwnProperty("date_"+item.fieldName)){						
					propertySets = checkItemExist(item);
					propertySets.projectFk= model.currentProjects.projectId;
					propertySets.propertyPreset = item;
					propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
					if(validate(this["date_"+item.fieldName])){
						propertySets.fieldValue = this["date_"+item.fieldName].text;
					}else{
						this["date_"+item.fieldName].text = '';
					}
					//arrC.addItem(propertySets);	
					if(item.fieldName != "clt_date"){
						arrC.addItem(propertySets);
					}
				} 
				if(this.hasOwnProperty("popup_"+item.fieldName)){				
					propertySets = checkItemExist(item); 
					propertySets.projectFk= model.currentProjects.projectId;
					propertySets.propertyPreset = item;
					propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
					propertySets.fieldValue = this["popup_"+item.fieldName].selectedIndex;
					//arrC.addItem(propertySets);	
					if(item.fieldName != "priority"){
						arrC.addItem(propertySets);
					}
				} 
				if( this.hasOwnProperty( "checkbox_" + item.fieldName ) ) {
					propertySets = checkItemExist( item );
					propertySets.projectFk= model.currentProjects.projectId;
					propertySets.propertyPreset = item;
					propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
					//propertySets.fieldValue = this[ "checkbox_" + item.fieldName ].selected;
					//arrC.addItem( propertySets );	
					if( model.currentUserProfileCode == "CLT" ){
						propertySets.fieldValue = "false";
					}else{
						propertySets.fieldValue = this[ "checkbox_" + item.fieldName ].selected;
					}
					arrC.addItem( propertySets );
				}  
			}
			return arrC;			
		} 
		
		private var vResult:ValidationResultEvent;
		private function validate(obj:Object):Boolean{
			dateVal.source = obj;
	 		vResult = dateVal.validate();
            if (vResult.type==ValidationResultEvent.VALID) {
            	return true;
            }
            return false;
   		} 
		
		public function checkItemExist( item:Propertiespresets ):Propertiespj {
			for( var i:int = 0; i < model.currentProjects.propertiespjSet.length; i++ ) {
				var chekProperty:Propertiespj = model.currentProjects.propertiespjSet.getItemAt( i ) as Propertiespj;
					if( chekProperty.propertyPreset.propertyPresetId == item.propertyPresetId ) {
							return chekProperty;
					}
			}
			return new Propertiespj();
		}
        
        private function updateProperties():void {    
        	var tempPriority:String = null;    	
        	for (var i:int=0; i<projectProperty.length;i++){				
				var item:Propertiespresets = Propertiespresets(projectProperty.getItemAt(i));
				var visible:Proppresetstemplates = checkTemplate(item);
				if(this.hasOwnProperty("label_"+item.fieldName)&&this["label_"+item.fieldName]!=null){
					if(visible!=null){
						if(this["label_"+item.fieldName] is Label){
							this["label_"+item.fieldName].text = visible.fieldLabel;
						}else{					
							this["label_"+item.fieldName].label = visible.fieldLabel;
						}
						this["label_"+item.fieldName].visible = true;
					}else{
						this["label_"+item.fieldName].visible = false;
					}
				} 
				if( this.hasOwnProperty( "checkbox_" + item.fieldName ) && ( this[ "checkbox_" + item.fieldName ] ) ) {
					if(visible!=null){
						var selectedValue:String = getPropertyValue( item.propertyPresetId );
						this[ "checkbox_" + item.fieldName ].visible = true;
						this[ "checkbox_" + item.fieldName ].label = visible.fieldOptionsValue;

						if( selectedValue == 'true' ) {
							this[ "checkbox_" + item.fieldName ].selected = true;
						}		
						else {
							this[ "checkbox_" + item.fieldName ].selected = false;
						}	
						/* if( !model.editForm ) {
							if( this[ "checkbox_" + item.fieldName ] is CheckBox ) {
								this[ "checkbox_" + item.fieldName ].enabled = false;
							}
							else {
								this[ "checkbox_" + item.fieldName ].enabled = true;									
							}
						}   */
						
						if( this[ "checkbox_" + item.fieldName ] is CheckBox ) {
							if( model.currentUserProfileCode != "CLT" )
								this[ "checkbox_" + item.fieldName ].enabled = true;
							else
								this[ "checkbox_" + item.fieldName ].enabled = false;
						}
					}
					else {
						this[ "checkbox_" + item.fieldName ].visible = false;
					}
				}
				if( hasOwnProperty( "date_"+item.fieldName ) && this[ "date_"+item.fieldName ] != null ) {	
					this[ "date_"+item.fieldName ].name = item.propertyPresetId;		
					if( visible != null ) {
						var propvalue:String = getPropertyValue(item.propertyPresetId);
						if(propvalue=='' || propvalue==null){			
							DateField(this["date_"+item.fieldName]).text='';
						}else{
							var date:Date = getDate(propvalue);	
							DateField(this["date_"+item.fieldName]).data = date;
						}
						if( !model.editForm ) {									
							DateField( this[ "date_" + item.fieldName ] ).enabled = false;
							DateField( this[ "date_" + item.fieldName ] ).styleName = "disabledDateField"; 
						}
						else {
							DateField( this[ "date_" + item.fieldName ] ).enabled = true;
							DateField( this[ "date_" + item.fieldName ] ).editable = true;
							DateField( this[ "date_" + item.fieldName ] ).styleName = "DateField"; 
						}
						DateField( this[ "date_" + item.fieldName ] ).visible = true;
					}
					else {
						DateField( this[ "date_" + item.fieldName ] ).visible = false;
					}
					this[ "date_" + item.fieldName ].removeEventListener( FocusEvent.FOCUS_OUT, onFieldChange );	
					this[ "date_" + item.fieldName ].addEventListener( FocusEvent.FOCUS_OUT, onFieldChange, false, 0, true);
				}
				if(this.hasOwnProperty("popup_"+item.fieldName)&&this["popup_"+item.fieldName]!=null){
					if(visible!=null){
						var popStr:String = String(visible.fieldOptionsValue);
						var popArr:Array = popStr.split(",");
						var value:String = getPropertyValue(item.propertyPresetId);
						this["popup_"+item.fieldName].name = item.propertyPresetId;
						this["popup_"+item.fieldName].dataProvider = popArr;
						this["popup_"+item.fieldName].visible = true;			
						if(value==''||value==null){
							this["popup_"+item.fieldName].selectedIndex = (item.fieldDefaultValue!=null)?item.fieldDefaultValue:0;
							if(this["popup_"+item.fieldName] is RadioGropus){
								this["popup_"+item.fieldName].selectedIndex = -1;
							}
							else {
								if(item.fieldName == "priority"){
	                            	//ComboBox(this["popup_"+item.fieldName]).selectedIndex = Number(value);
	                            	if(tempPriority)
	                            	ComboBox(this["popup_"+item.fieldName]).selectedItem = tempPriority;
	       						} else{
	       							ComboBox(this["popup_"+item.fieldName]).selectedIndex = Number(value);
	       						}
							}
						}
						else{
							this[ "popup_" + item.fieldName ].selectedIndex = Number( value );
						}
						if( !model.editForm ) {
							if( this[ "popup_" + item.fieldName ] is RadioGropus ) {
							}
							else {
								this[ "popup_" + item.fieldName ].enabled  = false;
							}
						}
						else {
							if( this[ "popup_" + item.fieldName ] is RadioGropus ) {
							}
							else {
								this[ "popup_" + item.fieldName ].enabled = true;
							}
						}
						this[ "popup_" + item.fieldName ].visible = true;
					}
					else {
						this[ "popup_" + item.fieldName ].visible = false;
					}
					this[ "popup_" + item.fieldName ].removeEventListener( FocusEvent.FOCUS_OUT, onFieldChange );	
					this[ "popup_" + item.fieldName ].addEventListener( FocusEvent.FOCUS_OUT, onFieldChange, false, 0, true);
				} 
				//if(hasOwnProperty("text_"+item.fieldName)&&this["text_"+item.fieldName]!=null){	
				if(item!=null){
					var propvalue:String = getPropertyValue(item.propertyPresetId);	
					if(visible!=null){
						if(item.fieldName == "ean"){	
							if(propvalue == ''){
								popup_priority.selectedIndex = 0; 
							}else{
								//popup_priority.selectedIndex = Number(value);
								tempPriority = propvalue;
								popup_priority.selectedItem = propvalue;
							}
							popup_priority.validateNow();
						}
						if(item.fieldName == "sap"){	
							if(propvalue == ''){
								DateField(date_clt_date).text = '';
							}else{
								var date:Date = getDate(propvalue);	
								DateField(date_clt_date).data = date;
							}
						}						
					}
				}
        	}        	  	
        }
        
        private function onFieldChange(event:FocusEvent):void{
			model.deportChange = true;
			if(model.updatedPresetId.indexOf(event.currentTarget.name)==-1){
				model.updatedPresetId.push(event.currentTarget.name);
				getChangedFields(event.currentTarget.name)
			}
		}
		
		private function getChangedFields(id:String):void{
			var object:Object = new Object();
			var propertiesPj:Propertiespj = Utils.getPropertyPj(Number(id),model.currentProjects.propertiespjSet)
			var propertyPresetTemplate:Proppresetstemplates = Utils.getPropertyPresetTemp(Number(id),model.currentProjects.presetTemplateFK.propertiesPresetSet)
			if(propertiesPj!=null&&propertyPresetTemplate!=null){
				object["propertiesPj"]=propertiesPj;
				object["propertyPresetTemplate"]=propertyPresetTemplate;
				model.updatedFieldCollection.addItem(object);
			}
		}
       
        protected function onStackChildIndexChange():void {
        	var selectedScreen:Object = Canvas( stack.selectedChild ).getChildAt( 0 );
        	if( stack.selectedIndex == OpenToDoListScreenEvent.OPEN_ORDERRECEPTIONSCREEN 
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_PROCESSVALIDATIONSCREEN
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_PREPARATIONTECHNIQUESCREEN
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_REALISATIONSCREEN 
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_LANCEMENTLIVRAISONSCREEN
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_DEPARTLIVRAISONSCREEN
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_CLOSEPROJECTSCREEN 
					|| stack.selectedIndex == OpenToDoListScreenEvent.OPEN_TECHNICALPREPARATIONSCREEN ) {
				if(  selectedScreen is ITodoList ) {
					if( selectedScreen.property ) {
						selectedScreen.updateProperties();
					}
				}
			}
			else if( stack.selectedIndex == OpenToDoListScreenEvent.OPEN_ORDERSCREEN ) {
				model.fileAccess = false;
				if( selectedScreen ) {
					selectedScreen.resetFileForm();
				} 				
			}
			else if( stack.selectedIndex == OpenToDoListScreenEvent.OPEN_VIEWINDMESSAGESCREEN ) {
				if( selectedScreen) {		
					onArchiveVisible();
				}	
				else {
					if( _archiveVisibility )	{
						_archiveVisibility = false;
					}	 
				}
			}
			//NEWORACLE TODOLIST CLICK ENBLED UPDATE PHASES
			//DELEY EDITABLE VIEW
			if( model.currentProjects ) {
				if( model.currentUserProfileCode == "TRA" || model.currentUserProfileCode == "FAB" || model.currentUserProfileCode == "CLT") {
					if( model.currentProjects.projectStatusFK != ProjectStatus.STANDBY && model.currentProjects.projectStatusFK != ProjectStatus.ABORTED && !model.currentProjects.projectDateEnd ) {
						model.updatePhase = true;
					}
					else {
						model.updatePhase = false;
					}
				}
				else {
					model.updatePhase = false;
				}
			}
        }
        
        private function adminMonitorSwitch( workflowName:Number ):void {
        	switch( workflowName ) {   
				case OpenToDoListScreenEvent.OPEN_ORDERRECEPTIONSCREEN:
					model.modelToDoListView = "OrderReceptionScreen";
				break;
				case OpenToDoListScreenEvent.OPEN_TECHNICALPREPARATIONSCREEN:
					model.modelToDoListView = "TechnicalPreparationScreen";
				break;  
				case OpenToDoListScreenEvent.OPEN_PROCESSVALIDATIONSCREEN:
					model.modelToDoListView = "ProcessValidationScreen";
				break;
				case OpenToDoListScreenEvent.OPEN_PREPARATIONTECHNIQUESCREEN:
					model.modelToDoListView = "PreparationTechniqueScreen";
				break;  
				case OpenToDoListScreenEvent.OPEN_REALISATIONSCREEN:
					model.modelToDoListView = "RealisationScreen";
				break;
				case OpenToDoListScreenEvent.OPEN_CONTOLSCREEN:
					model.modelToDoListView = "ContolScreen";
				break;  
				case OpenToDoListScreenEvent.OPEN_RELECTURESCREEN:
					model.modelToDoListView = "RelectureScreen";
				break;
				case OpenToDoListScreenEvent.OPEN_LANCEMENTCORRECTIONSCREEN:
					model.modelToDoListView = "LancementCorrectionScreen";
				break;  
				case OpenToDoListScreenEvent.OPEN_REALISATIONSCREENCORRECTION:
					model.modelToDoListView = "RealisationCorrectionScreen";
				break;
				case OpenToDoListScreenEvent.OPEN_CONTROLCORRECTIONSCREEN:
					model.modelToDoListView = "ControlCorrection";
				break;  
				case OpenToDoListScreenEvent.OPEN_RELECTURECORRECTIONSCREEN:
					model.modelToDoListView = "RelecutreCorrection";
				break;
				case OpenToDoListScreenEvent.OPEN_LANCEMENTLIVRAISONSCREEN:
					model.modelToDoListView = "LancementLivration";
				break;  
				case OpenToDoListScreenEvent.OPEN_DEPARTLIVRAISONSCREEN:
					model.modelToDoListView = "DepartLivration";
				break;
				case OpenToDoListScreenEvent.OPEN_CLOSEPROJECTSCREEN:
					model.modelToDoListView = "CloseProjectScreen";
				break;  
				case OpenToDoListScreenEvent.OPEN_ORDERSCREEN:
					model.modelToDoListView = "NewOrderScreen";
				break;
				case OpenToDoListScreenEvent.OPEN_VIEWMESSAGSCREEN:
					model.modelToDoListView = "ViewMessageTask";
				break;  
				case OpenToDoListScreenEvent.OPEN_VIEWINDMESSAGESCREEN:
					model.modelToDoListView = "PDFReaderScreen";
				break;  
				/* case OpenToDoListScreenEvent.OPEN_COMPLETEDSCREEN:
					model.modelToDoListView = "CompletedScreen";
				break; 	 */																																		                                             
				default:
				break; 
			}
			adminMonitorName( model.modelToDoListView );
        }	
        
        private var tempType:String = null;
		private var tempMiscelleneous:String = null;
		private function assignINDTask():void
		{
			if(model.agenceAttachFileCommon.length!=0)	
			{
				var tempFiledetails:FileDetails = model.agenceAttachFileCommon.getItemAt(0) as FileDetails;
				for each( var filesvo:FileDetails in model.basicFileCollection)
				{
					if(filesvo.visible == true){				
						if((tempFiledetails.projectFK == filesvo.projectFK) && (tempFiledetails.fileId == filesvo.fileId)){
							tempType = tempFiledetails.type;
							tempMiscelleneous = tempFiledetails.miscelleneous;
							break;
						}
					}
				}				
			}			
		}	
        
        
        
        private var btn_id:String;
       	
		/**
		 * @event mouseEvent 
		 * shows the confirmation alert box for prevTask,nextTask,loopTask,jumpTask
		 * show alert if pdf file is not uploaed for conversion
		 */
		
		private function showAlert():void {
			if( todoTskcode == "P5T01A" ){
				isBackButton = false;
			}
			if( ( model.currentUserProfileCode == 'TRA' ) && ( model.currentProjectFiles.length == 0 ) ) {
				Alert.show( "Please upload / select a PDF document", model.appName );
			}
			else if( uploadComp.type == 'Tasks' && !model.pdfConversion && uploadComp.basicFileVisible && isBackButton && ( model.sendBasicFileArr.length == 0 ) ) {
					Alert.show( "Please upload / select a PDF document", model.appName );
			}
			else if( taskFABtoIMP && ( model.sendBasicFileArr.length == 0 && model.currentProjectFiles.length == 0 ) && isBackButton ) {
				//if( Utils.checkTemplateExist( model.checkImpremiurCollection, model.currentProjects.wftFK ) ) {
				if( todoTskcode == "P3T01A" ){
					Alert.buttonWidth = 100;	                
	            	Alert.yesLabel = "Yes";
	           		Alert.noLabel = "No";
					var alertStr:String = model.loc.getString( 'IMPPDFwarning' );
					fabTaskLbl = senderButtonLabel;
					Alert.show( alertStr, '', Alert.YES|Alert.NO, this, showIMPConfirmationAlert );
				}
			}
			else if( ( !isBackButton ) && ( StringUtils.trimSpace( comments.text ).length == 0 ) ) {
					Alert.show( "Please provide Comments", model.appName );
			}
			else {
				//if( Utils.checkTemplateExist( model.checkImpremiurCollection, model.currentProjects.wftFK ) ) {
				if( todoTskcode == "P3T01A" ){
					showConfirmationAlert( senderButtonLabel );
				}
				else {
					showConfirmationAlert( senderButtonLabel );
				}
			}		 
		}
		
		private var fabTaskLbl:String;
		private function showIMPConfirmationAlert( eve:CloseEvent ):void {
            if ( eve.detail == Alert.YES ) {
             	showConfirmationAlert( fabTaskLbl );
            }  
        } 
		
		private var conWindow:ConfirmationDemandeValidation;
		private function showConfirmationAlert( eventlbl:String ):void {
			var title:String = model.currentProjects.projectName + " " + Utils.dateFormat( model.currentTime );
			Alert.yesLabel = 'Confirmation';
			Alert.buttonWidth = 120;
			var alertStr:String = model.loc.getString( 'pleaseDoYouConfirm' ) + " " + eventlbl + ". " + model.loc.getString( 'thanks' );
			Alert.show( alertStr, title, Alert.YES|Alert.NO, this, confirmationHandler );
		}
		
		private function checkConfirmation( event:Event ):void {
			PopUpManager.removePopUp( conWindow );
			onConfirmedClicked();
		}
		
		/**
		 *@event CloseEvent
		 * based on the selection from confirmation alert box it excute the function
		 */
		private function confirmationHandler( event:CloseEvent ):void {
			if ( event.detail == Alert.YES ) {
				onConfirmedClicked();
			}
		}
		
		private function onConfirmedClicked():void {
			taskFABtoIMP = false;
			model.sendBasicFileArr = [];
			switch( btn_id ) {				
				case "prevTask":
					gotoPrevTask();
				break;
				case "nextTask":
					gotoNextTask();
				break;
				case "loopTask":
					gotoLoopTask();
				break;
				case "jumpTask":
					jumpTo();
				break;
			}
		}
		
	   private var senderButtonLabel:String;
	   private var isBackButton:Boolean;	
       private function checkAvailableTasks( event:MouseEvent, backButton:Boolean ):void {
       	    senderButtonLabel = event.currentTarget.label;
       	    if(senderButtonLabel == "TASK COMPLETED")
       			isBackButton = false;
       		else
       			isBackButton = backButton;
       			
       		btn_id = event.currentTarget.id;
			var handler:IResponder = new Callbacks( onAvailabilityResult );
			var taskEvent:TasksEvent = new TasksEvent( TasksEvent.EVENT_GET_SPECIFIC_TASK, handler );
			taskEvent.taskeventtaskId = model.currentTasks.taskId;
			taskEvent.dispatch();
       }
       
       private function onAvailabilityResult( rpcEvent:Object ):void {
			var currentTask:Tasks = Tasks( rpcEvent.result.getItemAt( 0 ) );
			if( currentTask.taskStatusFK == TaskStatus.FINISHED ) {
				model.currentTasks = currentTask;
				Alert.show( "The Task has been already completed by " + currentTask.personDetails.personFirstname );
				tasksContinuity();
			}
			else {
				showAlert();
			}
	   } 
       public function todolistProperties():void{
       		model.extraPropertyCollection = new ArrayCollection();
       		model.extraPropertyCollection = getPropertiespjSet();
       }
		/**
		 * Create previousTask
		 * its overridded in todolist.as 
		 * disable the whole application for updating the data
		 * change the workflowstate, remove the task if its finished, empty the comment box 
		 */
        public function gotoPrevTask():void {
        	model.preloaderVisibility = true;
        	todolistProperties();
        	ITodoList( Canvas(stack.selectedChild).getChildAt(0)).gotoPrevTask();
       		tasksContinuity();
       	}
        
        /**
		 * Create nextTask
		 * its overridded in todolist.as 
		 * disable the whole application for updating the data
		 * change the workflowstate, remove the task if its finished, empty the comment box
		 */
        public function gotoNextTask():void {
        	model.preloaderVisibility = true;
        	todolistProperties();
        	ITodoList( Canvas(stack.selectedChild).getChildAt(0)).gotoNextTask();
        	tasksContinuity();
        }
        
        /**
		 * Create LoopTask
		 * its overridded in todolist.as 
		 * disable the whole application for updating the data
		 * change the workflowstate, remove the task if its fi
		 */
        public function gotoLoopTask():void {
        	model.preloaderVisibility = true;
        	todolistProperties();
        	ITodoList( Canvas(stack.selectedChild).getChildAt(0) ).gotoLoopTask();
        	tasksContinuity();
        }
       
        /**
		 * Create jumpToTask
		 * its overridded in todolist.as 
		 * disable the whole application for updating the data
		 * change the workflowstate, remove the task if its fi
		 */
        public function jumpTo():void {
        	model.preloaderVisibility = true;
        	todolistProperties();
        	ITodoList( Canvas(stack.selectedChild).getChildAt(0) ).jumpTo();
        	tasksContinuity();
        }
        
        /**
        * remove the finished task
        */
        public function updateTask():void{ 
        	if( model.currentTasks.taskStatusFK == TaskStatus.FINISHED ) {
				for each( var item:Object in model.taskCollection ) {
					for each( var taskC:Tasks in item.tasks ) {
						if( taskC.taskId == model.currentTasks.taskId ) {
							item.tasks.removeItemAt( item.tasks.getItemIndex( taskC ) );
						}
					}
				}
				for each( var myTask:Tasks in model.tasks ) {
					if( myTask.taskId == model.currentTasks.taskId ) {
						model.tasks.removeItemAt( model.tasks.getItemIndex( myTask ) );
					}
				}
				model.tasks.refresh();
				model.taskCollection.refresh();
			}
        }
        
        private function onArchiveVisible():void {
        	if(model.currentTasks){
        	//if( model.currentUserProfileCode != "IND" ) {
	        	if(model.currentTasks.workflowtemplateFK.profileObject.profileCode!="BAT"){        	
	        		if( model.currentTasks ) {				
						var tsklbl:String = model.currentTasks.workflowtemplateFK.taskLabel;
						var tskcode:String = model.currentTasks.workflowtemplateFK.taskCode;
						var taskLabelTodo:String = model.currentTasks.workflowtemplateFK.taskLabelTodo;
						if( tsklbl == "VALIDATION CREA" && (tskcode == "PDF01A" || tskcode == "PDF01B")){		
							if( !_archiveVisibility )	_archiveVisibility = false;
						}
						else{
							if( !_archiveVisibility )	_archiveVisibility = true;
						}
						if(model.currentTasks.workflowtemplateFK.profileObject.profileCode!="BAT"){	
							model.editForm = true;
						}else{
							model.editForm = false;
						}
					}
	        	}	  
        	}      	
		} 
    	
    	private function onArchiveClick():void {
    		var status:Status = new Status()
			status.statusId =  TaskStatus.FINISHED;
			model.currentTasks.taskStatusFK = status.statusId;
			model.currentTasks.tDateEnd = model.currentTime;
			var handler:IResponder = new Callbacks( onArchiveDispatch );
			var event:TasksEvent = new TasksEvent( TasksEvent.EVENT_UPDATE_PDFREAD_ARCHIVE, handler );
			event.tasks = model.currentTasks; 
			CairngormEventDispatcher.getInstance().dispatchEvent(event);
    	}
    	
    	private function onArchiveDispatch( rpcEvent:Object ):void {
    		updateTask();
    		model.workflowState = 0;	
		}
    	
        [Bindable]
        private var commentText:String;  
        
        /**
        * update the comments
        */      
        public function updateComment():void{
        	comments.text = '';
        	if( model.currentTasks ) { 
        		
        		var tsklbl:String = model.currentTasks.workflowtemplateFK.taskLabel;
				var tskcode:String = model.currentTasks.workflowtemplateFK.taskCode;

				if( tsklbl == "VALIDATION CREA" && ( tskcode == "PDF01A" || tskcode == "PDF01B" ) ) {
					if( model.currentTasks.taskComment ) {
						var strcomments:String = model.currentTasks.taskComment.toString();
						if( strcomments.indexOf( '&#$%^!@' ) != -1 ) {
							commentText = getBody( model.currentTasks.taskComment.toString() );
						}
						else{
							commentText = model.currentTasks.taskComment.toString();
						}
					}
					else{
						if( model.currentTasks.previousTask ) {
							if( model.currentTasks.previousTask.taskComment ) {
								var commenstr:String = model.currentTasks.previousTask.taskComment.toString();
			        			if( commenstr.indexOf( '&#$%^!@' ) != -1 ) {
									commentText = getBody( model.currentTasks.previousTask.taskComment.toString() );
								}
								else {
									commentText = model.currentTasks.previousTask.taskComment.toString();
								}
							}
							else {
			        			commentText = '';
			        		}
		        		}
					}
				}
				else {
		        	if( model.currentTasks.previousTask ) {
		        		commentText = String( model.currentTasks.previousTask.taskComment );
		        	}
		        	else {
		        		commentText = String( model.currentTasks.projectObject.projectComment ); 
		        	}
		  		}
	        }
	        if( ( !commentText ) || ( commentText == 'null' ) ) {
	        	commentText = '';
	        }
	    }
        
        /**
         * get person from task object
         */ 
        public function getPerson( tasks:Tasks ):String {
        	if( tasks ) {
        		if( tasks.previousTask ) {
        			return String( tasks.previousTask.personDetails.personFirstname );
        		}	
        	}
        	return '';
        }
        
        /**
        * set todolist header name
        */
        private function setToDoName():void {
        	if( ViewMessageTask ) {
        		if( ViewMessageTask.currentState == 'replyView' ) {
        			ViewMessageTask.currentState = 'inboxView';
        		}        	
        	}
        	model.workflowState = 0;
        	model.pdfloader = true;
        	model.pdfFileCollection.source = []; 
        }
        
        /**
        * open the main project view
        */
        private function openMainProject():void {
        	if( model.mainProjectState != 1 ) {
	        	 model.currentMainProject = model.currentProjects;
			 	 model.mainProjectState = 1;
			 	 model.preloaderVisibility = true;
        	}
		 	model.mainClass.navigateModule( "Dashboard" ).dispatchEvent( new MouseEvent( MouseEvent.CLICK ) );
        }
        
        private function adminMonitorName( id:String ):void {			
			var eventproducer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_PRODU_ADMIN );				
			eventproducer.adminmonitorscreen = id;
			eventproducer.dispatch();
		}
		
		/**
		 * in FAB loggin he can view other person todolist by selecting the corresponding person from combobox
		 */
		private function changePerson():void {		
			//model.person = Persons( changeList.selectedItem );
			model.businessCard = model.person;
			model.taskCollection = new ArrayCollection();
			model.taskCollection.refresh();
			var taskEv:TasksEvent = new TasksEvent( TasksEvent.EVENT_GET_TASKS );
			taskEv.dispatch();
		}
		
		/**
		 * update the current logged in person
		 */
		private function loadCurrentPerson():void {
	        for( var i:int = 0; i < model.personsArrCollection.length; i++ ) {
				var item:Persons = Persons( model.personsArrCollection.getItemAt( i ) );			
				if( item.personId == model.person.personId ) {
					//changeList.selectedIndex = i;
				} 
			}
		}
		
		/**
		 * sort tasks by status 
		 */
		 private function onStatusChange():void {
			for each( var item:Object in model.taskCollection ) {
				item.tasks.filterFunction = sortByStatus;
				item.tasks.refresh();
			}
			model.taskCollection.refresh();
		} 
		
		/**
		 * filter function for tasks sorting
		 */
		 private function sortByStatus( item:Tasks ):Boolean {
	  		var retVal:Boolean = false;
	  		if( Status( statusList.selectedItem ).statusLabel == 'All' ) {
	  			return true;
	  		}
			if ( item.taskStatusFK == Status( statusList.selectedItem ).statusId ) { 
				retVal = true;
			}
			return retVal;
	  	} 
	  	
	  	/**
		 * label function for displaying person details in combobox
		 */
		private function concatName( item:Persons ):String {
			return item.personFirstname + ' ' + item.personLastname + ',' + GetVOUtil.getCompanyObject( item.companyFk ).companyname;
		} 
		 
		private function tasksContinuity():void {
			updateTask();
        	model.workflowState = 0;
        	comments.text='';
		}
		
		private var refreshEvent:RefreshEvent = new RefreshEvent( RefreshEvent.REFRESH );
		private var kh:KeyHandler; 
		private function onRefresh():void{
			refreshEvent.dispatch();
		}
		
		private var _projectProperty:ArrayCollection;
        [Bindable]
        public function get projectProperty ():ArrayCollection {
			return _projectProperty;
		}
		public function set projectProperty ( value:ArrayCollection ):void {
			_projectProperty = value;
		}
		
		private function onMessaging():void {
			var toPersons:Array = Utils.getDTLiteCltPersons( 'CLT' );
			var taskMsgCollection:ArrayCollection = new ArrayCollection();
			for each( var person:Persons in toPersons ) {
				var taskData:Tasks = new Tasks();
				taskData.taskId = NaN;
				taskData.previousTask = model.currentTasks;
				taskData.projectObject = model.currentProjects;
				taskData.personDetails = person;
				var domain:Categories = Utils.getDomains( model.currentProjects.categories );
				model.messageDomain = domain;
				//taskData.taskFilesPath = person.personId + "," + person.defaultProfile;
				
				var by:ByteArray = new ByteArray()
				var sep:String = "&#$%^!@";
				//var str:String = person.personFirstname + sep + "Deadline Message" + sep + msgTxt.text + sep + person.personId + "," + person.defaultProfile;
				var str:String = model.person.personFirstname + sep + "Deadline Message" + sep + msgTxt.text + sep + model.person.personId + "," + model.person.defaultProfile;
				by.writeUTFBytes( str );
				taskData.taskComment = by;
				
				var status:Status = new Status();
				status.statusId = TaskStatus.WAITING;
				taskData.taskStatusFK= status.statusId;
				taskData.tDateCreation = model.currentTime;
				taskData.workflowtemplateFK = Utils.getMessageTemplate( person.defaultProfile );
				taskData.tDateEndEstimated = Utils.getCalculatedDate( model.currentTime, taskData.workflowtemplateFK.defaultEstimatedTime ); 
				taskData.estimatedTime = taskData.workflowtemplateFK.defaultEstimatedTime;
				taskMsgCollection.addItem( taskData );
			} 		
			
			taskMsgCollection.refresh();
			
			var dtLiteMsgEvent:TasksEvent = new TasksEvent ( TasksEvent.CREATE_DTLITE_MSG );	
			dtLiteMsgEvent.tasksCollection = taskMsgCollection;
			dtLiteMsgEvent.dispatch();	
		}
		
		private function onDepartFieldsChange( event:Event ):void {
			var mapEvent:DepartureMapEvent = new DepartureMapEvent( DepartureMapEvent.MAP_DEPARTURE );
			mapEvent.changedField = event.currentTarget.id;
			dispatchEvent( mapEvent );
		}	
		
	]]>
</mx:Script>
	<mx:DateValidator id="dateVal" property="text" inputFormat="dd/mm/yyyy" />
	<mx:Canvas    styleName="mainBgContainer" top="0" left="0" right="0" bottom="0">
		<view:bussinessCard right="5" id="buzCard" width="300" height="61" top="10"/>
		<mx:Button toolTip="Refresh" right="15" top="15" styleName="refereshBtn" visible="{Boolean(!model.workflowState)}" click="onRefresh()" />       
		<mx:Text text="{model.loc.getString('TodoList')}" id="todoLabel" visible="{Boolean(!model.workflowState)}" 
			 styleName="mainProjectHeader"/>
		<mx:Canvas id="changePersonBox"  visible="false" top="3" left="3" width="{width - buzCard.width-40}">
			<mx:Label text="Select" id="profileLabel" verticalCenter="0"  left="0"/>
			<mx:ComboBox id="changeList" left="{profileLabel.width+10}" top="0" 
				dataProvider="{model.personsArrCollection}" labelFunction="concatName" 
				change="changePerson()" creationComplete="{loadCurrentPerson()}" />
			<mx:Label text="Select" right="{statusList.width+10}" verticalCenter="0"/>
			<mx:ComboBox id="statusList" right="0" visible="true" includeInLayout="{statusList.visible}" 
				dataProvider="{model.taskStatusColl}" labelField="statusLabel" change="onStatusChange()"/>		
		</mx:Canvas>
		
		<mx:VBox width="{width - buzCard.width-40}" height="61" top="10" left="40"  verticalScrollPolicy="off" horizontalScrollPolicy="off">
			<mx:Text text="{model.currentTasks.workflowtemplateFK.taskLabel}" visible="{Boolean(model.workflowState)}" 
				fontSize="14" id="todoTaskLabel" styleName="mainProjectHeader"/>
			<mx:Label text="{model.currentProjects.projectName}" visible="{Boolean(model.workflowState)}" 
					  id="mytext" width="{width - buzCard.width-75}" color="#b9b717" styleName="mainProjectHeader"  selectable="false"/>
		</mx:VBox>
		<mx:VRule strokeWidth="1" left="35" height="69" top="2" width="1" visible="{Boolean(model.workflowState)}"/>
		
		<mx:Button  styleName="backTODO" click="setToDoName()" top="2" left="0"
			id="backTotoDoList" visible="{Boolean(model.workflowState)}"/>
		<mx:Button id="MainProjectView" styleName="backMPV"  top="{4+backTotoDoList.height}" left="0"
			click="openMainProject()" visible="{Boolean(model.workflowState)}"/>	
	
			<mx:VBox width="100%" height="100%" top="75" left="5" right="5" bottom="5" 
				 verticalAlign="bottom" styleName="bgBorderContainer"
				verticalGap="0" paddingBottom="0" paddingTop="0" paddingRight="0" paddingLeft="0">
				<mx:ViewStack id="stack" selectedIndex="{ getView( model.workflowState ) }" paddingBottom="0" paddingTop="0" paddingRight="0" 
					          paddingLeft="0" width="100%" height="100%" change="onStackChildIndexChange()">
					          
						<mx:Canvas width="100%" height="100%">
					    	<view:ToDoListComp id="toDoListComp" width="100%" height="100%" dataProvider="{ model.taskCollection }" />      	
					    </mx:Canvas>
					    
					    <mx:Canvas width="100%" height="100%">
							<todo:OrderReceptionScreen  id="OrderReceptionScreen" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:TechnicalPreparationScreen id="TechnicalPreparationScreen" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:ProcessValidationScreen id="ProcessValidationScreen" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:TechnicalPreparationScreen id="PreparationTechniqueScreen" />
						</mx:Canvas>	
						
						<mx:Canvas width="100%" height="100%">
							<todo:TechnicalPreparationScreen id="RealisationScreen" />
						</mx:Canvas>	
						
						<mx:Canvas width="100%" height="100%">
							<todo:ContolScreen id="ContolScreen" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:ContolScreen id="RelectureScreen" />
						</mx:Canvas>	
						
						<mx:Canvas width="100%" height="100%">
							<todo:ContolScreen id="LancementCorrectionScreen" />
						</mx:Canvas>	
						
						<mx:Canvas width="100%" height="100%">
							<todo:ContolScreen id="RealisationCorrectionScreen" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:ContolScreen id="ControlCorrection" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:ContolScreen id="RelecutreCorrection" />
						</mx:Canvas>	
						
						<mx:Canvas width="100%" height="100%">
							<todo:DepartLivration id="LancementLivration" />
						</mx:Canvas>	
						
						<mx:Canvas width="100%" height="100%">
							<todo:DepartLivration id="DepartLivration" />
						</mx:Canvas>
							
						<mx:Canvas width="100%" height="100%">
							<todo:CloseProjectScreen id="CloseProjectScreen" />
						</mx:Canvas>
							
						<mx:Canvas width="100%" height="100%">
							<todo:NewOrderScreen id="NewOrderScreen"  projectProperty="{ model.propertiespresetsCollection }"/>
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:ViewMessageTask archive="updateTask()" id="ViewMessageTask"  messageFileDownload="{ model.messageFileCollection }" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:CloseScreen id="CloseScreenView" />
						</mx:Canvas>
						
						<mx:Canvas width="100%" height="100%">
							<todo:StandByScreen updateTask="updateTask()" id="standByScreenView" />
						</mx:Canvas>
							
						<mx:Canvas width="100%" height="100%">
							<todo:IndPDFScreen id="IndPDFScreen"  archive="onArchiveVisible()"/>
						</mx:Canvas>
						<!--<mx:Canvas width="100%" height="100%">
							<todo:CompletedScreen id="CompletedScreen" />
						</mx:Canvas>-->
				</mx:ViewStack>	 
		 
				<!--<view:WindowShade label="File Upload" opened="false" width="100%" visible="{ model.fileAccess }" includeInLayout="{ model.fileAccess }">
					<view:Upload id="uploadComp" height="170" basicFileCollection="{ model.basicFileCollection }" visible="{(model.currentUserProfileCode !='FAB') || (model.currentUserProfileCode !='OPE')}"
						         basicFileVisible="{ ( model.currentUserProfileCode == 'OPE' ) }"/>
				</view:WindowShade>	-->	
				
				<view:WindowShade label="File Upload" opened="true" width="100%" visible="{ model.fileAccess }" includeInLayout="{ model.fileAccess }" >
					<mx:HBox width="100%" height="170">
						<view:Upload id="uploadComp" basicFileCollection="{ model.basicFileCollection }" width="50%" height="100%" 
											visible="{ ( ( model.currentUserProfileCode != 'FAB' ) ?( ( model.currentUserProfileCode != 'OPE' ) ? true:false ):false ) }" 
											includeInLayout="{uploadComp.visible}" basicFileVisible="true"/>
						<mx:VBox width="50%" height="100%">
							<mx:TextArea width="100%" height="100%" id="msgTxt"/>
							<mx:Button label="Send Message" click="onMessaging()"/>
						</mx:VBox>					
					</mx:HBox>
					<mx:Form width="100%" height="100%">
					    <mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
					    	<!--<mx:FormItem label="Priority" id="label_priority" width="100%" height="100%">
					    		<mx:ComboBox id="popup_priority" width="10%"  change="onDepartFieldsChange( event )"/> 
					    	</mx:FormItem>
					    	<mx:FormItem id="label_clt_date" label="CLT Date de départ" width="100%" height="100%">
					    		<mx:DateField id="date_clt_date" restrict="0-9//" monthNames="{ model.monthNames }" formatString="DD/MM/YYYY"/>
					    	</mx:FormItem>-->
					    	<mx:FormItem label="Priority" width="100%" height="100%">
					    		<mx:ComboBox id="popup_priority" width="10%" dataProvider="{popPriority}"  change="onDepartFieldsChange( event )"/> 
					    	</mx:FormItem>
					    	<mx:FormItem id="label_clt_date" label="CLT Date de départ" width="100%" height="100%">
					    		<mx:DateField id="date_clt_date" restrict="0-9//" monthNames="{ model.monthNames }" formatString="DD/MM/YYYY"/>
					    	</mx:FormItem>
					    	<mx:FormItem id="label_tra_date" label="TRA Date de départ" width="100%" height="100%">
					    		<mx:DateField id="date_tra_date" restrict="0-9//" monthNames="{ model.monthNames }" formatString="DD/MM/YYYY"/>
					    	</mx:FormItem>
					    </mx:HBox>
					    <mx:HBox horizontalAlign="center" verticalAlign="middle" width="100%">
						    <mx:FormItem id="label_fabstatus" label="FABStatus :" width="100%" height="100%">
								<mx:CheckBox id="checkbox_fabstatus" change="onDepartFieldsChange( event )"/> 
							</mx:FormItem>								
							<mx:FormItem id="label_opestatus" label="OPEStatus :" width="100%" height="100%">
								<mx:CheckBox id="checkbox_opestatus" change="onDepartFieldsChange( event )"/>
							</mx:FormItem>	
							<mx:FormItem id="label_trastatus" label="TRAStatus :" width="100%" height="100%">
								<mx:CheckBox id="checkbox_trastatus" change="onDepartFieldsChange( event )"/>
							</mx:FormItem>	
						</mx:HBox>
				    </mx:Form>
				</view:WindowShade>     
			
				<mx:HBox id="commentBox" verticalAlign="middle" width="100%" height="60" horizontalGap="10" paddingRight="10"
					visible="false" includeInLayout="false">
					<mx:Text text="{model.loc.getString('commentsFrom')+ getPerson(model.currentTasks)}" width="110" textAlign="right"/>
					<mx:TextArea id="commentArea" editable="false" htmlText="{commentText}" styleName="textAreaReader" 
					width="50%" height="80%" horizontalCenter="0"/>
					<mx:Text text="{model.loc.getString('comments')}" width="110" textAlign="right"/>
					<mx:TextArea id="comments"  change="{model.currentTaskComment=comments.text}" 
					width="50%" height="80%" horizontalCenter="0"/>
				</mx:HBox>
				<mx:HBox width="100%"  includeInLayout="{Boolean(model.workflowState)}" visible="{Boolean(model.workflowState)}" verticalAlign="middle">
					<mx:Label text="{model.loc.getString('submitOption')}" visible="{Boolean(prevTask.label.length)}"/>
					<mx:Button id="prevTask" styleName="previousBtn" label="{model.workflowstemplates.optionPrevLabel}" includeInLayout="{Boolean(prevTask.label.length)}" visible="{Boolean(prevTask.label.length)}" click="checkAvailableTasks(event,false)"/>
					<mx:Button id="nextTask" styleName="nextBtn" label="{model.workflowstemplates.optionNextLabel}" includeInLayout="{Boolean(nextTask.label.length)}" visible="{Boolean(nextTask.label.length)}" click="checkAvailableTasks(event,true)"/>
					<mx:Button id="loopTask" styleName="loopBtn" label="{model.workflowstemplates.optionLoopLabel}" includeInLayout="{Boolean(loopTask.label.length)}" visible="{Boolean(loopTask.label.length)}" click="checkAvailableTasks(event,true)"/>
					<mx:Button id="jumpTask" styleName="jumbBtn" label="{model.workflowstemplates.optionJumpLabel}" includeInLayout="{Boolean(jumpTask.label.length!=1)}" visible="{Boolean(jumpTask.label.length!=1)}" click="checkAvailableTasks(event,true)"/>
					<mx:Button id="Archive"	label="archive"	includeInLayout="{ _archiveVisibility }" visible="{ _archiveVisibility }" click="onArchiveClick()"/>
				</mx:HBox>          						
			</mx:VBox>
			
	</mx:Canvas>
</mx:Canvas>