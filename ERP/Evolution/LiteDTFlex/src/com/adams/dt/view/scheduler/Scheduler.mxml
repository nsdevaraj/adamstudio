<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
				   xmlns:com="com.adams.dt.view.scheduler.mainViews.*"
				   horizontalScrollPolicy="off" verticalScrollPolicy="off">
	<mx:Binding source="gridComponent.isVScrollerVisible" destination="this.makeValidation"/>
	<mx:Script>
		<![CDATA[
			import com.adams.dt.model.scheduler.util.GridUtils;
			
			import mx.core.UIComponent;
			import mx.events.SliderEvent;
			import mx.collections.ArrayCollection;
			
			private var maskObj:UIComponent;
			private var listMask:UIComponent;
			
			private var _dataChanged:Boolean;
			private var _rowsToShowChanged:Boolean;
			
			private var _schedulerInput:ArrayCollection;
			[Bindable]
			public function get schedulerInput():ArrayCollection {
				return _schedulerInput;
			}
			public function set schedulerInput( value:ArrayCollection ):void {
				_schedulerInput = value;
				_dataChanged = true;
				invalidateProperties();
				invalidateDisplayList();
			}
			
			private var _rowHeight:Number = 30;
			[Bindable]
			public function get rowHeight():Number {
				return _rowHeight;
			} 	
			public function set rowHeight( value:Number ):void {
				_rowHeight = value;
				invalidateDisplayList();
			}
			
			private var _rowsToShow:Number = 10;
			[Bindable]
			public function get rowsToShow():Number {
				return _rowsToShow;
			} 	
			public function set rowsToShow( value:Number ):void {
				_rowsToShow = value;
				_rowsToShowChanged = true;
				invalidateProperties();
				invalidateDisplayList();
			}
			
			protected function modeSet( value:Number ):String {
				var returnValue:String = '';
				 switch( value ) {
					case 100 :
						returnValue = GridUtils.YEAR_MODE;
						break;
					case 200 :
						returnValue = GridUtils.MONTH_MODE;
						break;
					case 300 :
						returnValue = GridUtils.WEEK_MODE;
						break;
					case 400 :
						returnValue = GridUtils.DAY_MODE;
						break;
					case 500 :
						returnValue = GridUtils.HOUR_MODE;
						break;
					case 600 :
						returnValue = GridUtils.MINUTE_MODE;
						break;
					default:
						break;
				} 
				return returnValue;
			}
			
			private var _makeValidation:Boolean;
			[Bindable]
			public function get makeValidation():Boolean {
				return _makeValidation;
			}
			public function set makeValidation( value:Boolean ):void {
				_makeValidation = value;
				invalidateDisplayList();
			} 	
			
			override protected function createChildren():void {
				super.createChildren();
				if( !maskObj ) {
					maskObj = new UIComponent();
					addChild( maskObj );
				}
				if( !listMask ) {
					listMask = new UIComponent();
					addChild( listMask );
				}
			}
			
			override protected function commitProperties():void {
				super.commitProperties();
				if( _dataChanged ) {
					_dataChanged = false;
					if( !isNaN( rowsToShow )  && rowsToShow > schedulerInput.length ) {
						rowsToShow = schedulerInput.length;
					}
				}
				if( _rowsToShowChanged ) {
					_rowsToShowChanged = false;
					if( schedulerInput && schedulerInput.length < rowsToShow ) {
						rowsToShow = schedulerInput.length;
					}
				}
			}
			
			override protected function updateDisplayList( unscaledWidth:Number, unscaledHeight:Number ):void {
				if( schedulerInput && !isNaN( rowHeight ) && !isNaN( rowsToShow ) ) {
					if( gridComponent && maskObj ) {
						maskObj.graphics.clear();
						maskObj.graphics.lineStyle( 1, 0x000000 );
						maskObj.graphics.beginFill( 0xFFFFFF, 0 );
						
						var maskWidth:Number = gridComponent.width - gridComponent.scrollerShowAdjustment;
						maskObj.graphics.drawRect( gridComponent.x, gridComponent.y, maskWidth, gridComponent.headerHeight );
						maskObj.graphics.endFill();
						
						maskObj.graphics.beginFill( 0xFFFFFF, 0 );
						var maskheight:Number = ( rowsToShow * rowHeight )  + gridComponent.heightAdjustment + gridComponent.scrollerShowAdjustment;
						var coverWidth:Number;
						if( gridComponent.isVScrollerVisible ) {
							coverWidth = gridComponent.width;
						}
						else {
							coverWidth = maskWidth;
						}
						maskObj.graphics.drawRect( gridComponent.x, gridComponent.headerHeight, coverWidth, maskheight );
						maskObj.graphics.endFill();
						
						gridComponent.mask = maskObj;
					}
					if( listComponent && listMask ) {
						listMask.graphics.clear();
						listMask.graphics.lineStyle( 1, 0x000000 );
						listMask.graphics.beginFill( 0xFFFFFF, 0 );
						listMask.graphics.drawRect( listComponent.x, listComponent.y, listComponent.width, listComponent.height );
						listMask.graphics.endFill();
						
						listComponent.mask = listMask;
					}
				}
				super.updateDisplayList( unscaledWidth, unscaledHeight );
			}
			
		]]>
	</mx:Script>
	<mx:Label id="header" top="0" left="10" height="{ rowHeight }"/>
	<com:ListComponent id="listComponent" left="0" y="{ gridComponent.headerHeight }"
									width="150"  rowHeight="{ rowHeight }" rowsToShow="{ rowsToShow }"
									dataProvider="{ schedulerInput }" 
							    	verticalScroll="{ gridComponent.verticalScrollPosition }" />
	<com:GridComponent id="gridComponent" x="{ listComponent.x + listComponent.width }" 
							 	    width="{ width - listComponent.width }" dataProvider="{ schedulerInput }"
							 	    mode="{ modeSet( slider.value ) }" rowHeight="{ rowHeight }" rowsToShow="{ rowsToShow }"/>
	<mx:HBox x=" { ( gridComponent.x + gridComponent.width ) - ( slider.width + periodLabel.width + 30 ) }" 
					y="{ ( gridComponent.y + gridComponent.height + gridComponent.heightAdjustment )  + 40 }" horizontalGap="10">
		<mx:Label id="periodLabel" text="Period Adjustment" paddingTop="10"/>
		<mx:HSlider id="slider" width="400" labels="[ 'YEAR', 'MONTH', 'WEEK', 'DAY', 'HOUR' ]"  
							minimum="100" maximum="500"
							value="300" liveDragging="true" labelOffset="0" snapInterval="100"
							showDataTip="false"/>
	</mx:HBox>										  
</mx:Canvas>
