<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:view="com.adams.dt.view.*" implements="mx.rpc.IResponder"
		   height="100%" creationComplete="loggedIn()">
<mx:Script>
	<![CDATA[
		import com.adams.dt.event.PagingEvent;
		import com.adams.dt.event.ColumnsEvent;
		import com.adams.dt.event.ReportEvent;
		import com.adams.dt.event.CompaniesEvent;
		import com.adams.dt.event.PresetTemplateEvent;
		import com.adams.dt.business.util.GetVOUtil;
		import com.adams.dt.model.vo.Reports;
		import com.adams.dt.event.ImpremiurEvent;
		import com.adams.dt.event.EventsEvent;
		import com.adams.dt.view.mainView.History;
		import mx.collections.IViewCursor;
		import com.adams.dt.view.mainView.*;
		import mx.collections.SortField;
		import mx.collections.Sort;
		import com.adams.dt.model.vo.Modules;
		import mx.modules.Module;
		import com.adams.dt.event.PersonsEvent;
		import mx.events.ResizeEvent;
		import com.adams.dt.event.mainView.InitialCallEvent;
		import com.adams.dt.event.PropertiespresetsEvent;
		import com.adams.dt.event.generator.SequenceGenerator;
		import mx.rpc.IResponder;
		import com.adams.dt.event.ProjectsEvent;
		import mx.binding.utils.BindingUtils;
		import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import com.adams.dt.event.TasksEvent;
		import mx.controls.Alert;
		import com.adams.dt.model.ModelLocator;
		import com.adams.dt.model.vo.Profiles;
		import com.adams.dt.event.mainView.AlternateEvent;
		import mx.collections.ArrayCollection;
		import com.adams.dt.model.mainView.ViewFactory;
		import mx.controls.Button;
		import mx.events.FlexEvent;
		import mx.binding.utils.BindingUtils;
		
		import flash.events.MouseEvent;
		
		[Bindable]
		private var viewFactory:ViewFactory = ViewFactory.getInstance(); 
		
		private static const LOGIN_COUNT:int = 4; 
		
		private var tempId:String;
		import com.adams.dt.event.StatusEvents
		import mx.rpc.IResponder;
		import mx.controls.Alert;
		import mx.rpc.events.FaultEvent;
		import mx.rpc.Responder;
		import com.universalmind.cairngorm.events.*;

		[Bindable]
		private var model:ModelLocator = ModelLocator.getInstance();
		[Bindable]
		public var menuTextBind:String;
		public var menuText:String;
		public var localHistory:String=null;
		private var startConsumer:Boolean;
		public function loggedIn():void	{ 
			stage.addEventListener(Event.CLOSING,appHeader.closingApplication, false, 0,true);
			var profile:ArrayCollection = model.profilesCollection;
			var sort:Sort = new Sort(); 
            sort.fields = [ new SortField('moduleId') ];
            model.getAllModules.sort = sort;
            model.getAllModules.refresh();  
			initScreen(filterCollection(model.getAllModules));
			var taskevent:TasksEvent = new TasksEvent( TasksEvent.EVENT_GET_TASKS);
			var projectEvent : PagingEvent = new PagingEvent(PagingEvent.EVENT_GET_PROJECT_COUNT);
			//var projectEvent : ProjectsEvent = new ProjectsEvent(ProjectsEvent.EVENT_GET_PROJECTS);
			var proppevent : PropertiespresetsEvent = new PropertiespresetsEvent(PropertiespresetsEvent.EVENT_GET_ALLPROPERTY);
			var currentTaskEvent:TasksEvent = new TasksEvent( TasksEvent.CREATE_MAX_TASKSID);
			var getAllpresetTemp:PresetTemplateEvent = new PresetTemplateEvent(PresetTemplateEvent.EVENT_GETALL_PRESETTEMPLATE,handler);
			var columnsEv:ColumnsEvent= new ColumnsEvent(ColumnsEvent.EVENT_GET_ALL_COLUMNS);
			var reportEv:ReportEvent = new ReportEvent(ReportEvent.EVENT_GET_PROFILE_REPORTS);
			reportEv.profileFk = model.person.defaultProfile;
			var eventsArr:Array = [proppevent,getAllpresetTemp, projectEvent,taskevent,currentTaskEvent,reportEv,columnsEv]; 
 			var handler:IResponder = null;
 			var loginSeq:SequenceGenerator = new SequenceGenerator(eventsArr,handler)
  			loginSeq.dispatch();
		} 

		 private function filterCollection(ac:ArrayCollection):ArrayCollection{
			ac.filterFunction = deDupe;
			ac.refresh();
			return ac;
		}
		private var tempObj:Object = {};
		private function deDupe(item:Object):Boolean {
			var retVal:Boolean = false;
			if (!tempObj.hasOwnProperty(item.moduleId)) {
				tempObj[item.moduleId] = item;
				retVal = true;
			}
			return retVal;
		}
		public function initScreen( modules:ArrayCollection ):void {
			var compiledClasses:Array = [ TodoList, NewProject, AdminView, Dashboard, History ];
			var viewLength:int = modules.length;
			//bgImgHeight=(viewLength*48)+indicatorPanel.height+appHeader.height-54;
			model.currentProfileIdPush = new String(model.person.defaultProfile);
			model.clientCode = GetVOUtil.getProfileObject( model.person.defaultProfile ).profileCode;
			model.currentUserProfileCode =  GetVOUtil.getProfileObject( model.person.defaultProfile ).profileCode;
			startConsumer = false;
			for each(var mod:Modules in modules){
				mod.moduleName == 'AdminView'? adminConsumerStart() : consumerStart();
				viewFactory.addViewClass( mod.moduleName , mod.moduleClass);
				var myContainer:CFMyContainer = new CFMyContainer();
				myContainer.y = height;
				myContainer.x = 0; 
				myContainer.percentWidth = 100//mainCon.width//mod.moduleWidth;
				myContainer.percentHeight = 100//mainCon.height;
				myContainer.verticalScrollPolicy = 'off';
				myContainer.horizontalScrollPolicy = 'off';
				myContainer.name = mod.moduleName;
				myContainer.addEventListener( FlexEvent.CREATION_COMPLETE, onCreationComplete,false,0,true );
				myContainer.addEventListener( AlternateEvent.DO_ALTERNATE, onAlternateClick ,false,0,true);
				myContainer.addEventListener( InitialCallEvent.INITIAL_CALL, onInitialCall ,false,0,true);
				mainCon.addChild( myContainer );
				var but:Button = new Button();
				but.width = 51;
				but.height = 44;
				but.setStyle( 'top', 22 );
				but.setStyle( 'right', (modules.getItemIndex(mod)*51)+138 );
				
				but.name = mod.moduleName;
				but.styleName = mod.moduleName;
				but.toolTip = mod.moduleName;
				but.addEventListener(MouseEvent.CLICK, onButtonClick ,false,0,true);
				buttonCon.addChild( but );
				viewFactory.buttonObjects[ but.name ] = buttonCon.getChildAt( buttonCon.getChildIndex( but ) );
			} 
			Button( buttonCon.getChildByName( Modules( modules.getItemAt( 0 ) ).moduleName) ).dispatchEvent(new MouseEvent(MouseEvent.CLICK));
			
			if( model.currentUserProfileCode == "TRA" || model.currentUserProfileCode == "FAB" || model.currentUserProfileCode == "CLT") {
				model.editForm = true;
			}
			else{
				model.editForm = false;
			}
		} 
		private function onCreationComplete( event:FlexEvent ):void {
		}
		
		private function onAlternateClick( event:AlternateEvent ):void {
			 var index:int = mainCon.getChildIndex( CFMyContainer( event.currentTarget ) );
			for( var i:int = 0; i < mainCon.numChildren; i++) {
     			if( i != index ) {
     				if( !CFMyContainer( mainCon.getChildAt( i ) ).showing ) {
     					Button(buttonCon.getChildAt(i)).enabled = true;
     					CFMyContainer( mainCon.getChildAt( i ) ).onClick();
     					break;
     				}
     			}
     		} 
		}
		
		private function onButtonClick( event:MouseEvent ):void {
			Button( event.currentTarget ).enabled = false;
			var index:int = buttonCon.getChildIndex( Button( event.currentTarget ) );
			CFMyContainer( mainCon.getChildAt( index ) ).onClick();
			//MyContainer( mainCon.getChildAt( index ) ).headerButton.dispatchEvent( new MouseEvent( MouseEvent.CLICK ) );
		}
		
		private function onInitialCall( event:InitialCallEvent ):void {
			model.modelMainProjectView = "";
			var propertyName:String = event.propertyName;
			switch( propertyName ){
				case "TodoList":
				  onToDoClick( event.currentTarget.name );				 
				break;	
				case "MainProjectView":
				  onMainProjectClick( event.currentTarget.name );				 
				break;
				case "NewProject":
				 onNewProjectClick( event.currentTarget.name );				
				break;
				case "PendingProjectView":
				  onPendingProjectClick( event.currentTarget.name );				 
				break;
				case "Archive":
				   onArchiveClick( event.currentTarget.name );				  
				break;
				case "Search":
					onSearchCheck( event.currentTarget.name );
				break;
				case "Report":		
					onReportClick( event.currentTarget.name );	
				break;
				case "AdminView":
					BindingUtils.bindProperty(viewFactory.objClasses['AdminView'],'adminMonitor',model,'modelAdminMonitorArrColl')
				break;
				case "Dashboard":		
					onDashboardClick( event.currentTarget.name );	
				break;
				case "History":		
					onHistoryClick( event.currentTarget.name );	
				break;
				default:
				break;
			}  
			if(model.currentUserProfileCode!='ADM')
				  adminMonitorName(event.currentTarget.name);
		}
		// Methods required by the IResponder interface		
	    public function result(data:Object):void {
	      	var arrc : ArrayCollection = data.result as ArrayCollection;
			model.modelAdminHistoryColl.list = arrc.list;
			if(localHistory!=null)
				viewFactory.objClasses[ localHistory ].setProvider( model.modelAdminHistoryColl );		
	    }
	    public function fault(data:Object):void {
	    }
		private function onHistoryClick( id:String ):void {
			localHistory = id; 		
	 		var handler:IResponder = new Callbacks(result,fault);
            //var eEvent:EventsEvent = new EventsEvent(EventsEvent.EVENT_GET_EVENTS,handler);
            var eEvent:EventsEvent = new EventsEvent(EventsEvent.EVENT_GET_ALL_EVENTSS,handler);	          
		 	eEvent.dispatch(); 		
	 		
	 		if( viewFactory.objClasses[ id ].dpTask == null ) {
				viewFactory.objClasses[ id ].setProvider( model.modelAdminHistoryColl );		
			}
			else{
				viewFactory.objClasses[ id ].setProvider( model.modelAdminHistoryColl );		
			}			
		}
		private function onToDoClick( id:String ):void {
			
		}
		 
		private function onNewProjectClick( id:String ):void {
			if( model.currentProjectFiles.length > 0 ) {
        		model.currentProjectFiles = new ArrayCollection();
        	} 
		}
		
		private function onPendingProjectClick( id:String ):void {
			if( viewFactory.objClasses[ id ].domainProvider == null ) {
				viewFactory.objClasses[ id ].globalSet( model.domainCollection1 );
			}
		}
		
		private function onMainProjectClick( id:String ):void {
			model.showFileContainer = false;
			viewFactory.objClasses[ id ].setSelectedIndex( model.currentProjects, 0 );
			model.propertiespresetsCollection.refresh();
		}
		
		
		private function onArchiveClick( id:String ):void {
			if( viewFactory.objClasses[ id ].domainProvider == null ) {
				viewFactory.objClasses[ id ].getDomains( model.domainCollection1 );
			}
		}
		
		private function onSearchCheck( id:String ) :void { 
			if( viewFactory.objClasses[ id ].searchTool._grid.dataProvider.length == 0 ) {
				viewFactory.objClasses[ id ].searchTool.isChartVisible = false;
				var report:Reports = model.tabsCollection.getItemAt( 0 ) as Reports;
				viewFactory.objClasses[ id ].searchTool.label = report.reportName;
				viewFactory.objClasses[ id ].searchTool.property = report.fieldArray;
				viewFactory.objClasses[ id ].searchTool.header = report.booleanArray;
				viewFactory.objClasses[ id ].searchTool.gridColumns = report.headerArray;
				viewFactory.objClasses[ id ].searchTool.projectStatus = report.projectStatus;
				viewFactory.objClasses[ id ].searchTool.maketableProvider( model.projectsCollection );
			} 
		}
		
		private function onReportClick( id:String ):void {
			if( !viewFactory.objClasses[ id ].initLoad )
				viewFactory.objClasses[ id ].getConfig(); 
		}
		
		private function onDashboardClick( id:String ):void {
		
		}
		
		private function onResize( event:ResizeEvent ):void {
			/* for( var i:int = 0; i < mainCon.numChildren; i ++ ) {
				if( mainCon.getChildAt( i ) is MyContainer ) {
					if( MyContainer( mainCon.getChildAt( i ) ).showing ) {
						mainCon.getChildAt( i ).x = mainCon.width - 0;
						mainCon.getChildAt( i ).width = mainCon.width; 
					}
				}
			} */
		}
		private function consumerStart():void {					
			if(!startConsumer){
				var consumer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_CHAT_CONSUMER );				
				consumer.dispatch();
				startConsumer = true;
			}			
		}	
		private function adminConsumerStart():void {
			var eventconsumer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_CONSU_ADMIN);				
			CairngormEventDispatcher.getInstance().dispatchEvent( eventconsumer );	 
		}
		
		private function adminMonitorName( id:String ):void 	{			
			model.modelMainProjectView = id;
			var eventproducer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_PRODU_ADMIN);				
			eventproducer.adminmonitorscreen = id;
			CairngormEventDispatcher.getInstance().dispatchEvent( eventproducer );	
		}
		private function doDrag(e:MouseEvent):void {
				stage.nativeWindow.startMove();
		}
		public function onResizeCommand(event:MouseEvent):void{
    		stage.nativeWindow.startResize(NativeWindowResize.BOTTOM_RIGHT);
    		
		}
	]]>
</mx:Script>
<mx:Canvas id="bgImg"  
			styleName="bgMain"
			height="280" mouseDown="doDrag(event)"
			top="10" left="0" right="10"			
			verticalScrollPolicy="off"
			horizontalScrollPolicy="off">
			
		 <!--File download Indicator Display-->
		<mx:Canvas id="indicatorPanel" right="70" top="5" width="47" height="38" 
			visible="{model.downloadFileNumbers||model.uploadFileNumbers}" includeInLayout="{indicatorPanel.visible}"
		 	verticalScrollPolicy="off" horizontalScrollPolicy="off" 
			backgroundColor="#2f5955" >
				<mx:Button styleName="downloadIcon" top="2" horizontalCenter="0" visible="{model.downloadFileNumbers}"/>
				<mx:Label id="downloadTxt" textAlign="center" text="{model.downloadFileNumbers}" visible="{model.downloadFileNumbers}" 
					bottom="2" horizontalCenter="0"/>	
				<mx:Button styleName="uploadIcon" top="2" horizontalCenter="0" visible="{model.uploadFileNumbers}"/>
				<mx:Label id="uploadTxt" textAlign="center" text="{model.uploadFileNumbers}" visible="{model.uploadFileNumbers}" 
					bottom="2" horizontalCenter="0"/>	
		</mx:Canvas> 
		
			<mx:Button
				styleName="settingsBTN"
				id="localeBTN"
				click="model.settingsPanelVisible=true"
				top="5" right="50" 
				 />
</mx:Canvas>
<mx:Canvas id="mainCon" borderColor="#4e4b4a" backgroundColor="#222222" backgroundAlpha="0.76"
	 borderStyle="solid" top="65" left="12" bottom="10" right="22" dropShadowEnabled="true"
	 verticalScrollPolicy="off" width="100%" height="100%" horizontalScrollPolicy="off" resize="onResize( event )">

</mx:Canvas>



<mx:Canvas id="buttonCon" width="100%" height="100%" horizontalScrollPolicy="off" >
	
</mx:Canvas>

<view:AppHeader id="appHeader"  right="0" top="0" width="100%" />
<view:SettingsPanel id="settingsCon" includeInLayout="{model.settingsPanelVisible}" width="380" height="300" showEffect="Fade" hideEffect="Fade"
	visible="{model.settingsPanelVisible}" top="{localeBTN.y+localeBTN.height}" right="55" />

<mx:Canvas  bottom="10" right="22" mouseDown="onResizeCommand(event)" backgroundColor="black" backgroundAlpha="0" >
	<mx:Button  styleName="resizeBtn" />	
</mx:Canvas>	
</mx:Canvas>
