<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	       xmlns:comp="com.adams.dt.view.components.*" currentState="mesgState"
	       xmlns:msg="com.adams.dt.view.Message.*" horizontalScrollPolicy="off">
	       
	       <mx:Binding source="model.messageBulkTaskCollection" destination="this.sendMailCollection"/>
	       <mx:Binding source="model.basicFileCollection" destination="this.basicFilesCollection"/>
	       <mx:Metadata>
				[Event(name="msgClose", type="flash.events.Event")]
				[Event(name="msgCancel", type="flash.events.Event")]
			</mx:Metadata>
	       <mx:Script>
	       	<![CDATA[
	       		import com.adams.dt.model.vo.SMTPEmailVO;
	       		import com.adams.dt.event.SMTPEmailEvent;
	       		import mx.collections.SortField;
	       		import mx.collections.Sort;
	       		import mx.collections.IViewCursor;
	       		import com.adams.dt.business.util.GetVOUtil;
	       		import mx.controls.AdvancedDataGrid;
	       		import mx.events.DragEvent;
	       		import mx.managers.DragManager;
	       		import com.adams.dt.model.vo.Workflowstemplates;
	       		import com.adams.dt.model.vo.TaskStatus;
	       		import com.adobe.cairngorm.control.CairngormEventDispatcher;
	       		import com.adams.dt.event.TasksEvent;
	       		import com.adams.dt.model.vo.Status;
	       		import com.adams.dt.business.util.Utils;
	       		import com.adams.dt.model.vo.Categories;
	       		import com.adams.dt.model.vo.Tasks;
	       		import com.adams.dt.model.vo.Persons;
	       		import mx.collections.ArrayCollection;
	       		import mx.core.UIComponent;
	       		import com.adams.dt.model.vo.FileDetails;
	       		import com.adams.dt.model.mainView.ViewFactory;
	       		import com.adams.dt.business.util.SMTPUtil;	       		
	       		import com.adams.dt.model.ModelLocator;	       		
	       		[Bindable]
				private var model:ModelLocator = ModelLocator.getInstance();
				[Bindable]
				private var viewFactory:ViewFactory = ViewFactory.getInstance();
				[Bindable]
				private var toPerson : Persons;
				[Bindable]
				private var sendBasicMessageFileArr : Array =[];
				
				private var _sendMailCollection:ArrayCollection;
				[Bindable]
				public function get sendMailCollection():ArrayCollection {
					return _sendMailCollection;
				}
				public function set sendMailCollection( value:ArrayCollection ):void {
					if( value != null ) {
						sendMailTask( value );
					}
				}
				private function sendMailTask(value:ArrayCollection):void  //model.messageBulkTaskCollection
				{
					resetMessage();							
				}
							
				private var _basicFilesCollection:ArrayCollection;
				[Bindable]
				public function get basicFilesCollection ():ArrayCollection {
					return _basicFilesCollection;
				}
				public function set basicFilesCollection( value:ArrayCollection ):void {
					if( value ) {
						 _basicFilesCollection = makeBasicFiles( value );
					}
				}
				private function makeBasicFiles( basicFileArrCollection:ArrayCollection ):ArrayCollection {
					var creation:ArrayCollection = new ArrayCollection();
					for each( var item:FileDetails in basicFileArrCollection)
					{		
						if(item.visible == true)
						{					
							creation.addItem(item);
							creation.refresh()
						}					
					}
					//basicMsgFilesId.dataProvider = creation; 
					return creation;				
				}
				
				[Bindable]
				private var _personData :Persons
				public function personData ( value :Persons ): void 
				{
					_personData  = value
					if( !model.totalChatPerson.length > 0 ){
						model.totalChatPerson.addItem(_personData);
						toPerson = _personData
						toFieldDefault.text = _personData.personFirstname
					}else{
						findItems( _personData )
					}
					addMessageBoxes()
				}
				[Bindable]
				private var messageArr :ArrayCollection =  new ArrayCollection (); 
				private function dropTargetFn(evt:DragEvent): void {    
					var selectedObj:Object = AdvancedDataGrid( evt.dragInitiator ).selectedItem;
					var personsObj :Persons = GetVOUtil.getPersonObject( selectedObj.personID );
					if(model.totalChatPerson.length > 0){
						findItems( personsObj );
					}else{
						toFieldDefault.text = personsObj.personFirstname;
						toPerson = personsObj;
						model.totalChatPerson.addItem( personsObj );
					}
					addMessageBoxes();
				}
				private function doDragEnter(evt:DragEvent):void{  
	        		DragManager.acceptDragDrop(UIComponent(evt.target));	
	        	}
				private function addMessageBoxes (  ) :void {
					var personObj:Persons;
					var messageBut : Button;
					var countX:Number = 0;
					var countY:Number = 0;
					for ( var i :int = 0;i < model.totalChatPerson.length;i++)
					{
						personObj = Persons( model.totalChatPerson.getItemAt(i) );
						if(toPerson.personId != personObj.personId ){
							messageBut = new Button;
							textCvs.addChild(messageBut);
							messageBut.label = personObj.personFirstname;
							messageBut.data = personObj;
							messageBut.width = 80;
						 	messageBut.styleName = "toMesgBTN";
						 	messageBut.height = 20;
						 	messageBut.x = countX;
						 	messageBut.y = countY;
						 	countX += (messageBut.width+5);
						 	messageBut.addEventListener(MouseEvent.CLICK , removeFn,false,0,true);
						 	if(countX>=textCvs.width ||countX>=(textCvs.width-messageBut.width)  ){
						 		countX = 0;
						 		countY += (messageBut.height+5);
						 	}
						}
					 	
					}
				}
				private function removeFn( event :MouseEvent ) : void {
					textCvs.removeAllChildren();
					model.totalChatPerson.removeItemAt( model.totalChatPerson.getItemIndex( event.currentTarget.data ) );
					addMessageBoxes();
				}
				private function findItems( findOBj : Object ) :void 
				{
					var sort :Sort = new Sort();
					sort.fields = [new SortField('personId')]
					model.totalChatPerson.sort = sort;
					model.totalChatPerson.refresh();
					var cursor :IViewCursor = model.totalChatPerson.createCursor();
					var found :Boolean = cursor.findAny(findOBj);
					if(! found ) {
						model.totalChatPerson.addItem( findOBj );
					}					
				}	
				
				private function feedBackMode(eve:MouseEvent):void{
			    	if(eve.currentTarget.selected == true){
			    		currentState = "feedBackState"
			    		emailBtn.selected = false;
			    	}else{
			    		currentState = "mesgState"
			    	}
			    }
			    private function emailMode(eve:MouseEvent):void{
			    	if(eve.currentTarget.selected == true){
			    		currentState = "emailState"
			    		feedBtn.selected = false;
			    		
			    	}else{
			    		currentState = "mesgState"
			    	}
			    }
			    private function formFun(event:Event,pan:UIComponent,str:String=''):void{
					if(event.currentTarget.getChildAt(0).selected == false){
						event.currentTarget.getChildAt(0).selected = true;
						remForm(pan);
					}else{
						event.currentTarget.getChildAt(0).selected = false;
						addForm(pan);
					}
				}
				private function addForm(pan:UIComponent):void{
					pan.includeInLayout = true;
					pan.visible = true;
				}
				private function remForm(pan:UIComponent):void{
					pan.includeInLayout = false;
					pan.visible = false;
				}
				public function validateMessage( ):void{
					dispatchEvent(new Event("msgClose")); 
				}
				public function sendMessagefn( ):void{ 
			      	sendBasicMessageFileArr = [];
					sendBasicMessageFileArr = basicMsgFilesId.selectedItems;
					if(sendBasicMessageFileArr.length!=0){	
						basicFiles();
					}
					
					if(model.onlyEmail == 'MESSAGE' || model.onlyEmail == 'REEMAIL' || model.onlyEmail == 'EMAIL')
						model.onlyEmail = '';
													
					if(model.fileDetailsArray.length!=0)
					{
						model.fileDetailsArray.removeAll();
						model.fileDetailsArray = new ArrayCollection();
					}
					if(model.FileAttachArrayColl.length!=0)
					{
						model.FileAttachArrayColl.removeAll();
						model.FileAttachArrayColl = new ArrayCollection();
					}
					if(currentState == 'mesgState')
					{		
						model.onlyEmail = 'MESSAGE';	
						separateMessage();		
					}
					
					else if(currentState == 'feedBackState')
					{	
						model.onlyEmail = 'FEEDBACK';	
						
						//-----------NEW SERVER EMAIL ADD START------------------------
						//SMTPUtil.mail(model.SmtpfrmLbl,subject.text,body.text);
						
						var eEvent:SMTPEmailEvent = new SMTPEmailEvent( SMTPEmailEvent.EVENT_CREATE_SMTPEMAIL );
						var _smtpvo:SMTPEmailVO = new SMTPEmailVO();
						_smtpvo.msgTo = model.SmtpfrmLbl;
						_smtpvo.msgSubject = subject.text;   
						_smtpvo.msgBody = body.text;
						eEvent.smtpvo = _smtpvo;
						eEvent.dispatch();
						//-----------END ------------------------
						
						resetMessage();
					}
					
					else if(currentState == 'emailState')
					{		
						model.onlyEmail = 'EMAIL';								
						separateMessage();
					}  	
					validateMessage();
				}
				public function basicFiles():void
				{
					model.basicAttachFileColl = new ArrayCollection();					
					if(sendBasicMessageFileArr.length!=0)	
					{	
						var len:int = sendBasicMessageFileArr.length;
						for(var i:int = 0;i < len; i++)
						{
							var tempFiledetails:FileDetails = sendBasicMessageFileArr[i] as FileDetails;					
							var fileduplicate:FileDetails = new FileDetails();
							fileduplicate.fileId = NaN;
							fileduplicate.fileName = tempFiledetails.fileName;
							fileduplicate.filePath = tempFiledetails.filePath;
							fileduplicate.fileDate = tempFiledetails .fileDate;
							//fileduplicate.taskId = taskid;
							fileduplicate.categoryFK = tempFiledetails.categoryFK;
							//fileduplicate.type = tempFiledetails.type;
							fileduplicate.type = "Message";						
							fileduplicate.storedFileName = tempFiledetails.storedFileName;
							fileduplicate.projectFK = tempFiledetails.projectFK;
							fileduplicate.visible = tempFiledetails.visible;
							fileduplicate.releaseStatus = tempFiledetails.releaseStatus;
							fileduplicate.miscelleneous = tempFiledetails.miscelleneous;
							fileduplicate.fileCategory = tempFiledetails.fileCategory;
							fileduplicate.page = tempFiledetails.page;
							model.basicAttachFileColl.addItem(fileduplicate);
						}	
					}
				}
				private function separateMessage():void
				{
					//This is for Previous messagecollection send details remove
					model.messageBulkMailCollection = new ArrayCollection();
					//This is for Previous taskIDcollection send details remove
					model.TaskIDAttachArrayColl = new ArrayCollection();
						
					var messageTaskCollection:ArrayCollection = new ArrayCollection();				
					//model.totalChatPerson.addItem(model.toPerson);
					for each(var chatPer:Persons in model.totalChatPerson){
						var person:Persons = chatPer;
						var taskData:Tasks = new Tasks();
						taskData.taskId = NaN;
						taskData.previousTask = model.currentTasks;
						taskData.projectObject = model.currentProjects;
						taskData.personDetails = person;
						var domain:Categories = Utils.getDomains(model.currentProjects.categories);
						model.messageDomain = domain;
						taskData.taskFilesPath = model.person.personId+","+model.person.defaultProfile;
						var by:ByteArray = new ByteArray()
						var sep:String = "&#$%^!@";
						var str:String = userNameText.text+sep+subject.text+sep+body.text+sep+model.person.personId+","+model.person.defaultProfile;
						by.writeUTFBytes(str)
						taskData.taskComment = by;
						var status:Status = new Status();
						status.statusId = TaskStatus.WAITING;
						taskData.taskStatusFK= status.statusId;
						taskData.tDateCreation = model.currentTime;
						taskData.workflowtemplateFK = Utils.getMessageTemplate( person.defaultProfile );
						taskData.tDateEndEstimated = Utils.getCalculatedDate(model.currentTime,taskData.workflowtemplateFK.defaultEstimatedTime); 
						taskData.estimatedTime = taskData.workflowtemplateFK.defaultEstimatedTime;
						messageTaskCollection.addItem(taskData);
					}
						
					var tevent:TasksEvent = new TasksEvent ( TasksEvent.CREATE_MSG_TASKS);	
					tevent.tasksCollection = messageTaskCollection;
					CairngormEventDispatcher.getInstance().dispatchEvent(tevent);	 								
											
					if(currentState == 'emailState')
						model.outerEmailId = emailText.text;
											
					resetMessage(); 
				}
				
				public function resetMessage():void {
					if(currentState == 'emailState'){	
						emailText.text = '';											
					}
					if(sendBasicMessageFileArr.length!=0){
						sendBasicMessageFileArr = [];
					}
					if(basicMsgFilesId.selectedItems!=null){
						basicMsgFilesId.dataProvider = basicFilesCollection;
					}
					clearMessageAll();	
				}
				public function clearMessagefn():void
				{				 
					dispatchEvent(new Event('msgCancel'));
					if(basicMsgFilesId.selectedItems!=null){
						basicMsgFilesId.dataProvider = basicFilesCollection;
					}					
					clearMessageAll();
				}
				public function clearMessageAll():void
				{	
					if(uploadId!=null){
						uploadId.listFiles.dataProvider=[];
						uploadId.UploadFiles = [];
					}
					if(model.totalChatPerson.length!=0){
						model.totalChatPerson.removeAll();
						model.totalChatPerson = new ArrayCollection();
					} 
					if(textCvs.numChildren!=0)
						textCvs.removeAllChildren();
					if(toFieldDefault.text.length!=0)
						toFieldDefault.text = '';					
					
					body.text = '';						
				}
				
	       	]]>
	       </mx:Script>
		 
	<mx:states>
	<mx:State name="feedBackState">
		<mx:SetProperty target="{stTo}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{stTo}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{emailForm}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{emailForm}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{toTask}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{toTask}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{ccTask}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{ccTask}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{filesContainer}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{filesContainer}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{uploadContainer}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{uploadContainer}"
			name="visible"
			value="false"/>		
	</mx:State>
	
	<mx:State name="emailState">
		<mx:SetProperty target="{stTo}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{stTo}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{emailForm}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{emailForm}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{toTask}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{toTask}"
			name="includeInLayout"
			value="true"/>
			
		<mx:SetProperty target="{ccTask}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{ccTask}"
			name="includeInLayout"
			value="true"/>	
		
		<mx:SetProperty target="{filesContainer}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{filesContainer}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{uploadContainer}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{uploadContainer}"
			name="visible"
			value="true"/>	
	</mx:State>
	
	<mx:State name="mesgState">
		<mx:SetProperty target="{stTo}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{stTo}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{emailForm}"
			name="visible"
			value="false"/>
		<mx:SetProperty target="{emailForm}"
			name="includeInLayout"
			value="false"/>
		<mx:SetProperty target="{toTask}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{toTask}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{ccTask}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{ccTask}"
			name="includeInLayout"
			value="true"/>	
			
		<mx:SetProperty target="{filesContainer}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{filesContainer}"
			name="visible"
			value="true"/>
		<mx:SetProperty target="{uploadContainer}"
			name="includeInLayout"
			value="true"/>
		<mx:SetProperty target="{uploadContainer}"
			name="visible"
			value="true"/>		
	</mx:State>

</mx:states>

	 
		 
			<mx:Canvas visible="true" left="0" right="0" styleName="darkBgContainer"
					   height="100%" horizontalScrollPolicy="off">
				
				<mx:Canvas styleName="headerBgContainer" right="5" left="5" top="5" height="32">
					<mx:Image source="{ ImageResourceEmbedClass.MAILICON }" left="9" verticalCenter="0"/>
					<mx:Label text="message" left="33" verticalCenter="0"/>
				</mx:Canvas>
							
				<mx:Button label="Feedback" id="feedBtn" toggle="true"
					left="20" top="40" click="feedBackMode(event)"/>
				<mx:Button label="E-Mail" id="emailBtn" left="{feedBtn.width+28}" top="40"
						   click="emailMode(event)" toggle="true"/>
						   
				<mx:Text text="{model.loc.getString('projectName')}"
						 id="projectName"
	  					 styleName="prjDecText"
	                     top="40"
	                     right="20"/>
				<mx:Text text="{ model.currentProjects.projectName.length > 30 ? model.currentProjects.projectName.slice( 0, 29 ) + '..,' : model.currentProjects.projectName }"
						 id="projectNameDesc" toolTip="{model.currentProjects.projectName}"
						 top="60"
						 right="20"/>
				<mx:VBox left="5" paddingRight="15"
						 right="0"
						 top="85">
					<mx:Form id="loginForm"
						     paddingTop="5"
						     paddingBottom="5"
						     left="5"
						     right="5"
						     top="100"
						     styleName="loginlabel">
						<mx:FormItem label="From:">
							<mx:TextInput width="287"
								          editable="false"
								          styleName="fromField"
								          id="userNameText"
								          text="{model.person.personFirstname}"/>
						</mx:FormItem>
						<mx:FormItem label="e-mail:"
							         id="emailForm"
							         includeInLayout="false"
							         visible="false">
					    	<mx:TextInput width="287"
								          styleName="fromField"
								          id="emailText"/>
						</mx:FormItem>
						<mx:FormItem label="To:"
							         id="stTo"
							         includeInLayout="false"
							         visible="false">
							<mx:TextInput id="feedBackText"
								          text="DT Team"
								          width="287"
								          styleName="chartViewerDragDropBG"/>
						</mx:FormItem>
						<mx:FormItem label="To:" id="toTask">
							<mx:TextInput width="287" id="toFieldDefault" styleName="fieldText" editable="false"/>	
						</mx:FormItem>
						<mx:FormItem id="ccTask" label="cc :">
							<mx:Canvas width="287" height="50"
								       styleName="chartViewerDragDropBG">
								<mx:Canvas id="textCvs" top="3" bottom="3" styleName="bgBorderContainer"
									left="3" right="3" dragEnter="doDragEnter(event)" dragDrop="dropTargetFn(event)"/>
							</mx:Canvas>
						</mx:FormItem>
						<mx:FormItem label="Subject:">
							<mx:TextInput id="subject"
										  editable="false"
										  text="{model.currentProjects.projectName}"
										  width="287"
										  styleName="fieldText"/>
						</mx:FormItem>
					</mx:Form>
								
					<mx:VBox id="holder" width="100%" >
						<comp:WindowShade id="uploadContainer" label="{model.loc.getString('uploadFiles')}" width="100%" opened="false">
							<mx:VBox  id="uploadFilesPan" width="100%" height="170" >
								<comp:Upload id="uploadId" type="Message" width="100%" height="100%" basicFileVisible="{true}"/>
							</mx:VBox>
						</comp:WindowShade>
									
						<comp:WindowShade label="Project Files" width="100%" opened="false" id="filesContainer">
							<mx:VBox id="projFiles" width="100%" height="150">
								<msg:CheckBoxListComponent id="basicMsgFilesId" width="100%" height="100%" 
												           dataProvider="{basicFilesCollection}" labelField="fileName" allowMultipleSelection="true"
												           itemRenderer="com.adams.dt.view.Message.CheckBoxRenderer" />	
							</mx:VBox>
						</comp:WindowShade>	
						
						<comp:WindowShade label="Message" opened="true" width="100%">
							<mx:VBox  id="mesgArea" width="100%" paddingLeft="5" paddingRight="5" 
								paddingBottom="5" paddingTop="5" height="130">
								<mx:TextArea id="body"
											 width="100%"
											 height="100%"
											 styleName="fieldText"/>
							</mx:VBox>
						</comp:WindowShade>	
					</mx:VBox>
					
					<mx:HBox width="100%"
							 horizontalGap="0"
							 left="20"
							 right="20"
							 top="286"
							 horizontalAlign="right">
						<mx:Button styleName="cancelMesg" 
								   id="cancelMessage"
								   label="{model.loc.getString('cancel')}"
								   click="clearMessagefn()"/>
						<mx:Spacer width="5"/>
						<mx:Button styleName="sendMesg"
								   id="sendMessage"
								   label="{model.loc.getString('send')}"
								   click="sendMessagefn()"/>
						<mx:Spacer width="16"/>
					</mx:HBox>
					
					<mx:TextInput includeInLayout="false"
								  visible="false"
								  width="287"
								  id="toField"
								  styleName="fieldText"
								  text="AV"/>
					</mx:VBox>
			</mx:Canvas>
</mx:Canvas>
