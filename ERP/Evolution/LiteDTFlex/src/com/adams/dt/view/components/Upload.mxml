<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
  		width="100%"  height="100%"  
  		 xmlns:msg="com.adams.dt.view.Message.*"
	  	creationComplete="onCreationComplete()" verticalGap="0">
	<mx:Metadata>
		[Event(name="uploadComplete", type="flash.events.Event")]
	</mx:Metadata> 
	
	<mx:Script>
		<![CDATA[
			import com.adams.dt.model.vo.FileCategory;
			import mx.collections.IViewCursor;
			import mx.collections.SortField;
			import mx.collections.Sort;
			import mx.events.ListEvent;
			import mx.events.ItemClickEvent;
			import mx.utils.ObjectUtil;
			import com.adams.dt.event.ApplicationStatusEvent;
			import com.adams.dt.model.ModelLocator;
			import mx.collections.ArrayCollection;
			import com.adams.dt.model.vo.FileDetails;
			import mx.controls.Alert;
			import mx.rpc.AsyncToken;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			 import mx.core.Application;
			
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			
			private var file:File;
			private var count:int;
			private var filesToUpload:ArrayCollection = new ArrayCollection();
			
			public var UploadFiles:Array = [];
			public var type:String;
			
			[Bindable]
			public var basicFiles:ArrayCollection = new ArrayCollection();
			[Bindable]
	       	public var basicFileVisible:Boolean;
			
			private var _basicFileCollection:ArrayCollection;	
			public function get basicFileCollection():ArrayCollection {
				return _basicFileCollection;
			}
			[Bindable(event="basicFileChange")]
			public function set basicFileCollection( value:ArrayCollection ):void {
				basicFiles = new ArrayCollection();
				if( !hasEventListener( "basicFileChange" ) ) {
					addEventListener( "basicFileChange", updateContainer, false, 0, true );
				}
				if( value ) {
					_basicFileCollection = value; 
					dispatchEvent( new Event( "basicFileChange" ) );
				}
			}			
			
			private function updateContainer( event:Event ):void {
				basicFiles = new ArrayCollection();
				
				for each( var item:FileDetails in basicFileCollection ) {				
					if( item.visible == true ) {		 
						basicFiles.addItem( item );
						basicFiles.refresh();						
					}
				}		
				
				if( basicFiles.length !=0 ) {
					if( basicFilesId ) {	
						basicFilesId.dataProvider = basicFiles; 
						basicFilesId.dataProvider.refresh();
					}
				}
			} 	
			
			protected function sendBasicFiles( ev:Object ):void {  
				model.sendBasicFileArr = basicFilesId.selectedItems;
				model.agenceAttachFileCommon = new ArrayCollection();
				
				if( model.sendBasicFileArr.length != 0 ) {	
					var len:int = model.sendBasicFileArr.length;
					for( var i:int = 0; i < len; i++ ) {
						var tempFiledetails:FileDetails = model.sendBasicFileArr[ i ] as FileDetails;
						model.agenceAttachFileCommon.addItem( tempFiledetails );
					}
				}
			}	
			
			private var _fileCategory:String = '';
			public function set fileCategory( str:String ):void {
				_fileCategory = str;
			}
			public function get fileCategory():String {
				return _fileCategory;
			}
			
			private function onCreationComplete():void{
				addEventListener( NativeDragEvent.NATIVE_DRAG_ENTER, onDragEnter, false, 0, true );
				addEventListener( NativeDragEvent.NATIVE_DRAG_DROP, onDragDrop, false, 0, true );
				basicFileCollection = model.basicFileCollection;				
 			}
			
			private function onDragEnter( event:NativeDragEvent ):void {
				if( event.clipboard.hasFormat( ClipboardFormats.FILE_LIST_FORMAT ) ) {
					var files:Array = event.clipboard.getData( ClipboardFormats.FILE_LIST_FORMAT ) as Array;
					if( files.length == 1 ) {
						if( !File( files[ 0 ] ).isDirectory ) {
							NativeDragManager.acceptDragDrop( this );
						}
					}
					else {
						NativeDragManager.acceptDragDrop( this );
					}
				}
			}
			
			private function onDragDrop( e:NativeDragEvent ):void {
				var arr:Array = e.clipboard.getData( ClipboardFormats.FILE_LIST_FORMAT ) as Array;
				addFiles( arr ); 
			}
		
			// Called to add file(s) for upload
			private function initiateAddFiles():void {
				file = new File();
				file.browseForOpenMultiple( "File Upload" );
				file.addEventListener( FileListEvent.SELECT_MULTIPLE, onFileSelect, false, 0, true );
			}
			
			private function onFileSelect( event:FileListEvent ):void {
				var arr:Array = event.files;
				addFiles( arr );
			}
			
			protected function addFiles( arr:Array ):void {
				var arr_Len:int = arr.length;
				var incomingItems:Array = [];
				var incomingCollection:ArrayCollection = new ArrayCollection();
				
				for( var k:int = 0;k < UploadFiles.length;k++ ) {
					incomingCollection.addItem( UploadFiles[ k ] );
				}
				
				for( var j:int = 0;j < arr_Len;j++ ) {
					if( checkDuplicateItem( arr[ j ], incomingCollection ) ) {
						arr[ j ] = undefined;
					}
					if( arr[ j ] != undefined ) {
						var inFile:File = arr[ j ] as File;
						if( inFile.isDirectory ) {
							arr[ j ] = undefined;
						}
					}
				}
				
				for( var l:int = 0;l <  arr_Len;l++ ) {
					if( arr[ l ] != undefined ) {
						incomingItems.push( arr[ l ] );
					}
				}
				
				for( var i:int = 0; i < incomingItems.length; i++ ) {
					
					var droppedFileObject:File = incomingItems[ i ];					
					
					UploadFiles.push( { name:droppedFileObject.name, size:formatFileSize( droppedFileObject.size ), status:"initial", fileObj:droppedFileObject } );
					
					var fileObj:FileDetails = new FileDetails();
					fileObj.fileName = droppedFileObject.name;
					fileObj.downloadPath = droppedFileObject.nativePath;
					fileObj.destinationpath = model.currentDir;
					fileObj.fileCategory = fileCategory;
					fileObj.type = type;      
					
					if( model.currentTasks ) {
						fileObj.taskId = model.currentTasks.taskId;
					}
					if( fileObj.type == "Tasks" && droppedFileObject.extension == "pdf" ) {
						model.pdfConversion = true;
						model.currentTasks.swfConversion = true;
					}
					model.currentProjectFiles.addItem( fileObj );					
				}
				listFiles.dataProvider = UploadFiles;
			}
			
			private function formatFileSize( numSize:Number ):String {
				var strReturn:String;
				numSize = Number( numSize / 1000 );
				strReturn = String( numSize.toFixed( 1 ) + " KB" );
				if ( numSize > 1000 ) {
					numSize = numSize / 1000;
					strReturn = String( numSize.toFixed( 1 ) + " MB" );
					if ( numSize > 1000 ) {
						numSize = numSize / 1000;
						strReturn = String( numSize.toFixed( 1 ) + " GB" );
					}
				}				
				return strReturn;
			}
			
			private function RemoveFiles():void {
				if( !listFiles.selectedItem ) {
					Alert.show( model.loc.getString( 'pleaseSelectAtleastOneItem' ) );
				}
				else {
					var selectedArray:Array = listFiles.selectedIndices;
					for( var i:int = 0; i < selectedArray.length;i++ ) {
						checkDuplicateItem( UploadFiles[ selectedArray[ i ] ], model.currentProjectFiles );							
						UploadFiles[ selectedArray[ i ] ] = undefined;
					}
					var newItems:Array = [];
					for( var j:int = 0; j <  UploadFiles.length;j++ ) {
						if( UploadFiles[ j ] != undefined ) {
							newItems.push( UploadFiles[ j ] );
						}
					}
					UploadFiles = newItems;
					listFiles.dataProvider = UploadFiles;
				}
			}
			
			private function checkDuplicateItem( item:Object, dp:ArrayCollection ):Boolean {
				for( var i:int = 0; i < dp.length; i++ ) {
					if( dp.getItemAt( i ).hasOwnProperty( 'name' ) ) {
						if( item.name == dp.getItemAt( i ).name ) {
							return true;
						}
					}
					else if( dp.getItemAt( i ).hasOwnProperty( 'fileName' ) ) {
						if( item.name == dp.getItemAt( i ).fileName ) {
							dp.removeItemAt( dp.getItemIndex( dp.getItemAt( i ) ) );
							return true;
						}
					}
				}	
				return false;
			} 
			
		]]>
	</mx:Script>
	<mx:Canvas width="100%" height="100%"  >
		<mx:DataGrid id="listFiles" left="0" top="0" bottom="25" right="{basicFileVisible?0:315}"
				allowMultipleSelection="true" verticalScrollPolicy="auto" 
				draggableColumns="false" resizableColumns="false" sortableColumns="false">
				<mx:columns >
					<mx:DataGridColumn width="220" headerText="{model.loc.getString('files')}"    dataField="name" wordWrap="true" textAlign="center"/>
					<mx:DataGridColumn width="50" headerText="{model.loc.getString('size')}"   dataField="size" textAlign="center"/>
				</mx:columns >
			</mx:DataGrid>
			
			<mx:HBox horizontalAlign="right" verticalAlign="middle" styleName="fileUploadFooter"  right="{basicFileVisible?0:315}"
				bottom="0" left="0" paddingRight="10" paddingTop="5">
					<mx:LinkButton id="btn" toolTip="Add file(s)" styleName="attachBtn" click="initiateAddFiles()" 
						label="{model.loc.getString('selectFiles')}" />
					<mx:Button id="removeButton" styleName="deleteIcon" toolTip="{model.loc.getString('removeFiles')}" 
						buttonMode="true" click="RemoveFiles()"/>						
			</mx:HBox>
			<msg:RadioBoxListComponent id="basicFilesId"  
				 width="300" right="0" top="25" bottom="0" click="sendBasicFiles(event)"
					dataProvider="{basicFiles}" labelField="fileName" allowMultipleSelection="false"
				 	visible="{basicFileVisible ? false : true}" includeInLayout="{basicFileVisible ? false : true}"
					itemRenderer="com.adams.dt.view.Message.RadioBoxRenderer" />
		
			 <mx:Canvas top="0" width="300"  visible="{basicFileVisible ? false : true}" includeInLayout="{basicFileVisible ? false : true}"
			 	 bottom="{basicFiles.length==0?0:basicFilesId.height}" right="0" styleName="darkBgContainer" >
				<mx:Label text="{basicFiles.length==0?'No Basic Files Available':'Agence Files'}" verticalCenter="0" horizontalCenter="0"  /> 	
			 </mx:Canvas>
	</mx:Canvas>
	 
</mx:VBox>
