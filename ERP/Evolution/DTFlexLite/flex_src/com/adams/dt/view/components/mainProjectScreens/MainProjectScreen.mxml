<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="100%" height="100%"
	       xmlns:view="com.adams.dt.view.components.todolistscreens.*"
	       xmlns:schedulerView="com.adams.dt.view.*"
	       xmlns:comp="com.adams.dt.view.components.*"
	       xmlns:teamView="com.adams.dt.view.components.todolistscreens.teamSelectionTool.*">
	
	<mx:Metadata>
		[Event(name="changeMPVIndex", type="flash.events.Event")]
	</mx:Metadata>
	
	<mx:Script>
		<![CDATA[
			import com.adams.dt.business.util.FileNameSplitter;
			import com.adams.dt.model.vo.Profiles;
			import com.adams.dt.model.vo.Teamlines;
			import com.adams.dt.business.util.GetVOUtil;
			import com.adams.dt.model.vo.Persons;
			import com.adams.dt.model.vo.DefaultTemplate;
			import com.adams.dt.view.components.ConfirmationDemandeValidation;
			import com.adams.dt.event.PersonsEvent;
			import mx.rpc.events.FaultEvent;
			import mx.managers.PopUpManager;
			import com.adams.dt.model.mainView.ViewFactory;
			import mx.containers.ViewStack;
			import mx.rpc.events.ResultEvent;
			import com.adams.dt.event.DefaultTemplateEvent;
			import com.adams.dt.model.vo.EventStatus;
			import com.adams.dt.event.PropertiespjEvent;
			import com.adams.dt.model.vo.FileDetails;
			import com.adams.dt.business.LocalFileDetailsDAODelegate;
			import com.adams.dt.model.vo.Events;
			import com.adams.dt.event.EventsEvent;
			import com.adams.dt.model.vo.ProjectStatus;
			import com.adams.dt.business.util.Utils;
			import com.adams.dt.event.TeamlineEvent;
			import com.adams.dt.event.DefaultTemplateValueEvent;
			import com.adams.dt.event.generator.SequenceGenerator;
		
		import com.adams.dt.event.departure.DepartureMapEvent;
		import com.adams.dt.event.ProjectsEvent;
		import com.universalmind.cairngorm.events.Callbacks;
		import mx.rpc.IResponder;
		import com.adams.dt.event.TasksEvent;
		import mx.events.FlexEvent;
		import mx.binding.utils.BindingUtils;
		import com.adams.dt.model.vo.Propertiespj;
		import com.adams.dt.model.vo.Projects;
		import mx.controls.Alert;
		import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import com.adams.dt.event.FileDetailsEvent;
		import mx.collections.ArrayCollection;
		import com.adams.dt.model.ModelLocator;
		
		import com.adams.dt.view.components.todolistscreens.Depart;
		import com.adams.dt.view.components.todolistscreens.TimesheetChalkBoard;
		import com.adams.dt.view.components.todolistscreens.TrafficView;
		
		private var tempObj:Object;
		private var _sendBulkMail:Boolean;
		private var removeCollection:ArrayCollection;
		[Bindable]
		private var model:ModelLocator = ModelLocator.getInstance();
		[Bindable]
		private var _labelPlanning:String = 'Planning & History';
		[Bindable]
		public var plannerDp:ArrayCollection;
		[Bindable]
		public var actualDp:ArrayCollection;
		
		[Bindable]
		public var newSchedulerCollection:ArrayCollection;
		
		private var _onUpdatingMPV:Boolean;
		[Bindable]
		public function get onUpdatingMPV():Boolean {
			return _onUpdatingMPV;
		} 
		public function set onUpdatingMPV( value:Boolean ):void {
			_onUpdatingMPV = value;
			updateProject( model.currentProjects, tab.selectedIndex );
			convertPersonToProfile();
		}
		
		public function updateProject( value:Projects, selectId:int ):void {
			if( value ) {
				if( model.currentTasks ) {
					if( model.currentTasks.projectObject.projectId != value.projectId ) { 
						model.currentTasks = null;
						model.workflowState = 0;
					}
				}
				if( model.currentUserProfileCode == "TRA" || model.currentUserProfileCode == "FAB" || model.currentUserProfileCode == "CLT") {
					if( value.projectStatusFK != ProjectStatus.STANDBY && value.projectStatusFK != ProjectStatus.ABORTED && !value.projectDateEnd ) {
						model.editForm = true;
						model.updatePhase = true;
					}
					else {
						model.editForm = false;
						model.updatePhase = false;
					}
				}
				else {
					model.editForm = false;
					model.updatePhase = false;
				}
				if( (model.currentUserProfileCode == "FAB") && (model.editForm) && (model.currentProjects.projectStatusFK != ProjectStatus.STANDBY) ){
					if( traffic_View ) traffic_View.statusGroup.enabled = true;					
				}
				else{
					if( traffic_View ) traffic_View.statusGroup.enabled = false;	
				}
				if( model.person.profile.profileCode != "EPR" )	{
					model.newTaskCreated = false;
				}
				tab.selectedIndex = selectId;
				getBasicFileCollection();
			}
		}
		
		private function getBasicFileCollection():void {
			if( model.person.profile.profileCode != "EPR" )	model.newTaskCreated = false;
			
			var handler:IResponder = new Callbacks( downloadThumnailFiles,fault );
			var fileEvent:FileDetailsEvent = new FileDetailsEvent( FileDetailsEvent.EVENT_GETPROJECT_FILEDETAILS, handler );
			fileEvent.projectId = model.currentProjects.projectId;
			fileEvent.dispatch();
		}
		
		protected function downloadThumnailFiles( rpcEvent:Object ):void {
			var thumbCollection:ArrayCollection = differentiateThumbfiles( rpcEvent.result as ArrayCollection ); 
			if( thumbCollection.length > 0 ) {
				model.bgDownloadFile.idle = true;
				model.bgDownloadFile.isThumbDownload = true;
				model.bgDownloadFile.fileToDownload.list = thumbCollection.list;
			} 
			
			var handler:IResponder = new Callbacks( getTeamline );
			var updatePersonCollectionEvent:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_UPDATE_ALL_PERSONS, handler );
			updatePersonCollectionEvent.dispatch();
		}
		
		protected function differentiateThumbfiles( fileCollection:ArrayCollection ):ArrayCollection {
			var returnCollection:ArrayCollection = new ArrayCollection();
			for each( var item:FileDetails in  fileCollection ) {
				if( ( item.extension == 'pdf' ) && ( item.visible != 0 ) ) {
					var thumbFileName:String = FileNameSplitter.splitFileName( item.storedFileName ).filename + "-1_thumb.swf";
					var fullPath:String = "DTFlex/" + String( FileNameSplitter.getDestinationPath( model.currentProjects, model.parentFolderName ) ).split( model.parentFolderName )[ 1 ] + "/" + item.type + "/" + thumbFileName;
        			var copyToLocation:File = File.userDirectory.resolvePath( fullPath );
        			if( !copyToLocation.exists ) {
						var thumbDetail:FileDetails = new FileDetails();
						var filePath:String = item.filePath.split( item.type )[ 0 ];
						thumbDetail.type = item.type;
						thumbDetail.fileName = thumbFileName;
						thumbDetail.filePath = filePath + item.type + '/' + thumbDetail.fileName;
						returnCollection.addItem( thumbDetail );
        			}
				}
			}
			return returnCollection;
		}
		
		private function getTeamline( rpcEvent:Object ):void {
			var handler:IResponder = new Callbacks( onTeamFetchResult );
			var teamTempEvt:TeamlineEvent = new TeamlineEvent( TeamlineEvent.EVENT_SELECT_TEAMLINE, handler );
	 		teamTempEvt.projectId = model.currentMainProject.projectId;
	 		teamTempEvt.dispatch();
		}
		
		private function onTeamFetchResult( rpcEvent:Object ):void {
			if( model.impPerson.personId != 0 ) {
				var handler:IResponder = new Callbacks( onDefaultTemplateResult );
				var getDefaultTemplateEvt:DefaultTemplateEvent = new DefaultTemplateEvent( DefaultTemplateEvent.GET_DEFAULT_TEMPLATE, handler );
				getDefaultTemplateEvt.companyId = model.impPerson.companyFk;
				getDefaultTemplateEvt.dispatch();
			}
			else {
				model.selectedDefaultTemplate = '';
				getNewPropertiesPjset();
			}
		}
		
		private var selectedDefaultTemplateId:int;
		private function onDefaultTemplateResult( rpcEvent:Object ):void {
			var propertiesPj:Propertiespj = Utils.propertyPjForFieldName( 'propertyTemplateID', model.currentProjects.propertiespjSet );
      		if( propertiesPj && propertiesPj.fieldValue ) {
      			selectedDefaultTemplateId = -1;
      			var handler:IResponder = new Callbacks( onTemplateValuesResult );
      			if( !findDefaultTemplateExist( int( propertiesPj.fieldValue ) ) ) {
      				var updateProperitesPjEvent:PropertiespjEvent = new PropertiespjEvent( PropertiespjEvent.EVENT_DEFAULTVALUE_UPDATE_PROPERTIESPJ, handler );
      				propertiesPj.fieldValue = " ";
    				updateProperitesPjEvent.propertiespj = propertiesPj;
    				updateProperitesPjEvent.dispatch();
      			}
      			else {
					var defaultTempValueEvt:DefaultTemplateValueEvent = new DefaultTemplateValueEvent( DefaultTemplateValueEvent.GET_DEFAULT_TEMPLATE_VALUE, handler );
					defaultTempValueEvt.defaultTemplateValuesID = int( propertiesPj.fieldValue );
					selectedDefaultTemplateId = defaultTempValueEvt.defaultTemplateValuesID; 
					defaultTempValueEvt.dispatch();
      			}
			}
			else {
				model.selectedDefaultTemplate = '';
				getNewPropertiesPjset();
			}
		}
		
		private function findDefaultTemplateExist( id:int ):Boolean {
			for each( var item:DefaultTemplate in model.specificDefaultTemplateCollect ) {
				if( item.defaultTemplateId == id ) {
					return true;
				}
			}
			return false;
		}
		
		private function onTemplateValuesResult( rpcEvent:Object ):void {
			if( selectedDefaultTemplateId != -1 ) {
				for each( var template:DefaultTemplate in model.specificDefaultTemplateCollect ) {
					if( template.defaultTemplateId == selectedDefaultTemplateId ) {
						model.selectedDefaultTemplate = template.defaultTemplateLabel;
					}
				}
				selectedDefaultTemplateId = -1;
			}
			else {
				model.selectedDefaultTemplate = '';
			}
			getNewPropertiesPjset();
		}
		private function getNewPropertiesPjset():void
		{
			var pjHandler:IResponder = new Callbacks( pickupTasks )
			var getPropertiesPjEvt:PropertiespjEvent = new PropertiespjEvent( PropertiespjEvent.EVENT_GET_PROPERTIESPJ_BY_PROJECT ,pjHandler);
			getPropertiesPjEvt.prop_ProjectID = model.currentProjects.projectId;
			getPropertiesPjEvt.dispatch();
		}
		private function pickupTasks( rpcEvent:Object ):void {
			
			var handler:IResponder = new Callbacks( changeMPVINdex );
			var tasksEvent:TasksEvent = new TasksEvent( TasksEvent.EVENT_FETCH_TASKS, handler );
			tasksEvent.dispatch();
		}
		
		private function changeMPVINdex( rpcEvent:ResultEvent ):void {
			updateProperties();
			model.preloaderVisibility = false;
			dispatchEvent( new Event( 'changeMPVIndex' ) );
		} 
		
		/**
		 * get the updated properties 
		 */
		public function getPropertiespjSet():ArrayCollection{			
			var trafficCollection:ArrayCollection =( traffic_View ) ? traffic_View.getPropertiespjSet() : new ArrayCollection();
			//var techCollection:ArrayCollection =( timeSheet ) ? timeSheet.getPropertiespjSet() : new ArrayCollection();
			var notesCollection:ArrayCollection = ( _notesScreen ) ? _notesScreen.getPropertiespjSet() : new ArrayCollection();
			//var departCollection:ArrayCollection = ( departView ) ? departView.getPropertiespjSet() : new ArrayCollection();
			
			//var firstConcat:ArrayCollection = new ArrayCollection( departCollection.source.concat( notesCollection.source ) );
			//var secondConcat:ArrayCollection = new ArrayCollection( notesCollection.source.concat( firstConcat.source ) );
			//var finalConcat:ArrayCollection = new ArrayCollection( techCollection.source.concat( secondConcat.source ) );
			//var finalpropertyPjSet:ArrayCollection = new ArrayCollection( trafficCollection.source.concat( finalConcat.source ) );
			//if(timeSheet ) timeSheet.exportTechPropPjList( timeSheet.getPropertiespjSet() );
			
			var finalpropertyPjSet:ArrayCollection = new ArrayCollection( trafficCollection.source.concat( notesCollection.source ) );
			tempObj = {};
			removeCollection = new ArrayCollection();
			var resultCollection:ArrayCollection = filterCollection( finalpropertyPjSet );	
			
			for each( var propitem:Propertiespj in removeCollection ) {
				resultCollection.removeItemAt( resultCollection.getItemIndex( propitem ) );
			} 
			return resultCollection; 			
		}
		
		/**
		 * Remove duplicated items
		 */
		private function filterCollection( filterBtnCol:ArrayCollection ):ArrayCollection {
			filterBtnCol.filterFunction = deDupe;
			filterBtnCol.refresh();
			return filterBtnCol;
		}
		
		/**
		 * Check the item exist or not
		 */
		private function deDupe( item:Propertiespj ):Boolean {
			var retVal:Boolean = true;
			if( !tempObj.hasOwnProperty( item.propertyPreset.propertyPresetId ) ) {
				tempObj[ item.propertyPreset.propertyPresetId ] = item.propertyPreset.propertyPresetId;
				retVal = true;
			}
			else {
				removeCollection.addItem( item );
			}
			return retVal;
		}
		
		/**
		 * load the screens in tabnavigtor
		 */ 
		private function onTabNavigatorChange( event:Event ):void {
			/* if( TabNavigator( event.currentTarget ).selectedIndex == 4 ) {
				fileViewer.miniReader.visible = false;
				fileViewer.isCompareMode = false;
				fileViewer.miniImageViewer.visible = false;
				fileViewer.miniFileDetailer.visible = false;
				fileViewer.downloadBtn.visible = false;
				var fileEvent:FileDetailsEvent = new FileDetailsEvent( FileDetailsEvent.EVENT_GET_BASICFILEDETAILS );
				fileEvent.dispatch();
			} */
			
			if( TabNavigator( event.currentTarget ).selectedIndex == 3 ) {
				fileViewer.miniReader.visible = false;
				fileViewer.isCompareMode = false;
				fileViewer.miniImageViewer.visible = false;
				fileViewer.miniFileDetailer.visible = false;
				fileViewer.downloadBtn.visible = false;
				var fileEvent:FileDetailsEvent = new FileDetailsEvent( FileDetailsEvent.EVENT_GET_BASICFILEDETAILS );
				fileEvent.dispatch();
			}
		}
		
		public function updateProperties():void {
			if( traffic_View ) traffic_View.updateProperties();
			//if( timeSheet ) timeSheet.updateProperties();
			if( _notesScreen ) _notesScreen.updateProperties();
			//if( departView ) departView.updateProperties();
			setMainDp();
		}
		
		private function setMainDp():void {
			var mainDp:ArrayCollection = new ArrayCollection();
			mainDp.addItem( model.currentProjects );
			plannerDp = model.taskData.createPhases( mainDp, 'Planned' );
			actualDp = model.taskData.createPhases( mainDp, 'Actual' );
			
			var tempCollection:ArrayCollection = new ArrayCollection();
			
			/* var planObject:Object = {};
			planObject.projectName = "Planned";
			planObject.selectable = false;
			planObject.phasesSet = doCaollection( plannerDp );
			tempCollection.addItem( planObject );
			
			var actualObject:Object = {};
			actualObject.projectName = "Actual";
			actualObject.selectable = false;
			actualObject.phasesSet = doCaollection( actualDp );
			tempCollection.addItem( actualObject ); */
			
			var taskObject:Object = {};
			taskObject.projectName = "Tasks";
			taskObject.selectable = false;
			taskObject.phasesSet = doCaollection( model.taskData.taskEntryCollection );
			tempCollection.addItem( taskObject );
			
			tempCollection.refresh();
			newSchedulerCollection = tempCollection;
			
			if( _planningView )	{
				_planningView._palnningDetails.onTabNavSelectId.selectedIndex = 0;
				ViewStack( _planningView._palnningDetails.onTabNavSelectId.selectedChild ).selectedIndex = 0;
			}
		}
		
		private function doCaollection( value:ArrayCollection ):ArrayCollection {
			var returnValue:ArrayCollection = new ArrayCollection();
			for( var i:int = 0; i < value.getItemAt( 0 ).length; i++ ) {
				returnValue.addItem( value.getItemAt( 0 )[ i ] );
			}
			return returnValue;
		}
		
		private function getNotesImage( comment:ByteArray ):Class {
			var returnValue:Class;
			if(comment!=null)
			{
				var str:String = comment.toString();
				
				if( str ) {
					if( str.length != 0 ) {
						var myXML:XML = new XML( "<myXML>"+str+"</myXML>");
						returnValue = traverseThroughXML( myXML );
					}
					else {
						returnValue = ImageResourceEmbedClass.noLabel;
					}
				}
				else {
					returnValue = ImageResourceEmbedClass.noLabel;
				}
			}
			else {
					returnValue = ImageResourceEmbedClass.noLabel;
			}
			return returnValue; 
		}
		
		private function traverseThroughXML( myXML:XML ):Class {
			var returnValue:Class = ImageResourceEmbedClass.noLabel;
			for( var i:int = 0 ; i < myXML.children().length(); i++ ) {
				if( String( myXML.children()[ i ].FONT ).length != 0 ) {
					returnValue = ImageResourceEmbedClass.yesLabel;
					break;
				}
			}
			return returnValue;
		}
				
		private function departureFieldMapping( event:DepartureMapEvent ):void {
			/* if( event.currentTarget is TimesheetChalkBoard ) {
				if( departView ) {
					if( departView.hasOwnProperty( event.changedField ) ) {
						if( event.changedField.split('_')[ 0 ] == 'text' ) {
							departView[ event.changedField ].text = timeSheet[ event.changedField ].text;
						}
						else if( event.changedField.split('_')[ 0 ] == 'popup' ) {
							departView[ event.changedField ].selectedIndex = timeSheet[ event.changedField ].selectedIndex;
						}
						else if( event.changedField.split('_')[ 0 ] == 'checkbox' ) {
							departView[ event.changedField ].selected = timeSheet[ event.changedField ].selected;
						}
					}
				}
			}
			else if( event.currentTarget is Depart ) {
				if( timeSheet ) {
					if( timeSheet.hasOwnProperty( event.changedField ) ) {
						if( event.changedField.split('_')[ 0 ] == 'text' ) {
							timeSheet[ event.changedField ].text = departView[ event.changedField ].text;
						}
						else if( event.changedField.split('_')[ 0 ] == 'popup' ) {
							timeSheet[ event.changedField ].selectedIndex = departView[ event.changedField ].selectedIndex;
						}
						else if( event.changedField.split('_')[ 0 ] == 'checkbox' ) {
							timeSheet[ event.changedField ].selected = departView[ event.changedField ].selected;
						}
					}
				}
			} */
		}
		
		public function onSave():void {
			if( tab.selectedIndex == 3 ) {
				saveNotesScreen();
			}
			else if( tab.selectedIndex == 4 ) {
				onFileSave();
			}
			else {
				onOtherSave();
			}
		}
		
		private function saveNotesScreen():void {
			var oldNote:String =''
			if( model.currentProjects.projectComment ) {
				var myXML:XML = new XML( "<myXML>" + model.currentProjects.projectComment.toString() + "</myXML>" );
				if( traverseThroughXML( myXML ) )	oldNote = traverseThroughXMLStr( myXML );
			} 
			model.currentProjects.projectComment = _notesScreen.getComment();
			var newNote:String = _notesScreen.getCommentTxt();
			
			var createNoteEvent:EventsEvent = new EventsEvent( EventsEvent.EVENT_CREATE_EVENTS );
			var _events:Events = new Events();
			_events.eventDateStart = model.currentTime;
			_events.eventType = EventStatus.PROJECTINPROGRESS; 
			_events.personFk = model.person.personId;
			_events.taskFk = ( model.currentTasks ) ? model.currentTasks.taskId : 0;
			_events.workflowtemplatesFk = ( model.currentTasks ) ? model.currentTasks.wftFK : 0;
			_events.projectFk = model.currentProjects.projectId;
			_events.eventName = "Project Note Updation";
			var str:String = oldNote + ' changed to ' + newNote;
			var by:ByteArray = new ByteArray();
			by.writeUTFBytes( str );
			_events.details = by;		
			createNoteEvent.events = _events;
			
			var handler:IResponder = new Callbacks( commentUpdateResult );
			var updatePjEvent:ProjectsEvent = new ProjectsEvent( ProjectsEvent.EVENT_UPDATE_PROJECTNOTES, handler );
			var noteseq:SequenceGenerator = new SequenceGenerator( [ createNoteEvent, updatePjEvent ] );
			noteseq.dispatch();
			 
		}
		
		private function traverseThroughXMLStr( myXML:XML ):String {
			var returnValue:String ='';
			for( var i:int = 0 ; i < myXML.children().length(); i++ ) {
				if( String( myXML.children()[ i ].FONT ).length != 0 ) {
					returnValue +=  String( myXML.children()[ i ].FONT );
				}
			}
			return returnValue;
		}
		
		private function commentUpdateResult( rpcEvent:Object ):void {
			onOtherSave();
		}
		
		private var propertiesprojectId:String;
		private var propertiespresetId:String;
		private var propertiesfieldvalue:String;
		
		private function onOtherSave():void {
			
  			model.propertiespjCollection = getPropertiespjSet();
  			var pjresult:String = Utils.pjParameters(model.propertiespjCollection);
			var handler:IResponder = new Callbacks( onPropertiesSave ); 
			var bulkupdatepropPjEvent:PropertiespjEvent = new PropertiespjEvent( PropertiespjEvent.EVENT_ORACLE_BULKUPDATE_PROPERTIESPJ );
			bulkupdatepropPjEvent.prop_projectId = String(model.currentProjects.projectId);
			bulkupdatepropPjEvent.prop_presetId = String(pjresult.split("#&#")[1]).slice(0,-1);
			bulkupdatepropPjEvent.prop_prefieldvalue = String(pjresult.split("#&#")[0]).slice(0,-1);
			bulkupdatepropPjEvent.dispatch(); 
  			
		}
		
		private function onPropertiesSave( rpcEvent:Object ):void {
			if( model.workflowState != 0 ) {
				if( model.updateToDo )	model.updateToDo = false;
				else	model.updateToDo = true;
			}
			if( _sendBulkMail ) {
				_sendBulkMail = false;
				var mailEvent:TasksEvent = new TasksEvent( TasksEvent.EVENT_CREATE_BULKEMAILTASKS );
		    	mailEvent.dispatch();
			}
		}
		
		private function onFileSave():void {
			var localFiles:ArrayCollection = new ArrayCollection();
			for each( var item:FileDetails in model.basicFileCollection ) {
				var delegate : LocalFileDetailsDAODelegate = new LocalFileDetailsDAODelegate();			
				var result:SQLResult = delegate.getFileDetails( item );
				var array:Array = result.data as Array;
				if( array ) {
					var obj:FileDetails = array[ 0 ] as FileDetails;
					var downLoadedfile:File = new File( obj.filePath ); 
					if( downLoadedfile.exists ) { 
						onDownLoadComplete( obj );
					}
					else {
						var deleteResult:SQLResult = delegate.deleteFileDetails( item );
						getFilesFromRemote( obj );
					}
				}
				else {
        			model.filesToDownload.addItem( item );
				}
				model.bgDownloadFile.idle = true;
				model.bgDownloadFile.fileToDownload.list = model.filesToDownload.list;
			}
		}
		
		private function getFilesFromRemote( obj:FileDetails ):void {
        	var fileEvent:FileDetailsEvent = new FileDetailsEvent( FileDetailsEvent.EVENT_SELECT_FILEDETAILS );
        	fileEvent.fileDetailsObj = obj;
        	CairngormEventDispatcher.getInstance().dispatchEvent( fileEvent );
        }
        
		private function onDownLoadComplete( fileObj:FileDetails ):void {
        	var downLoadedfile:File = new File( fileObj.filePath ); 
        	var copyToLocation:File = File.desktopDirectory.resolvePath( fileObj.fileName );
        	downLoadedfile.copyTo( copyToLocation, true );    
   		}			
		
		private function onSchedulerComplete():void {
			BindingUtils.bindProperty( _planningView, 'schedulerCollection', this, 'newSchedulerCollection' );
 		}
 		
 		private function onPropertySaveonMail():void {
 			onOtherSave();
 		}
 		
 		private function sendBulkMail():void {
			var conWindow:ConfirmationDemandeValidation = new ConfirmationDemandeValidation();
			conWindow.projectProperty = model.propertiespresetsCollection;				
			conWindow.addEventListener( 'confirmationChecked', checkConfirmation,false,0,true );
			PopUpManager.addPopUp( conWindow, this ,true );
			PopUpManager.centerPopUp( conWindow );
		}
 		
 		private function checkConfirmation( event:Event ):void {
			_sendBulkMail = true;
			onPropertySaveonMail();
		}
		
		private function mailButtonVisible( index:int, editValue:Boolean ):Boolean {
			if( index == 0 ) {
				if( model.clientCode == 'FAB' && editValue ) {
					return true;
				}
			}
			return false;
		}
		
		private function onBulkFilesDownload():void {
			var handler:IResponder = new Callbacks( getProjectAllFile,fault );
			var fileEvent:FileDetailsEvent = new FileDetailsEvent( FileDetailsEvent.EVENT_GETPROJECT_FILEDETAILS, handler );
			fileEvent.projectId = model.currentProjects.projectId;
			fileEvent.dispatch();
		}
		
		private function getProjectAllFile( rpcEvent:Object ):void {
			var arrc:ArrayCollection = rpcEvent.result as ArrayCollection;
			var requiredFiles:ArrayCollection = removeInvisibleAllFile( arrc );
			model.bgDownloadFile.idle = true;
			model.bgDownloadFile.isBulkDownload = true;
			model.bgDownloadFile.fileToDownload.list = requiredFiles.list;
		} 		
		
		private function fault( event:Object ):void {
			
		}
		
		private function removeInvisibleAllFile( arrc:ArrayCollection ):ArrayCollection {
			var returnCollection:ArrayCollection = new ArrayCollection();
			for each( var fo:FileDetails in arrc ) {
				if( fo.visible ) {
					returnCollection.addItem( fo );
				}	
			}
			returnCollection.refresh();
			return returnCollection;
		}
		
		/**
		 	 * Convert the person collection to Profile and Person 
		 	 * to show the details in the teamPerson List ...
		 	 **/
		 	 private function convertPersonToProfile():void
		 	 {
		 	 	for each( var person:Persons in model.personsArrCollection)
		 	 	{
		 	 		var profileObj:Object = new Object();
		 	 		var profile:Profiles =  GetVOUtil.getProfileObject(person.defaultProfile);
		 	 		profileObj.profile = profile;
		 	 		profileObj.person = person;
		 	 		profileObj.personId = person.personId;
		 	 		 if(!findDuplicatePerson(person.personId))
		 	 		{ 
		 	 			model.teamLinePersonColl.addItem(profileObj);
		 	 		} 
		 	 	}
		 	 }
		 	  /**
		 	 * remove the Duplicate Item ,by comparing the Person Collection 
		 	 *  to the Team Profile Holder...
		 	 **/  
			private function findDuplicatePerson(perId:int):Boolean
			{
				var retVal:Boolean
				for (var i:int = 0;i<model.teamlLineCollection.length;i++)
				{
					if(Teamlines(model.teamlLineCollection[i]).personID == perId)
					{
						retVal = true;
						break
					}
				}
				return retVal;
			}
		]]>
	</mx:Script>
	
	<mx:Button id="bulkMailButton"
		click="sendBulkMail()"   
		icon="@Embed(source='assets/swf/General_Assets.swf#mailIcon')" 
		label="Validate" top="2" right="112" 
		visible="{ mailButtonVisible( tab.selectedIndex, model.editForm ) }" 
		includeInLayout="{ bulkMailButton.visible }"
		toolTip="Send Bulk Mail"/>
	
	<mx:Button id="bulkFileDownload" click="onBulkFilesDownload()" label="All" top="2" right="112" visible="{ ( tab.selectedIndex == 4 ) ? true : false }" 
						includeInLayout="{ bulkFileDownload.visible }"	toolTip="Download All Files"/>
			               
	<mx:TabNavigator id="tab"
		change="onTabNavigatorChange( event )"
		width="100%" height="100%" 
		top="5" bottom="5"  
		paddingLeft="5" paddingRight="5" 
		paddingTop="5" paddingBottom="5">
		<mx:Canvas label="General" width="100%" height="100%" >
			<view:TrafficView  id="traffic_View" 
				projectProperty="{ model.propertiespresetsCollection }"
				sendStatusMail="{ ( model.clientCode == 'FAB' ) ? true : false }" 
				propertySaveonMail="onPropertySaveonMail()"/>
		</mx:Canvas>
			
		<mx:Canvas label="{ _labelPlanning }" width="100%" height="100%" >				
			<schedulerView:Scheduler_Planning name="Scheduler" id="_planningView" top="20" creationComplete="onSchedulerComplete()"/>
		</mx:Canvas>
		
		<!--<mx:Canvas label="{ model.loc.getString( 'technicalProperties' ) }" width="100%" height="100%">
			<view:TimesheetChalkBoard id="timeSheet"
				name="TimeSheet" projectProperty="{ model.propertiespresetsCollection }" 
				toRemoveHighlight="{ model.mainProjectState }" 
				currentDefaultTemplateValue="{ model.projectDefaultValue }"
				applyDefaultTemplateValue="{ model.applyProjectDftValue }"
				getUpdated="{ model.getPropertiesUpdated }" 
				mapDeparture="departureFieldMapping( event )"/>
		</mx:Canvas>-->
		
		<mx:Canvas label="{ model.loc.getString( 'notesMessages' ) }"  
			icon="{ getNotesImage( model.currentProjects.projectComment ) }" width="100%" height="100%">
			<comp:NotesScreen id="_notesScreen"
				projectProperty="{ model.propertiespresetsCollection }" />
		</mx:Canvas>
			
		<mx:Canvas label="{ model.loc.getString( 'files' ) }" width="100%" height="100%">
			<comp:FileManagement id="fileViewer" basicFileCollection="{ model.basicFileCollection }"												
						tasksFileCollection="{ model.taskFileCollection }" popUpOpenTask="{ model.PopupOpenStatus }" 	indexChange="{ model.modelMainProjectView }"/>
		</mx:Canvas>
				
		<!--<mx:Canvas label="{ model.loc.getString( 'departures' ) }" width="100%" height="100%">
			<view:Depart id="departView" 
				projectProperty="{model.propertiespresetsCollection}"
				mapDeparture="departureFieldMapping( event )"/>
		</mx:Canvas>
					
		<mx:Canvas label="Team" width="100%" height="100%" initialize="{convertPersonToProfile()}">
			<teamView:ProfileSelection id="teamView"/>
		</mx:Canvas>-->
		
	</mx:TabNavigator>
</mx:Canvas>