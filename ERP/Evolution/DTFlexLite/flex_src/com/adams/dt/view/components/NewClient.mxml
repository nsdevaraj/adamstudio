<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" width="500" height="600"  headerHeight="30" title="New Client"
	xmlns:view="com.adams.dt.view.components.*" styleName="bgContainer" creationComplete="onCreationComplete()" 
	xmlns:serchComp="com.adams.dt.view.components.personSearch.*" showCloseButton="true" close="{PopUpManager.removePopUp(this)}">
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import com.adams.dt.model.vo.Persons;
		 	import mx.controls.Alert;
		]]>
	</mx:Script>
<mx:Script>
	<![CDATA[
		import com.universalmind.cairngorm.events.Callbacks;
		import mx.rpc.events.ResultEvent;
		import com.adobe.cairngorm.control.CairngormEvent;
		import mx.rpc.IResponder;
		import com.adams.dt.event.TeamTemplatesEvent;
		import com.adams.dt.event.catagoryselection.catagoryEvent;
		import flash.utils.setTimeout;
		import com.adams.dt.event.WorkflowsEvent;
		import com.adams.dt.event.ProfilesEvent;
		import com.adams.dt.event.generator.SequenceGenerator;
		import mx.graphics.codec.JPEGEncoder;
		import com.adams.dt.model.vo.GroupPersons;
		import com.adams.dt.event.GroupPersonsEvent;
		import com.adams.dt.event.GroupsEvent;
		import com.adams.dt.model.vo.Groups;
		import mx.controls.Label;
		import com.adams.dt.model.vo.Workflows;
		import com.adams.dt.event.DomainWorkFlowEvent;
		import com.adams.dt.model.vo.DomainWorkflow;

		import com.adams.dt.model.vo.Profiles;
		import com.adams.dt.event.PersonsEvent;
		import com.adams.dt.model.vo.Teamlinestemplates;
		import com.adams.dt.model.vo.TeamTemplates;
		import com.adams.dt.event.TeamlineTemplatesEvent;
		import com.adams.dt.model.vo.Persons;
		import com.adams.dt.event.CategoriesEvent;
		import mx.collections.ArrayCollection;
		import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import com.adams.dt.event.CompaniesEvent;
		import com.adams.dt.model.ModelLocator;
		import com.adams.dt.model.vo.Categories;
		import com.adams.dt.model.vo.Companies;
		import mx.controls.Alert;
		import flash.net.FileFilter;
		import flash.net.FileReference; 
		private var  fileRef:FileReference ;
        private var byteImage:ByteArray
        private var compImage:ByteArray
        private var newFile:File
		
		[Bindable] 
		private var modelLocator:ModelLocator = ModelLocator.getInstance();
    	[Bindable]
		private var model:ModelLocator = ModelLocator.getInstance();
		private var companySelected:Boolean;
		[Bindable]
		private var updatedCompanies:Companies
		[Bindable]
		private var updatedPersons:Persons
		[Bindable]
		private var updatedCatagories:Categories
		[Bindable]
		private var updatedGroups:Groups
		[Bindable]
		private var updatedGroupPersons:GroupPersons;
		[Bindable]
		private var GroupsString:String 
		[Bindable]
		private var selectedGroupsColl:ArrayCollection = new ArrayCollection();
		[Bindable]
		private var closeDetails:Boolean;
		[Bindable]
		private var updatedCompanyColl:ArrayCollection = new ArrayCollection();
		private var fileReference:FileReference;
		private var  personByte:ByteArray = new ByteArray();
		[Bindable]
		private var comboSelectedItem:int
		[Bindable]
		private var comboSelectedValue:String
		[Bindable]
		private var groupLabel:Boolean;
		[Bindable]
		private var selectedNotClient:Boolean =true;
		[Bindable]
		private var teamTemp:TeamTemplates
		
		 private function onCreationComplete():void{
			var workEvt:WorkflowsEvent = new WorkflowsEvent(WorkflowsEvent.EVENT_GET_ALL_WORKFLOWSS);
			var groupPer:GroupsEvent = new GroupsEvent(GroupsEvent.EVENT_GET_ALL_GROUPSS);
			var teamTempEvt:TeamTemplatesEvent = new TeamTemplatesEvent(TeamTemplatesEvent.EVENT_GET_ALL_TEAMTEMPLATESS);
	 		var businesscardSeq:SequenceGenerator = new SequenceGenerator([workEvt,groupPer,
	 																	   teamTempEvt])
	  		businesscardSeq.dispatch();
		 }  
		private function fault(info:Object):void{
			
		}
		private function onDomainWFResult(info:Object):void{
			for each(var domainWorkFlow:DomainWorkflow in model.getAllDomainWorkflows){
				teamTemplate(domainWorkFlow)
			} 
		}
		private function teamTemplate(domainWflow:DomainWorkflow): void {
			model.selecteTeamlineTemplateArr.removeAll();
			for each(var teamTemp1:TeamTemplates in model.getAllTeamTemplatesArr){
				if(domainWflow.workflowFk ==  teamTemp1.workflowFk){
					var teamEvent:TeamlineTemplatesEvent = new TeamlineTemplatesEvent(TeamlineTemplatesEvent.EVENT_CREATE_TEAMLINETEMPLATES)
					var team:Teamlinestemplates = new Teamlinestemplates(); 
					team.teamTemplateFk = teamTemp1.teamTemplateId;
					team.profileFk =  2; 
					model.selecteTeamlineTemplateArr.addItem(team);
				}
			} 
			var bulkUpdateteam:TeamlineTemplatesEvent = new TeamlineTemplatesEvent(TeamlineTemplatesEvent.EVENT_BULK_UPDATE_TEAMLINETEMPLATES);
			for each(var tmltmp:Teamlinestemplates in model.selecteTeamlineTemplateArr){
				tmltmp.personFk =createdPer.personId;
			} 
			bulkUpdateteam.teamlinetemplateArr = model.selecteTeamlineTemplateArr;
			bulkUpdateteam.dispatch()
		}  
		// get the selected groups by the selected company
		private function getAllgroups():Groups {
			var group:Groups;
			// company is selected
			if(companyCombo.selectedIndex == -1){
				companyCombo.selectedIndex = 0 
			} 
			// company and client selected is selected 
			if(Client.selected && companyCombo.selectedIndex != -1){
				var cmpStr:String = "ROLE_CLT_"+String(companyCombo.selectedItem.companyname).toUpperCase().substr(0,5).toString();
				trace(cmpStr+"  get the groups ")
				for(var i:int =0;i<model.CollectAllGroupsColl.length;i++){
						group = Groups(model.CollectAllGroupsColl[i]);
						selectedGroupsColl.addItem( group );
						if(group.groupLabel == cmpStr ){
							updatedGroups = group;
						}
				}
			} else{
				updatedGroups = null;
			}
			return updatedGroups;
		}
		// reset the textbox...
		private function removeAllFn():void{
			personFirst.text = "";
			personLast.text = "";
			personEmail.text = "";
			PersonPassword.text = "";
			PersonLogin.text = "";
			PersonPosition.text="";
			PersonAddress.text="";
			PersonPostalCode.text="";
			PersonCity.text="";
			PersonCountry.text="";
			PersonMobile.text="";
			PersonTele.text="";
			companyCombo.selectedIndex = 0; 
			Client.selected = false
			Imprimeur.selected = false
			Traffic.selected = false
			Fabricant.selected = false
			Operateur.selected = false
			Admin.selected = false
			Company.text = "";
			selectedNotClient = true
			personPhoto.source ="assets/images/pic_icon.png";
			unSelected();
				
		}
		// reset the check box..
		private function unSelected ():void{
			Company.text = "";
			for(var i:int =0;i<myrep.dataProvider.length;i++){
					CheckBox(workflowform.getChildAt(i)).selected = false 
				}
				
		}
		// make the new company as visible to create the new company...
		private function showCompany():void{
			newCompany.visible = true;
			newCompany.includeInLayout = true;
 	    }
 	    // check whether workflow is selected or not ...
		private function closeCompany(): void{
		 if(getStrLen(Company.text).length>0 &&  getStrLen(personFirst.text).length>0 && 
		  getStrLen(personLast.text).length>0 && getStrLen(personEmail.text).length>0 && 
		  getStrLen(PersonLogin.text).length>0 && getStrLen(PersonPassword.text).length>0 && 
		  getStrLen(PersonTele.text).length>0 && getStrLen(PersonMobile.text).length>0 ){
		 	for(var i:int =0;i<myrep.dataProvider.length;i++){
				if(CheckBox(workflowform.getChildAt(i)).selected){ 
						var newDomainFlow:DomainWorkflow = new DomainWorkflow();
						newDomainFlow.workflowFk  =  model.workflowsCollection[i].workflowId;
						updateDomainArr.addItem(newDomainFlow);
				}   			 
			}
			var createCompany:Companies = new Companies();
			createCompany.companycode = String(Company.text).toUpperCase().substr(0,5);
			createCompany.companyname = String(Company.text).toUpperCase();
			createCompany.companyCategory = "CLIENT"
			createCompany.companylogo = new ByteArray();
			
            var updateEvt:CompaniesEvent = new CompaniesEvent( CompaniesEvent.EVENT_CREATE_COMPANIES);
            var handler:IResponder = new Callbacks(createResult,null)
            updateEvt.companies = createCompany
            updateEvt.callbacks = handler;
            updateEvt.dispatch();
            
            
            
		   	if(isCLT.selected){
				companySelected = true;
				companyUpdate();
				Company.text = '';
				unSelected();
			}
		   
		   }else{
		   	 Alert.show("please fill all items" )
		   }
		}
		private function createResult(resultEv:ResultEvent):void{
			PopUpManager.removePopUp(this);
		}
		private function getStrLen(str:String):String{
			return str.split(" ").join("")
		}
	
		
		// close the new company details ..
		private function closeButton(): void{
			newCompany.visible = false;
			newCompany.includeInLayout = false;
			unSelected();
		} 
		
		private function getUpdatedGroups(str:String):void {
			var group:Groups
			for(var i:int =0;i<model.CollectAllGroupsColl.length;i++){
				group = Groups(model.CollectAllGroupsColl[i])
				if(group.groupLabel == str){
					updatedGroups = group;
					break;
				}
			}
		}
		private function companyByCombo() :void {
			var gp:Groups;
			var cmp:CompaniesEvent = new CompaniesEvent(CompaniesEvent.EVENT_GET_ALL_COMPANIESS)
			CairngormEventDispatcher.getInstance().dispatchEvent(cmp); 
            gp = getAllgroups( ) 
			groupLabel = false;
			var groupPer:GroupsEvent = new GroupsEvent(GroupsEvent.EVENT_GET_ALL_GROUPSS);
			dispatchEvent(groupPer);
			
		}
		private var updateDomainArr:ArrayCollection = new ArrayCollection();
		private function companyUpdate() :void {
			var comp:Companies;
			// new company
			if(companySelected){
				model.createCompanyEvents = [];
				if(isCLT.selected){
					// new catagory
					var newCategories:Categories = new Categories();
					newCategories.categoryName =  String(Company.text).toUpperCase();
					newCategories.categoryCode =String(Company.text).substr(0,5).toUpperCase();
					var createNewCategory:CategoriesEvent = new CategoriesEvent(CategoriesEvent.EVENT_CREATE_DOMAIN);
					createNewCategory.categories = newCategories;
					model.createCompanyEvents.push(createNewCategory);
					
					// New Groups
					var updateNewGroups:GroupsEvent = new GroupsEvent(GroupsEvent.EVENT_CREATE_GROUPS);
            		var handler:IResponder = new Callbacks(createGroupResult,null)				
					var newGroups :Groups = new Groups();
					newGroups.groupLabel = "ROLE_CLT_"+String(Company.text).toUpperCase().substr(0,5) ;
					GroupsString = "ROLE_CLT_"+String(Company.text).toUpperCase().substr(0,5) ;
					newGroups.authLevel="ROLE_CLT";
					updateNewGroups.groups = newGroups;
					updateNewGroups.callbacks = handler;
            		updateNewGroups.dispatch();
				}
				// Squence E  
				model.selectedDomainWorkflows = updateDomainArr;
				var cataEvent:CategoriesEvent = new CategoriesEvent(CategoriesEvent.EVENT_GET_ALL_CATEGORIESS)
			    model.createCompanyEvents.push(cataEvent);
				var cmpseq:CompaniesEvent = new CompaniesEvent(CompaniesEvent.EVENT_CREATE_COMPANIES_SEQ);
				CairngormEventDispatcher.getInstance().dispatchEvent(cmpseq);
				 
			}
			var cmp:CompaniesEvent = new CompaniesEvent(CompaniesEvent.EVENT_GET_ALL_COMPANIESS)
			CairngormEventDispatcher.getInstance().dispatchEvent(cmp);
		} 
		private var createdGroups:Groups
		private function createGroupResult(resultEv:ResultEvent):void{
			createdGroups =  Groups( resultEv.message.body ) ;
			saveNewActor()
		}
		private var objValue:Array = ["0","ROLE_TRA_AV","ROLE_FAB_AV","ROLE_OPE_AV","ROLE_ADMIN","ROLE_IMP_AV"];
		private function onPersonResult(rpcEvent:Object):void{
			 createdPer=model.createdPerson;
			 model.personsArrCollection.addItem(createdPer);
		}
		private var createdPer:Persons
		private function saveNewActor(evt:Event = null):void{
			Client.selected = true;
			var profileSelected:Boolean =Traffic.selected  || Fabricant.selected|| Operateur.selected ||Admin.selected || Client.selected ||Imprimeur.selected;
			if(profileSelected){
				companyByCombo();  
				var per:Persons ; 
				var callbacks : IResponder = new mx.rpc.Responder(onPersonResult, fault);
				var Perevent:PersonsEvent = new PersonsEvent(PersonsEvent.EVENT_CREATE_PERSONS,callbacks);
				per = new Persons();
				per.personFirstname = personFirst.text;
				per.personLastname= personLast.text;
				per.personEmail = personEmail.text; 
				per.personLogin = PersonLogin.text;
				per.personPassword =  PersonPassword.text;
				per.personPosition = PersonPosition.text;
				per.personAddress = PersonAddress.text;
				per.personCity = PersonCity.text;
				per.personCountry = PersonCountry.text;
				per.personPostalCode = PersonPostalCode.text;
				
				per.personDateentry = model.currentTime;
				per.personMobile = PersonMobile.text;
				per.personPhone = PersonTele.text;
				per.activated = 1;
				per.companyFk = model.clientCompanies.companyid;
				if(compImage == null){
					var image:Bitmap = Bitmap(personPhoto.content);
					var encoder:JPEGEncoder = new JPEGEncoder();
					compImage = encoder.encode(image.bitmapData);
				}
				per.personPict = compImage
				
				updatedPersons = per; 		   
			    
			    
			    var selectedArr:ArrayCollection = new ArrayCollection();
			  	model.selecteTeamlineTemplateArr= new ArrayCollection();
			    model.selectedGroupArr = new ArrayCollection();
			    getUpdatedGroups(GroupsString);
				var obj:Array = [];
				obj[0] = [0]
				obj[1] = [Traffic.selected && Traffic.enabled]
				obj[2] = [Fabricant.selected && Fabricant.enabled]
				obj[3] = [Operateur.selected && Operateur.enabled]
				obj[4] = [Admin.selected && Admin.enabled]
				obj[5] = [Imprimeur.selected && Imprimeur.enabled]
				var objNames:Array = ["Client","Traffic","Fabricant","Operateur","Admin","Imprimeur"];
				selectedArr.addItem(obj);
				var profiles:Profiles 
			    var newper:Persons = new Persons();
			    var groupPersonClient:Boolean
				for(var i:int =0;i<obj.length;i++){
					if(obj[i]== 1 || obj[i]=="true"){
						profiles = getProfile(objNames[i])
						var teamLine:Teamlinestemplates = new Teamlinestemplates();
						teamLine.teamTemplateFk = 1;
						teamLine.profileFk =  profiles.profileId
						model.selecteTeamlineTemplateArr.addItem(teamLine);
						var gPerson:GroupPersons = new GroupPersons();
						gPerson.groupFk = getGroupsFk(objValue[i]).groupId;
						model.selectedGroupArr.addItem(gPerson); 
					}
				}
				profiles ? per.defaultProfile = profiles.profileId : per.defaultProfile = 2;
				Perevent.persons = per;
				Perevent.dispatch();
				if(Client.selected)
				{ 
						model.selectedGroupArr.removeAll();
						if(groupLabel){
							var gEvent:GroupPersonsEvent = new GroupPersonsEvent(GroupPersonsEvent.EVENT_CREATE_GROUPPERSONS);
							var comboPerson:GroupPersons = new GroupPersons();
							comboPerson.groupFk =updatedGroups.groupId;
							model.selectedGroupArr.addItem(comboPerson);
						}
						else{
							var cmp:Companies = Companies(model.totalCompaniesColl.getItemAt(model.totalCompaniesColl.length-1));
							var cmpStr:String = "ROLE_CLT_"+model.clientCompanies.companycode;
							var found:Boolean
							found =true;
							if(found ){
								var gEvent:GroupPersonsEvent = new GroupPersonsEvent(GroupPersonsEvent.EVENT_CREATE_GROUPPERSONS);
								var comboPerson:GroupPersons = new GroupPersons();
								comboPerson.groupFk = createdGroups.groupId;
								model.selectedGroupArr.addItem(comboPerson);
							}else{
								Alert.show(model.loc.getString('groupNotAvailable'));
							}
						}
						
				}
				Alert.show(model.loc.getString('aNewActor ')+" "+ personFirst.text.toString() +" "+model.loc.getString('createdSuccessfully ') );
				removeAllFn();
				
			}
			else{
				Alert.show(model.loc.getString('selectOneProfile'));
			} 
			
			
		}
		private function getGroupsFk(str:String):Groups{
			var groupsFK:Groups = new Groups();
			for(var j:int =0;j<model.CollectAllGroupsColl.length;j++){
						groupsFK = Groups(model.CollectAllGroupsColl.getItemAt(j))
						if(groupsFK.groupLabel == str){
							return groupsFK;
						}
					}
					return groupsFK;
		}
		private function getProfile(str:String):Profiles {
			var profile:Profiles;
			for(var j:int =0;j<model.teamProfileCollection.length;j++){
						profile = Profiles(model.teamProfileCollection.getItemAt(j))
						if(str.toLocaleUpperCase() == profile.profileLabel){
							break;
						}
					}
					return profile;
		}
		
		
		private function clickHandler(event: Event) :void {
			var imageTypes:FileFilter = new FileFilter("Images (*.jpg, *.jpeg, *.gif, *.png)", "*.jpg; *.jpeg; *.gif; *.png");
			var allTypes:Array = new Array(imageTypes);
			fileRef = new FileReference();
			newFile = new File();
			newFile.addEventListener(Event.SELECT, selectHandler1,false,0,true);
			newFile.browse(allTypes);
		}
		private function selectHandler1(event: Event) :void {
			newFile = new File();
			newFile = event.target as File;
			personPhoto.source  = newFile.nativePath.toString();
			var loader:Loader = new Loader();
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE, handleCompanyPicture,false,0,true);
			loader.load(new URLRequest(event.target.url));
		}
		private function handleCompanyPicture(event:Event):void {
			compImage = new ByteArray();
			var loader:Loader = Loader(event.target.loader);
			var image:Bitmap = Bitmap(loader.content);
			
			var encoder:JPEGEncoder = new JPEGEncoder();
			compImage = encoder.encode(image.bitmapData);
		}
		private function visibilityBtn(event:MouseEvent) :void {
			var visibilityArr:ArrayCollection = new ArrayCollection();
			for(var i:int =0;i<myrep.dataProvider.length;i++){
				if(CheckBox(workflowform.getChildAt(i)).selected){ 
						visibilityArr.addItem(CheckBox(workflowform.getChildAt(i)).selected);
				}  			 
			}
			if(visibilityArr.length >0){
				saveBtn.enabled = true
			}else{
				saveBtn.enabled = false;
			}
		}
]]>
</mx:Script>

	
<mx:Canvas width="100%" height="100%" styleName="darkBorder" >
		<mx:Image id="personPhoto" right="25" top="25"  width="50" height="50" maintainAspectRatio="false" 
			source="assets/images/pic_icon.png" click="clickHandler(event)" />
		<mx:Button id="addPhotosBtn"  right="22" top="22" styleName="plusBTN"  click="clickHandler(event)" />	
		
		<mx:Form >
			<mx:FormItem label="Client Name"  id="domainName" required="true">
				<mx:TextInput id="Company" maxChars="40" />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('firstName')}" required="true">
				<mx:TextInput id="personFirst" maxChars="30" restrict="A-Z,a-z"/>
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('lastName')}" required="true">
				<mx:TextInput id="personLast"  maxChars="30" restrict="A-Z,a-z"/>
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('emailAddress')}" required="true">
				<mx:TextInput  id="personEmail" maxChars="30" />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personLogin')}" required="true">
				<mx:TextInput  id="PersonLogin" maxChars="20" />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personPassword')}" required="true">
				<mx:TextInput  id="PersonPassword" maxChars="20" displayAsPassword="true" />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personMobile')}" required="true">
				<mx:TextInput id="PersonMobile" maxChars="20" restrict="0-9"/>
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personTele')}" required="true">
				<mx:TextInput id="PersonTele" maxChars="20" restrict="0-9"/>
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personPosition')}">
				<mx:TextInput id="PersonPosition" maxChars="20" restrict="A-Z,a-z"/>
			</mx:FormItem>
		   <mx:FormItem label="{model.loc.getString('personAddress')}">
				 <mx:TextInput id="PersonAddress" maxChars="30" />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personPostalCode')}">
				<mx:TextInput id="PersonPostalCode" maxChars="20" />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personCity')}">
				<mx:TextInput id="PersonCity" maxChars="20" restrict="A-Z,a-z"/>
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('personCountry')}">
				<mx:TextInput id="PersonCountry" maxChars="20" restrict="A-Z,a-z"/>
			</mx:FormItem> 
			<mx:FormItem label="Client" visible="false" includeInLayout="false">
				<mx:CheckBox id="isCLT" selected="true" enabled="false"/>
			</mx:FormItem>
			<mx:FormItem id="workflowform" visible="{isCLT.selected}" includeInLayout="{isCLT.selected}" label="{model.loc.getString('workflowSelection')}">
			    <mx:Repeater id="myrep" dataProvider="{model.workflowsCollection}" >
					<mx:CheckBox id="workFLowCheck" label="{Workflows(myrep.currentItem).workflowLabel}"  click="visibilityBtn(event)"/>
				</mx:Repeater>
			</mx:FormItem>
			<mx:FormItem>
				<mx:Button label="{model.loc.getString('save')}" click="closeCompany()" id="saveBtn" enabled="false"  />
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('companyName')}" visible="false" includeInLayout="false">
				<mx:HBox>
					<mx:ComboBox id="companyCombo" dataProvider="{model.totalCompaniesColl}"  labelField="companyname" />
					<mx:Button id="compBtn"   styleName="plusBTN"  click="showCompany()" />	
				</mx:HBox>
			</mx:FormItem>
			<mx:FormItem label="{model.loc.getString('profile')}" visible="false" includeInLayout="false">
			<mx:HBox visible="false" includeInLayout="false">
			<!--change="{selectedNotClient=!selectedNotClient}"-->
				<mx:CheckBox label="Client"  id="Client"  selected="true" />
				<mx:CheckBox  label="Traffic" id="Traffic" enabled="{selectedNotClient}" />
				<mx:CheckBox  label="Fabricant" id="Fabricant" enabled="{selectedNotClient}" />
				</mx:HBox><mx:HBox visible="false" includeInLayout="false">
				<mx:CheckBox  label="Operateur" id="Operateur" enabled="{selectedNotClient}" />
				<mx:CheckBox  label="Imprimeur" id="Imprimeur" enabled="{selectedNotClient}" />
				<mx:CheckBox  label="Administrator" id="Admin" enabled="{selectedNotClient}" />
			</mx:HBox>
				
			</mx:FormItem>
		</mx:Form>
	</mx:Canvas>
	<mx:Canvas id="newCompany" styleName="bgBorderContainer" verticalCenter="0" horizontalCenter="0" 
	 includeInLayout="false" visible="false" dropShadowEnabled="true" >
	
		<mx:Box width="20" height="20" top="3" right="3" buttonMode="true"
			click="closeButton()" backgroundColor="black" horizontalAlign="center" verticalAlign="middle" >
			<mx:Button id="closeBtn" styleName="closeButton" />
		</mx:Box>
	</mx:Canvas>
	
</mx:TitleWindow>
