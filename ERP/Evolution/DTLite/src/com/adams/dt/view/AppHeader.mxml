<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"   
	backgroundAlpha="0"
	verticalScrollPolicy="off"
	horizontalScrollPolicy="off"
	 creationComplete="trayIconLoad()"
	 initialize="init()">
	<mx:Script>
		<![CDATA[
		import mx.controls.VRule;
		import mx.controls.Label;
		import mx.core.Window;
		import com.adams.dt.model.managers.SharedObjectManager;
		import com.adams.dt.event.PersonsEvent;
		import com.adams.dt.model.vo.Events;
		import com.adams.dt.event.EventsEvent;
		import com.adams.dt.model.vo.EventStatus;
		
		import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import com.adams.dt.event.loginevent.LogOutEvent;
		import com.adams.dt.model.ModelLocator;
		import mx.core.Application;
		import mx.core.IFlexDisplayObject;
		import mx.managers.PopUpManager;
		import mx.core.UIComponent;
		import flash.display.Screen;
		import flash.events.Event;
		import mx.controls.Alert;
		import mx.effects.easing.*;
		import mx.events.CloseEvent;
		import com.adams.dt.view.mainView.LoginPanel;
		import flash.utils.*;
		import mx.managers.WindowedSystemManager;
		
		import mx.binding.utils.*;
		private var watcher:ChangeWatcher;
 		private var openTarget:Object;
		[Bindable]
		public var appHeight:int;
		[Bindable]
		public var appWidth:int;
		[Bindable]
		public var pdfWidth:int=0;
		[Bindable]
		public var pdfHeight:int=0;
		[Bindable]
		public var pdfRWidth:int=0;
		[Bindable]
		public var pdfRHeight:int=0;
		public var dockImage:BitmapData; 
		
		[Bindable] 
		private var Container:Canvas = new Canvas(); 
		[Bindable] 
		private var userProfile:String;
		private var oldButton:Object;
		private const BTNWIDTH:int = 47;
		private var helpWindow:IFlexDisplayObject;
		[Bindable]
		private var model:ModelLocator = ModelLocator.getInstance();
		private var rightMenu:Canvas;
		[Bindable]
		private var trayURL:String = "assets/images/ASItray.png";
		public function trayIconLoad():void {
			var descriptor:XML = NativeApplication.nativeApplication.applicationDescriptor;
 			var ns:Namespace = descriptor.namespaceDeclarations()[0];
			var AppName:String = descriptor.ns::name;
			var AppDomain:String = descriptor.ns::description;
			model.appName = AppName;
			model.appDomain= AppDomain;
			var loader:Loader=new Loader();
			loader.contentLoaderInfo.addEventListener(Event.COMPLETE,prepareForSystray, false, 0,true);
			loader.load(new URLRequest(trayURL));
		}
			public function prepareForSystray(event:Event):void {
				//Retrieve the image being used as the systray icon 
				dockImage=event.target.content.bitmapData;
				//For windows systems we can set the systray props       //(there's also an implementation for mac's, it's similar and you can find it on the net... ;) ) 
				if (NativeApplication.supportsSystemTrayIcon) {
					setSystemTrayProperties();
					//Set some systray menu options, so that the user can right-click and access functionality          //without needing to open the application          
					SystemTrayIcon(NativeApplication.nativeApplication.icon).menu = createSystrayRootMenu(); 
				}
			}
			public function createSystrayRootMenu():NativeMenu {
				//Add the menuitems with the corresponding actions 
				var menu:NativeMenu=new NativeMenu  ;
				var openNativeMenuItem:NativeMenuItem=new NativeMenuItem("Open");
				var logoutNativeMenuItem:NativeMenuItem=new NativeMenuItem("Logout");
				
				var exitNativeMenuItem:NativeMenuItem=new NativeMenuItem("Exit");
				//What should happen when the user clicks on something...       
				openNativeMenuItem.addEventListener(Event.SELECT,undock, false, 0,true);
				exitNativeMenuItem.addEventListener(Event.SELECT,closingApplication, false, 0,true);
				//Add the menuitems to the menu 
				menu.addItem(openNativeMenuItem);
				menu.addItem(new NativeMenuItem("",true));
				//separator 
				menu.addItem(logoutNativeMenuItem); 				
				menu.addItem(exitNativeMenuItem);
				return menu;
			}
			public function setSystemTrayProperties():void {
				//Text to show when hovering of the docked application icon       
				SystemTrayIcon(NativeApplication.nativeApplication.icon).tooltip=model.appName;
				//We want to be able to open the application after it has been docked       
				SystemTrayIcon(NativeApplication.nativeApplication.icon).addEventListener(MouseEvent.CLICK,undock, false, 0,true);
				//Listen to the display state changing of the window, so that we can catch the minimize       
				//stage.nativeWindow.addEventListener(NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING,nwMinimized);//Catch the minimize event 
			}
			
			private function closeApp():void {
				var SoM:SharedObjectManager = SharedObjectManager.instance;
				SoM.data.filesToBeUpload = model.bgUploadFile.fileToUpload
				SoM.data.filesToBeDownload = model.bgDownloadFile.fileToDownload;
				SoM.data.fileDetailsArrays = model.fileDetailsArray;
				closeChatWindows(); 
				stage.nativeWindow.close();
			}
			
			private function closeChatWindows():void{
				var arrayOfOpenWindows:Array = NativeApplication.nativeApplication.openedWindows
				for(var i:int=0;i<arrayOfOpenWindows.length;i++){
					NativeWindow(arrayOfOpenWindows[i]).close();
				}
			}
			public function dock():void {
				if(Capabilities.os.search("Mac") >= 0){
					stage.nativeWindow.minimize();
				}else{
					//Hide the applcation 
					stage.nativeWindow.visible=false;
					//Setting the bitmaps array will show the application icon in the systray 
					NativeApplication.nativeApplication.icon.bitmaps = [dockImage];
				} 
			} 
			public function undock(evt:Event):void {
				//After setting the window to visible, make sure that the application is ordered to the front,       //else we'll still need to click on the application on the taskbar to make it visible 
				stage.nativeWindow.visible=true;
				stage.nativeWindow.orderToFront();
				//Clearing the bitmaps array also clears the applcation icon from the systray 
				NativeApplication.nativeApplication.icon.bitmaps = []; 
			}
			public function closingApplication(evt:Event):void {
				//Don't close, so prevent the event from happening  
				if( !model.logOutApplication ) {
				stage.nativeWindow.visible = true;		
				stage.nativeWindow.orderToFront();
				evt.preventDefault(); 
				Alert.okLabel = "Exit";
				Alert.yesLabel = "Logout";
				Alert.buttonWidth = 80;
				Alert.noLabel = model.loc.getString('cancel');
				Alert.show(model.loc.getString('loginClose'),model.appName ,Alert.OK|Alert.YES|Alert.NO,model.mainClass,alertCloseHandler); 
				} 
			} 
			
			private function alertCloseHandler( event:CloseEvent ):void {
				if( event.detail == Alert.OK ) {
					closeApp();
				}
				else if( event.detail == Alert.YES ) {
					logOutDT();
					closeChatWindows(); 
				}
			}
			
			public function logOutDT():void{		        
		        var eEvent:EventsEvent = new EventsEvent(EventsEvent.EVENT_CREATE_EVENTS);
				var _events:Events = new Events();
				_events.eventDateStart = model.currentTime;
				_events.eventType = EventStatus.CHATOFFLINE;
				_events.personFk = model.ChatPerson.personId;				
				//_events.details = "Chat Offline";
				var by:ByteArray = new ByteArray();
				var str:String = "Chat Offline";
				by.writeUTFBytes(str);
				_events.details = by;
				_events.eventName = 'Chat';				
				eEvent.events = _events;
				CairngormEventDispatcher.getInstance().dispatchEvent( eEvent );	
				
				 /* var eventlogoutproducer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_PUSH_STATUSONLINE);
				eventlogoutproducer.OnlineOffline = "Offline";
				CairngormEventDispatcher.getInstance().dispatchEvent( eventlogoutproducer ); */ 
				
				var eventlogoutproducer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_PERSON_LOGOUT);
				eventlogoutproducer.OnlineOffline = "Offline";
				CairngormEventDispatcher.getInstance().dispatchEvent( eventlogoutproducer );  
				
				var eventadminproducer:PersonsEvent = new PersonsEvent( PersonsEvent.EVENT_PRODU_ADMIN);				
				eventadminproducer.adminmonitorscreen = "Logout";
				CairngormEventDispatcher.getInstance().dispatchEvent( eventadminproducer );	
				
				var event :LogOutEvent = new LogOutEvent(LogOutEvent.EVENT_LOGOUT);
		        CairngormEventDispatcher.getInstance().dispatchEvent( event ); 
		        
			}
			private function init():void{
				if(model.CF==2){
					menuBar.percentWidth =100;
					menuBar.height = 100;
					trayURL = "assets/images/tray.png";
				}
				if(model.CF==3){
					menuBar.percentWidth =100;
					menuBar.height = 100;
					logo.visible = true;
					trayURL = "assets/images/DFtray.png";	
				}
				if(model.CF==4){
					
					minimizeBtn.setStyle("verticalCenter",3)
					closeBtn.setStyle("verticalCenter",0)
					
					menuBar.percentWidth =100;
					menuBar.height = 38;
					logo.visible = true;
					trayURL = "assets/images/ASItray.png";	
					
					var label:Label = new Label();
					label.text = "DT-Flex";
					label.styleName = "menuText";
					label.x = 32 + 6
					label.setStyle("fontSize",18)
					label.setStyle("color",0xdcdcdc)
					
					label.setStyle("verticalCenter",0)
					menuBar.addChild(label);
			 
				}
				if(model.CF==5){
					
					minimizeBtn.setStyle("verticalCenter",3)
					closeBtn.setStyle("verticalCenter",0)
					
					menuBar.percentWidth =100;
					menuBar.height = 38;
					logo.visible = true;
					//DIADEM
					trayURL = "assets/images/diademTray.png";	
					//CASINO
					//trayURL = "assets/images/casinoTray.png";	
					
					var label:Label = new Label();
					label.text = "DT-Flex";
					label.styleName = "menuText";
					label.x = 32 + 6
					label.setStyle("fontSize",18)
					label.setStyle("color",0xdcdcdc)
					
					label.setStyle("verticalCenter",0)
					menuBar.addChild(label);
			 
				}
				if(model.CF==6){
					
				}
				
			}
	]]>
	</mx:Script>
	<mx:Move id="moveIn"/>
	<mx:Move id="moveOut"/>
	<mx:WipeRight id="WR"
		duration="100"/>
	<mx:WipeLeft id="WL"
		duration="100"/>
	 
	<!-- Menu Bar-->
	<mx:Canvas id="menuBar"  top="0" verticalScrollPolicy="off"
		horizontalScrollPolicy="off" right="0">
		
		<mx:Button id="logo" styleName="AppCompanyLogo"	/>
		<mx:Button id="minimizeBtn" click="dock()" buttonMode="true" styleName="AppMinimizeButton"/>
		<mx:Button id="closeBtn" styleName="AppCloseButton" buttonMode="true" click="closingApplication(event)" />
				
	</mx:Canvas>
	<!-- Buttons-->
</mx:Canvas>