<?xml version="1.0" encoding="utf-8"?>
<TodoList xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:view="com.adams.dt.view.components.*"
	width="98%"
	creationComplete="hideShowDragStage()"
	xmlns="com.adams.dt.view.components.todolistscreens.*">
	<mx:Script> 
	<![CDATA[
		import com.adams.dt.model.vo.Persons;
		import com.adams.dt.view.components.NewPersonTemplate;
		import com.adams.dt.event.PersonsEvent;
		import com.adams.dt.event.TeamlineEvent;
		import com.adams.dt.event.PresetTemplateEvent;
		import com.adams.dt.model.vo.FileCategory;
		import mx.collections.IViewCursor;
		import com.adams.dt.event.generator.SequenceGenerator;
		import com.adams.dt.business.util.GetVOUtil;
		import mx.events.CollectionEvent;
		import com.adams.dt.model.vo.Proppresetstemplates;
		import com.adams.dt.model.vo.Presetstemplates;
		import com.adams.dt.model.vo.Impremiur;
		import mx.collections.SortField;
		import mx.collections.Sort;
		import mx.rpc.IResponder;
		import com.universalmind.cairngorm.events.Callbacks;
		import com.adams.dt.model.vo.DomainWorkflow;
		import com.adams.dt.event.DomainWorkFlowEvent;
		import com.adams.dt.model.vo.Profiles;
		import com.adams.dt.event.PropertiespresetsEvent;
		import com.adams.dt.business.util.Utils;
		
		import mx.effects.Fade;
		import com.adams.dt.event.LocalDataBaseEvent;
		import com.adams.dt.event.FileDetailsEvent;
		import mx.events.FileEvent;
		import com.adams.dt.model.vo.Events;
		import com.adams.dt.event.EventsEvent;
		import com.adams.dt.model.vo.EventStatus;
		import com.adams.dt.event.catagoryselection.catagoryEvent;
		import com.adams.dt.event.CategoriesEvent;
		import com.adams.dt.model.vo.Categories;
		import com.adams.dt.model.vo.Status;
		import com.adams.dt.model.vo.FileDetails;
		import com.adams.dt.event.PropertiespjEvent;
		import com.adams.dt.model.vo.Propertiespresets;
		import com.adams.dt.model.vo.Propertiespj;
		import mx.collections.ArrayCollection;
		import com.adobe.cairngorm.control.CairngormEventDispatcher;
		import com.adams.dt.event.ProjectsEvent;
		import com.adams.dt.model.vo.ProjectStatus;
		import com.adams.dt.model.vo.Workflowstemplates;
		import com.adams.dt.model.vo.Workflows;
		import com.adams.dt.model.vo.Projects;
		import com.adams.dt.model.ModelLocator;
		import com.adams.dt.view.components.chatscreen.asfile.MessageWindow;
		import mx.states.SetStyle;
		import mx.events.DragEvent;
		import mx.states.AddChild;
		import mx.containers.Panel;
		import mx.controls.Text;
		import mx.core.Application;
		import mx.core.UIComponent;
		import mx.core.IFlexDisplayObject;
		import mx.containers.TitleWindow;
		import mx.managers.PopUpManager;
		import flash.utils.setTimeout;
		import mx.controls.Alert;
		import mx.events.CloseEvent;
		import mx.effects.easing.*;
		
		private var alert:Alert;
		
		[Bindable]
		public var headerVisible:Boolean=true;
		[Bindable]
		public var mainClass:DTFlex;
		
		private var AlertWindow:MessageWindow;
		
		/**
		 *  new order cancel confirmation alert
		 */
		private function showAlert( evt:Event ):void {
			Alert.buttonWidth = 80;
			Alert.yesLabel = model.loc.getString( "yes" );
			Alert.noLabel = model.loc.getString( "no" );
			Alert.show( model.loc.getString( "newOrderCancel" ), "Accord-Valmy", Alert.YES|Alert.NO, this, alertCloseHandler ); 
		}
		/**
		 * on cancel resert the form
		 */
		private function alertCloseHandler( event:CloseEvent ):void {
			if ( event.detail == Alert.YES ) {
				resetForm();
			}
			else {
			} 
		}
		 
		/**
		 * new order submit alert
		 * create the new project
		 */
		private function showMesg():void {
			//In order To make the ToDo and Dashboard Screens To List State
			if( model.workflowState != 0 )	model.workflowState = 0;
			if( model.mainProjectState != 0 )	model.mainProjectState = 0;
			
			if( domain.selectedItem ) {
				model.domain = Categories( domain.selectedItem );
			}
			
			model.newOrderCLTFAB = true;
			
			var txt:Text= new Text();
			txt.text = model.loc.getString( "newOrderSubmit" );
			txt.width = 200;
			txt.styleName = "messageAlertText";
			 if( model.referenceProject ) {
				copyFromRefProject();
			}
			else {
				updateProjectTable();
			}
			model.preloaderVisibility = true;
			setTimeout( closeMesg, 5000 );
		}
		/**
		 * Close the alert
		 */
		private function closeMesg():void{
			model.workflowState = 0;
			model.mainClass.navigateModule( "TodoList" ).dispatchEvent( new MouseEvent( MouseEvent.CLICK ) );
			if( model.preloaderVisibility )	model.preloaderVisibility = false;
			resetForm();
			if( model.referenceProject )	model.referenceProject = null;
			if( model.referenceTeamline )	model.referenceTeamline = null;
			if( model.currentImpremiuerID != 0 )	model.currentImpremiuerID = 0;
		}
		
		private function hideShowDragStage():void{
        	updateProperties();
        	modifyDPWorkflow();
        	if( internet.selected ) {
        		fileList.includeInLayout = true;
	        	fileList.visible = true;
        	}
        	else {
        		fileList.includeInLayout = false;
        		fileList.visible = false;
        	}
        	resetFileForm();
        }
         
        public static var month:Array =  ["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","sep","Oct","Nov","Dec"];
        
        private function copyFromRefProject():void {		
        	model.refFilesDetails = new ArrayCollection();
			var projects:Projects = new Projects();			
			projects.projectDateStart = model.currentTime;
			projects.workflowFK = model.referenceProject.workflowFK;
			var workflowTemplate:Workflowstemplates = Utils.getWorkflowTemplates( model.modelAnnulationWorkflowTemplate, projects.workflowFK );
			model.workflowstemplates = workflowTemplate; 
			projects.propertiespjSet = getPropertySet( model.referenceProject.propertiespjSet );
			projects.projectStatusFK = ProjectStatus.WAITING;
			projects.projectName = projectLabel.text;
			projects.projectQuantity = 1;
			projects.presetTemplateFK = model.presetTempCollection.getItemAt( 0 ) as Presetstemplates;
			if( model.currentUserProfileCode == 'CLT' )	model.clientTeamlineId = model.person.personId;
			else	model.clientTeamlineId = getClientPerson( domain.selectedItem as Categories );
			projects.projectDateStart = model.currentTime;
			var ba:ByteArray = new ByteArray();
			var referenceString:String = 'Reference Project: '+ model.referenceProject.projectName + '(' + String( model.referenceProject.projectDateStart ) + ')';
			ba.writeUTFBytes( referenceString + comment.htmlText );
			projects.projectComment = ba;
			 
			var refFileEvent:FileDetailsEvent = new FileDetailsEvent( FileDetailsEvent.EVENT_GET_FILEDETAILS );
			var event:CategoriesEvent = new CategoriesEvent( CategoriesEvent.EVENT_CHECK_CATEGORIES );
			var categ:Categories = new Categories();			
			categ.categoryName = String( model.currentTime.fullYear );
 			categ.categoryFK = model.domain;			
			var categ2:Categories = new Categories();
			categ2.categoryName = month[ model.currentTime.month ];		
			model.categories1 = categ;
			model.categories2 = categ2;
			model.newProject = projects;   
			var handler:IResponder = new Callbacks( result, fault );
	 		var newProjectSeq:SequenceGenerator = new SequenceGenerator( [ refFileEvent, event ], handler );
	  		newProjectSeq.dispatch(); 
		}
        /**
		 * Create the new project update the properties
		 * befor creating the new project check the existence of category
		 * IF EXIST add the project in the exist category
		 * ELSE create new category 
		 */
		private function updateProjectTable():void {		
			var projects:Projects = new Projects();			
			projects.projectDateStart = model.currentTime;
			projects.workflowFK = Workflows( workflow.selectedItem ).workflowId;
			var workflowTemplate:Workflowstemplates = Utils.getWorkflowTemplates( model.modelAnnulationWorkflowTemplate, projects.workflowFK );
			model.workflowstemplates = workflowTemplate; 
			projects.propertiespjSet = getPropertiespjSet();
			var status:Status = new Status();
			status.statusId = ProjectStatus.WAITING;
			projects.projectStatusFK = status.statusId;
			projects.projectName = projectLabel.text;
			projects.projectQuantity = 1;
						
			projects.presetTemplateFK = model.presetTempCollection.getItemAt( 0 ) as Presetstemplates;
			if( model.currentUserProfileCode == 'CLT' )	model.clientTeamlineId = model.person.personId;
			else	model.clientTeamlineId = getClientPerson( domain.selectedItem as Categories );
			projects.projectDateStart = model.currentTime;
			var ba:ByteArray = new ByteArray();
			ba.writeUTFBytes( comment.htmlText );
			projects.projectComment = ba; 
			
			var event:CategoriesEvent = new CategoriesEvent( CategoriesEvent.EVENT_CHECK_CATEGORIES );
			var categ:Categories = new Categories();			
			categ.categoryName = String( model.currentTime.fullYear );
 			categ.categoryFK = model.domain;			
			var categ2:Categories = new Categories();
			categ2.categoryName = month[ model.currentTime.month ];		
			model.categories1 = categ;
			model.categories2 = categ2;
			model.newProject = projects;   
			var handler:IResponder = new Callbacks( result, fault );
	 		var newProjectSeq:SequenceGenerator = new SequenceGenerator( [ event ], handler );
	  		newProjectSeq.dispatch();  
		}
		
		public function result( rpc:Object ):void {
			
		}
		
		public function fault( rpc:Object ):void {
			
		}
		
		private function getPropertySet( refSet:ArrayCollection ):ArrayCollection {
			var pjSet:ArrayCollection = getPropertiespjSet();
			var returnArrc:ArrayCollection = new ArrayCollection();
			for each( var propertiesPj:Propertiespj in refSet ) {
				var searchItem:Propertiespj = new Propertiespj();
				searchItem.propertyPreset = propertiesPj.propertyPreset;				
				var pj:Propertiespj = getCurrenItem( searchItem, pjSet  );
				if( !pj ) {				   
					pj = new Propertiespj();
					pj.fieldValue = propertiesPj.fieldValue;
					pj.propertyPreset = propertiesPj.propertyPreset;
				}
				returnArrc.addItem( pj );
			}
			return returnArrc;
		}
		
		private function getCurrenItem( item:Propertiespj, dp:ArrayCollection ):Propertiespj {
			for each( var pj:Propertiespj in dp ) {
				if( pj.propertyPreset.propertyPresetId == item.propertyPreset.propertyPresetId ) {
					return pj;
				}
			} 
			return null;
		}

		private var _projectProperty:ArrayCollection;
		[Bindable]
		public function get projectProperty ():ArrayCollection {
			return _projectProperty;
		}
		public function set projectProperty ( value:ArrayCollection ):void {
			_projectProperty = value; 
		}

		
		public function getPropertiespjSet():ArrayCollection {
			var arrC:ArrayCollection = new ArrayCollection();
			for ( var i:int = 0; i < projectProperty.length; i++ ) {				
				var item:Propertiespresets = Propertiespresets( projectProperty.getItemAt( i ) );
				var propertySets:Propertiespj = new Propertiespj();
				if( hasOwnProperty( "text_" + item.fieldName ) ) {						
					propertySets = checkItemExist( item );
					propertySets.projectFk = model.currentProjects.projectId;
					propertySets.propertyPreset = item;
					propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
					propertySets.fieldValue = this[ "text_" + item.fieldName ].text;	
					arrC.addItem( propertySets );	
				}
				if(this.hasOwnProperty( "popup_" + item.fieldName ) ) {				
					propertySets = checkItemExist( item );
					propertySets.projectFk = model.currentProjects.projectId;
					propertySets.propertyPreset = item;
					propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
					propertySets.fieldValue = this[ "popup_" + item.fieldName ].selectedIndex;
					arrC.addItem( propertySets );	
				}  
			}
			if( model.currentUserProfileCode != 'TRA' ) {
				var propPreset:Propertiespresets = getPropPreset( 'chef_project_pack' );
				var cppPropertyPj:Propertiespj = checkItemExist( propPreset );
				cppPropertyPj.propertyPreset = propPreset;
				cppPropertyPj.propertyPreset.propertyPresetId = propPreset.propertyPresetId;
				cppPropertyPj.fieldValue = GetVOUtil.getCompanyObject( model.person.companyFk ).companyname + '-' + model.person.personLastname + ', '+ model.person.personFirstname;
				arrC.addItem( cppPropertyPj );
			}
			return arrC;			
		} 
		
		private function getPropPreset( value:String ):Propertiespresets {
			for each( var item:Propertiespresets in projectProperty ) {
				if( item.fieldName == value ) {
					return item;
				}
			}
			return null;
		}
		
		public function checkItemExist( item:Propertiespresets ):Propertiespj {
			for( var i:int=0; i < model.currentProjects.propertiespjSet.length; i++ ) {
				var chekProperty:Propertiespj = model.currentProjects.propertiespjSet.getItemAt( i ) as Propertiespj;
				if( chekProperty.propertyPreset.propertyPresetId == item.propertyPresetId 
						&& chekProperty.projectFk  == model.currentProjects.projectId ) {
					return chekProperty;
				}
			}
			return new Propertiespj();
		}
		 
		
		override public function updateProperties():void { 
			for (var i:int=0; i<projectProperty.length;i++){				
				var item:Propertiespresets = Propertiespresets(projectProperty.getItemAt(i));
				var visible:Proppresetstemplates = checkTemplate(item);
				if(this.hasOwnProperty("label_"+item.fieldName)&&this["label_"+item.fieldName]!=null){
					if(visible!=null){		
						this["label_"+item.fieldName].visible = true			
						this["label_"+item.fieldName].label = visible.fieldLabel;
					}else{
						this["label_"+item.fieldName].visible = false
					}
				} 
				if(this.hasOwnProperty("popup_"+item.fieldName)&&this["popup_"+item.fieldName]!=null){
					if(visible!=null){
						var popStr:String = String(visible.fieldOptionsValue);
						var popArr:Array = popStr.split(",");
						var value:String = getPropertyValue(item.propertyPresetId);
						this["popup_"+item.fieldName].dataProvider = popArr;
						this["popup_"+item.fieldName].visible = true
						if(value==''){						
							this["popup_"+item.fieldName].selectedIndex = (item.fieldDefaultValue!=null)?item.fieldDefaultValue:0;
						}else{
							this["popup_"+item.fieldName].selectedIndex = Number(value);						
						} 
						
						if(!model.editForm){
							this["popup_"+item.fieldName].enabled = false;
						}
					}else{
						this["popup_"+item.fieldName].visible = false
					}
				}  
				if(hasOwnProperty("text_"+item.fieldName)&&this["text_"+item.fieldName]!=null){	
					var propvalue:String = getPropertyValue(item.propertyPresetId);	
					if(visible!=null){
						this["text_"+item.fieldName].visible = true;
						if(propvalue==''){
							this["text_"+item.fieldName].text =(item.fieldDefaultValue!=null)?item.fieldDefaultValue:''; 
						}else{		
							this["text_"+item.fieldName].text = propvalue;
						}
					}else{
						this["text_"+item.fieldName].visible = false;
					}
					 
				}
			}
			
			
		}
		public function checkTemplate(preset:Propertiespresets):Proppresetstemplates{
			for each(var item:Proppresetstemplates in model.currentProjects.presetTemplateFK.propertiesPresetSet){
				if(preset.propertyPresetId == item.propertypresetFK){
					return item
				} 
			}
			return null;
		}	
		public function getPropertyValue(id:int):String{
			for each(var item:Propertiespj in model.currentProjects.propertiespjSet){
				if(item.propertyPreset.propertyPresetId == id){
					return item.fieldValue;
				}
			}
			return '';
		}
		
		public function resetForm():void{
			text_ean.text="";
			text_sap.text="";
			text_impremiur.text="";
			comment.text="";
			internet.selected=true;
			hideShowDragStage()
		}
		
		public function resetFileForm():void{
			fileList.listFiles.dataProvider = [];
			fileList.UploadFiles = [];
			model.currentProjectFiles = new ArrayCollection();
		}  
		
		override public function gotoNextTask():void {
			model.currentTasks.projectObject.propertiespjSet = getPropertiespjSet();
			super.gotoNextTask();
		}
		
		override public function gotoPrevTask():void {
			model.currentTasks.projectObject.propertiespjSet = getPropertiespjSet();
			super.gotoNextTask();
		} 
		
		private function getSpecialWorkFlowsOnly( item:Workflows ):Boolean {
	  		var retVal:Boolean = false;
			if ( item.workflowId == workflowId ) { 
				retVal = true;
			}
			return retVal;
	  	}
	  	
	  	private var workflowId:int;
		
		public function getWorkflow( dwfset:ArrayCollection ):ArrayCollection {
			var wrflwColl:ArrayCollection = new ArrayCollection();
			for each( var dwf:DomainWorkflow in dwfset ) {
				workflowId = dwf.workflowFk;
				model.workflowsCollection.filterFunction = getSpecialWorkFlowsOnly;
		  		model.workflowsCollection.refresh();
		  		if( model.workflowsCollection.length > 0 )	wrflwColl.addItem( model.workflowsCollection.getItemAt( 0 ) );
		  		//add by kumar sort by workflowlabel
		  		var sort : Sort = new Sort();
				sort.fields = [ new SortField( "workflowLabel" ) ];
		  		wrflwColl.sort = sort;
		  		wrflwColl.refresh();
		  	}
		  	model.workflowsCollection.filterFunction = null;
		  	model.workflowsCollection.refresh();
			return wrflwColl;
		} 
				
		private function selectDomain( item:Categories ):Boolean {
			var retVal:Boolean = false;
			if ( item.categoryCode == model.domain.categoryCode ) { 
				retVal = true;
			}
			return retVal;
		}
		
		private function modifyDPWorkflow():void{
			if( GetVOUtil.getProfileObject( model.person.defaultProfile ).profileCode== 'CLT' ) {
				model.collectAllDomains.filterFunction = selectDomain;
			}
			else {
				model.collectAllDomains.filterFunction = getDomainsOnly;
			}
			model.collectAllDomains.refresh();
			if( GetVOUtil.getProfileObject( model.person.defaultProfile ).profileCode == 'CLT' )
				domain.selectedIndex = 0;
			domain.validateNow()
			workflow.dataProvider=getWorkflow( Categories( domain.selectedItem ).domainworkflowSet );
 		} 
		
		private function getDomainsOnly( item:Categories ):Boolean {
	  		var retVal : Boolean = false;
			// check the items in the itemObj Ojbect to see if it contains the value being tested
			if ( !item.categoryFK ) { 
				retVal = true;
			}
			return retVal;
	  	}
	  	
	  	private function openIMPSelection( str:String ):void {
			model.personSelectionVersion = str;
			var perWindow:NewPersonTemplate = new NewPersonTemplate();
			perWindow.fromNewProject = true;
			perWindow.addEventListener( PersonsEvent.EVENT_SELECTED_PERSON, changedPerson,false,0,true );
			PopUpManager.addPopUp( perWindow, this );
		    PopUpManager.centerPopUp( perWindow );
		}
		
		private function changedPerson( ev:PersonsEvent ):void {
			text_impremiur.text = ev.selectedPerson;
		}
		
		private function getClientPerson( obj:Categories ):int {
			var returnValue:int;
			for each( var item:Persons in model.personsArrCollection ) {
				if( obj.categoryCode == GetVOUtil.getCompanyObject( item.companyFk ).companycode ) {
					returnValue = item.personId;
					break;
				}
			}
			return	returnValue;
		}
	 	
	]]>
</mx:Script> 

    <mx:Parallel id="alertCreationCompleteEffect">
        <mx:Fade duration="500" />
        <mx:Move yFrom="0"
                easingFunction="Elastic.easeOut"
                duration="1000" />
    </mx:Parallel>
    
	<mx:VBox verticalGap="0" top="0" left="0">
			<mx:Form id="loginForm1" labelWidth="140" paddingLeft="0" paddingBottom="0">	
				<mx:FormItem label="Domain" includeInLayout="{this.visible}" visible="{model.collectAllDomains.length>1}">
		            <mx:ComboBox id="domain" width="160"  dataProvider="{model.collectAllDomains}" labelField="categoryName" change="modifyDPWorkflow()"/>
		        </mx:FormItem>        
			
				 <mx:FormItem label="{model.loc.getString('projectName')}" >
		            <mx:TextInput id="projectLabel" width="160"  text="{model.currentProjects.projectName}" editable="false" maxChars="250"  />
		        </mx:FormItem>
		        
		        <mx:FormItem label="Workflow" includeInLayout="{this.visible}" visible="{workflow.dataProvider.length>1}">
		            <mx:ComboBox id="workflow" width="160"  labelField="workflowLabel"/>
		        </mx:FormItem>
		        
		        <mx:FormItem id="Imprimeurs" label="Imprimeur" direction="horizontal">
	                   <mx:TextInput id="text_impremiur" width="160"  styleName="disabledText" editable="false" maxChars="250"/>
		           	   <mx:Label textDecoration="underline" useHandCursor="true" buttonMode="true" click="openIMPSelection('EPR')" mouseChildren="false" text="select" />	           	
		        </mx:FormItem>
		        
		       <mx:FormItem id="label_ean">
		            <mx:TextInput id="text_ean" width="160" maxChars="250" restrict="0-9"/>
		        </mx:FormItem>
		        
		        <mx:FormItem id="label_sap">
		            <mx:TextInput id="text_sap" width="160" maxChars="250"/>
		        </mx:FormItem>
		        
		        <mx:FormItem label="{model.loc.getString('sendingFiles')}" direction="horizontal">
							<mx:RadioButtonGroup id="deliveryMode" change="hideShowDragStage()"/>
			            	<mx:RadioButton id="cd" label="CD"  group="{deliveryMode}" />
			            	<mx:RadioButton id="internet" label="Internet" selected="true" group="{deliveryMode}"/>  
		        </mx:FormItem>	        
	      	</mx:Form>
			<mx:Form id="loginForm2" labelWidth="140" paddingLeft="0" paddingTop="0" paddingBottom="0">	
		         <mx:FormItem label="{model.loc.getString('requestDetails')}" textAlign="left" >
	            	<view:REditor id="comment" width="500"  height="90" htmlText="{String(model.currentProjects.projectComment)}" />
		        </mx:FormItem>
		        <mx:FormItem>
				  	<view:Upload fileCategory="unOrganized" left="0" type="Basic" includeInLayout="false" 
				  						visible="false" borderStyle="solid" id="fileList" width="500" height="198" 
				  						basicFileCollection="{model.basicFileCollection}"  basicFileVisible="{true}"/>	
		        </mx:FormItem>
			</mx:Form>
	</mx:VBox>
</TodoList>        