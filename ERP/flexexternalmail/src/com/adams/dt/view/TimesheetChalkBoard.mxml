<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	backgroundAlpha="0"
	top="0"
	bottom="0"
	left="0"
	right="0"
	initialize="init()"
	xmlns:viewset="com.adams.dt.view.*"
	xmlns:view="com.adams.dt.view.components.todolistscreens.*"
	xmlns:comp="com.adams.dt.view.filemanagement.*"
	creationPolicy="all" creationComplete="saveProperties()">
	<mx:Binding source="model.propertiespresetsCollection" destination="this.projectProperty"/>
	<mx:Script>
		<![CDATA[
			import com.adams.dt.model.vo.Workflowstemplates;
			import com.adams.dt.business.util.GetVOUtil;
			import mx.controls.CheckBox;
			import mx.events.CloseEvent;
			import com.adams.dt.business.util.Utils;
			import com.adams.dt.model.vo.Persons;
			import com.adams.dt.event.TeamlineEvent;
			import mx.rpc.IResponder;
			import com.adams.dt.event.PersonsEvent;
			import com.universalmind.cairngorm.events.Callbacks;
			import com.adams.dt.event.generator.SequenceGenerator;
			import com.adams.dt.model.vo.Proppresetstemplates;
			import com.adams.dt.model.vo.FileDetails;
			import com.adobe.cairngorm.control.CairngormEventDispatcher;
			import com.adams.dt.model.vo.Tasks;
			import com.adams.dt.event.TasksEvent;
			import com.adams.dt.model.vo.Status;
			import com.adams.dt.model.vo.TaskStatus;
			import mx.events.CollectionEvent;
			import mx.core.UIComponent;
			import com.adams.dt.model.ModelLocator;
			import com.adams.dt.model.vo.Propertiespj;
			import com.adams.dt.model.vo.Propertiespresets;
			import mx.collections.ArrayCollection;
			//import mx.events.*;
			//import flash.events.*;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.events.FaultEvent;
			import mx.controls.Alert;
			[Bindable]
			private var model:ModelLocator = ModelLocator.getInstance();
			 						
			private function resizeEvt(evt:Event):void{
			}

            private function closeHandler(event:Event):void {
            } 
            private function saveProperties():void{  
              if(model.currentProjects!=null)
				{
					//model.currentProjects.propertiespjSet = getPropertiespjSet();
					model.currentTempProjects.propertiespjSet = getPropertiespjSet();
				}
            }  
            private function dispatchpropertyChange():void {
         		dispatchEvent (new Event ("projectPropertyChange"));
	        }
	         /**
			 * set collection change listener for model.propertiespresetsCollection
			 * when ever the arraycollection change it will trigger the updateProperties
			 */
	        private function init():void{    
				model.propertiespresetsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,updateProperties);
			}  
         	    	
            /**
			 * update the imprimur details
			 */
	        private function getTeamline():void{
	        	/* var teamTempEvt:TeamlineEvent = new TeamlineEvent(TeamlineEvent.EVENT_SELECT_TEAMLINE);
			 	teamTempEvt.projectId = model.currentProjects.projectId; */ 
			 	var perEv:PersonsEvent = new PersonsEvent(PersonsEvent.EVENT_GETIMP_PERSONS);
			 	//var evtArr:Array = [teamTempEvt,perEv]
			 	//var evtArr:Array = [teamTempEvt]
			 	var evtArr:Array = [perEv]
			 	var handler:IResponder = new Callbacks(successResult);
				var seq:SequenceGenerator = new SequenceGenerator(evtArr,handler)
	          	seq.dispatch();
	        }
	        private function successResult(rpcEvent : Object):void{
	        	/* var perEv:PersonsEvent = new PersonsEvent(PersonsEvent.EVENT_GETIMP_PERSONS);
	        	perEv.dispatch(); */ 
	        }
         	/**
			 * set properties presets
			 * call the update property
			 */ 
	        private var _projectProperty:ArrayCollection;
			[Bindable(event="projectPropertyChange")]
			public function set projectProperty (value:ArrayCollection):void
			{
				if(!model.propertiespresetsCollection.hasEventListener(CollectionEvent.COLLECTION_CHANGE)){
					model.propertiespresetsCollection.addEventListener(CollectionEvent.COLLECTION_CHANGE,updateProperties);
				}
	
				if(!hasEventListener("projectPropertyChange")) addEventListener("projectPropertyChange",updateProperties,false,0,true);
					if(value!=null){	
						_projectProperty = value;
						dispatchEvent (new Event ("projectPropertyChange"));
					}
			}
	
			/**
			 * get the property preset 
			 */
			public function get projectProperty ():ArrayCollection
			{
				return _projectProperty;
			}
			/**
			 * create the propertypj values based on the filed present in the screen 
			 */
			public function getPropertiespjSet():ArrayCollection{
				var arrC:ArrayCollection = new ArrayCollection();
				for (var i:int=0; i<projectProperty.length;i++){				
					var item:Propertiespresets = Propertiespresets(projectProperty.getItemAt(i));
					var propertySets:Propertiespj
					if(hasOwnProperty("text_"+item.fieldName)){						
						propertySets = checkItemExist(item);
						propertySets.projectFk = model.currentProjects.projectId;
						propertySets.propertyPreset = item;
						propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
						propertySets.fieldValue = this["text_"+item.fieldName].text;	
						arrC.addItem(propertySets);	
					}
					if(this.hasOwnProperty("popup_"+item.fieldName)){				
						propertySets = checkItemExist(item);
						propertySets.projectFk= model.currentProjects.projectId;
						propertySets.propertyPreset = item;
						propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
						propertySets.fieldValue = this["popup_"+item.fieldName].selectedIndex;
						arrC.addItem(propertySets);	
					}  
					if(this.hasOwnProperty("checkbox_"+item.fieldName)){
						propertySets = checkItemExist(item);
						propertySets.projectFk= model.currentProjects.projectId;
						propertySets.propertyPreset = item;
						propertySets.propertyPreset.propertyPresetId = item.propertyPresetId;
						propertySets.fieldValue = this["checkbox_"+item.fieldName].selected;
						arrC.addItem(propertySets);	
					} 
				}
				return arrC;			
			}  
			
			/**
			 * Check the property existence on propertiespj
			 * IF EXIST return the corresponding object
			 * ELSE create new propertiesPj object
			 */
			public function checkItemExist(item:Propertiespresets):Propertiespj{
				for (var i:int=0; i<model.currentProjects.propertiespjSet.length;i++){
					var chekProperty:Propertiespj = model.currentProjects.propertiespjSet.getItemAt(i) as Propertiespj;
						if(chekProperty.propertyPreset.propertyPresetId == item.propertyPresetId ){
								return chekProperty;
						}
				}
				return new Propertiespj();
			}
		
			/**
			 * update the project property value
			 * set the component visibilty based on propertypresetTemplate values
			 * set the edit rights based on the profile
			 */
			private var imp:Boolean;
			private var tempProjectname:String = '';
			public function updateProperties(event:Event):void{ 
				model.technicalPropertyChanged = false;
				model.updatedPresetId = [];
				if(model.currentProjects.projectName != tempProjectname){
					tempProjectname = model.currentProjects.projectName;
					getTeamline();
				}
				if(model.currentTasks!=null){				
					//if(model.currentTasks.workflowtemplateFK.profileObject.profileCode == "EPR"){
						imp=true;
						model.editForm = true
					/* }else{
						imp=false;
						//March 31
						model.editForm = false;
					} */
				}
				for (var i:int=0; i<projectProperty.length;i++){				
					var item:Propertiespresets = Propertiespresets(projectProperty.getItemAt(i));				
					var visible:Proppresetstemplates = checkTemplate(item);
					if(this.hasOwnProperty("label_"+item.fieldName)&&this["label_"+item.fieldName]!=null){
						if(visible!=null){		
							this["label_"+item.fieldName].visible = true			
							this["label_"+item.fieldName].label = visible.fieldLabel;
						}else{
							this["label_"+item.fieldName].visible = false
						}
					} 
				if(this.hasOwnProperty("checkbox_"+item.fieldName)&&this["checkbox_"+item.fieldName]!=null)
				{
					if(visible!=null){
						var selectedValue:String = getPropertyValue(item.propertyPresetId);
						this["checkbox_"+item.fieldName].visible = true;
						this["checkbox_"+item.fieldName].label = visible.fieldOptionsValue;
						this["checkbox_"+item.fieldName].name = item.propertyPresetId;
						if( selectedValue == 'true' )
							this["checkbox_"+item.fieldName].selected = true;	
						else
							this["checkbox_"+item.fieldName].selected = false;
							
						if(!model.editForm){
								if(this["checkbox_"+item.fieldName] is CheckBox){
									this["checkbox_"+item.fieldName].enabled  = false;
								}else{
									this["checkbox_"+item.fieldName].enabled  = true;									
								}
						}  
					}
					else
					{
						this["checkbox_"+item.fieldName].visible = false
					}
					this["checkbox_"+item.fieldName].removeEventListener(FocusEvent.FOCUS_OUT,onFieldChange)	
					this["checkbox_"+item.fieldName].addEventListener(FocusEvent.FOCUS_OUT,onFieldChange,false,0,true);
				}
					if(this.hasOwnProperty("popup_"+item.fieldName)&&this["popup_"+item.fieldName]!=null){
						if(visible!=null){
							var popStr:String = String(visible.fieldOptionsValue);
							var popArr:Array = popStr.split(",");
							var value:String = getPropertyValue(item.propertyPresetId);
							this["popup_"+item.fieldName].name = item.propertyPresetId;
							this["popup_"+item.fieldName].dataProvider = popArr;
							this["popup_"+item.fieldName].visible = true;
							
							if(value==''||value==null){
								this["popup_"+item.fieldName].selectedIndex = (item.fieldDefaultValue!=null)?item.fieldDefaultValue:0;
								if(this["popup_"+item.fieldName] is RadioGropus){
									this["popup_"+item.fieldName].selectedIndex = (item.fieldDefaultValue!=null)?item.fieldDefaultValue:-1;
								}
								else {
		                            ComboBox(this["popup_"+item.fieldName]).selectedIndex = Number(value);
								}
							}
							else{
								this["popup_"+item.fieldName].selectedIndex = Number(value);
							}
														
							if(!model.editForm){
									if(this["popup_"+item.fieldName] is RadioGropus){
									}else{
										this["popup_"+item.fieldName].enabled  = false;
									}
							}else{
								if(this["popup_"+item.fieldName] is RadioGropus){
									}else{
										this["popup_"+item.fieldName].enabled  = true;
									}
							}
						}else{
							this["popup_"+item.fieldName].visible = false
						}
						this["popup_"+item.fieldName].removeEventListener(FocusEvent.FOCUS_OUT,onFieldChange)	
						this["popup_"+item.fieldName].addEventListener(FocusEvent.FOCUS_OUT,onFieldChange,false,0,true);
					}  
					if(hasOwnProperty("text_"+item.fieldName)&&this["text_"+item.fieldName]!=null){	
						var propvalue:String = getPropertyValue(item.propertyPresetId);	
						this["text_"+item.fieldName].name = item.propertyPresetId;
						if(visible!=null){
							this["text_"+item.fieldName].visible = true;
							if(propvalue==''){
								this["text_"+item.fieldName].text =(item.fieldDefaultValue!=null)?item.fieldDefaultValue:'';
							}
							else{		
								this["text_"+item.fieldName].text = propvalue;
							}
							if(!model.editForm){
								this["text_"+item.fieldName].styleName = 'disabledText';
								this["text_"+item.fieldName].enabled = false;
							}else{
								this["text_"+item.fieldName].styleName = 'TextArea';
								this["text_"+item.fieldName].enabled = true;
							}
						}else{
							this["text_"+item.fieldName].visible = false;
						}
						
						this["text_"+item.fieldName].removeEventListener(FocusEvent.FOCUS_OUT,onFieldChange)	
						this["text_"+item.fieldName].addEventListener(FocusEvent.FOCUS_OUT,onFieldChange,false,0,true);
					}
				}
				/* if(model.currentProjects!=null)
				{
					//model.currentProjects.propertiespjSet = getPropertiespjSet();
					model.currentTempProjects.propertiespjSet = getPropertiespjSet();
				} */
				 
			}
			/**
			 * check the property existence in Proppresetstemplates
			 */	
			public function checkTemplate(preset:Propertiespresets):Proppresetstemplates{
				if(preset!=null){
					for each(var item:Proppresetstemplates in model.currentProjects.presetTemplateFK.propertiesPresetSet){
						if(preset.propertyPresetId == item.propertypresetFK){
							return item
						} 
					}
				}
				return null;
			}	
			/**
			 * get the property value from projects
			 */
			public function getPropertyValue(id:int):String{
				for each(var item:Propertiespj in model.currentProjects.propertiespjSet){
					if(item.propertyPreset.propertyPresetId == id){
						return item.fieldValue;
					}
					
				}
				return '';
			}
			
			 /**
			 * @param id:String, input propertyPj id
			 * get changed field name and property
			 */ 
			private function getChangedFields(id:String):void{
				// model.updatedFieldCollection = new ArrayCollection();
					var object:Object = new Object();
					var propertiesPj:Propertiespj = Utils.getPropertyPj(Number(id),model.currentProjects.propertiespjSet);
					var propertyPresetTemplate:Proppresetstemplates = Utils.getPropertyPresetTemp(Number(id),model.currentProjects.presetTemplateFK.propertiesPresetSet)
					trace("getChangedFields :"+propertiesPj+"======"+propertyPresetTemplate);
					if(propertiesPj!=null&&propertyPresetTemplate!=null){				
						object["propertiesPj"]=propertiesPj;
						object["propertyPresetTemplate"]=propertyPresetTemplate;
						model.updatedFieldCollection.addItem(object);
					}
			}
			/**
			 * get the changed field name and property to update events
			 * IF changes made by client send message with updated property to traffic
			 * refer propertypjcommand for sending message
			 */
			private function onFieldChange(event:FocusEvent):void{
				model.technicalPropertyChanged = true;
				if(model.updatedPresetId.indexOf(event.currentTarget.name)==-1){
					model.updatedPresetId.push(event.currentTarget.name);
					getChangedFields(event.currentTarget.name);
				}
			} 
			private function formFun(event:Event,pan:UIComponent):void{
				//event.currentTarget.getChildAt(0).selected=true;
				if(event.currentTarget.getChildAt(0).selected == false){
					event.currentTarget.getChildAt(0).selected = true;
					remForm(pan);
				}else{
					event.currentTarget.getChildAt(0).selected = false;
					addForm(pan);
				}
			}
			private function addForm(pan:UIComponent):void{
				pan.includeInLayout = true;
				pan.visible = true;
			}
			private function remForm(pan:UIComponent):void{
				pan.includeInLayout = false;
				pan.visible = false;
			}
			
			private function getPropertyString( value:String ):String {
	    		var returnValue:String;
	    		switch( value ) {
	    			case 'CHP':
	    				returnValue ="chp_validation";
	    			break;
	    			case 'CPP':
	    				returnValue ="cpp_validation";
	    			break;
	    			case 'EPR':
	    				returnValue ="imp_validation";
	    			break;
	    			case 'IND':
	    				returnValue ="ind_validation";
	    			break;
	    			case 'AGN':
	    				returnValue ="agn_validation";
	    			break;
	    			case 'COM':
	    				returnValue ="comm_validation";
	    			break;	    			
	    			default:
	    			break;
	    		}
	    		return returnValue;
	    	}		
			
			public function gotoNext() : void 
			{	
				var currentWorkflowFk:Workflowstemplates = GetVOUtil.getWorkflowTemplate(model.currentTasks.workflowtemplateFK.workflowTemplateId);
				var itemValidation:String = getPropertyString(currentWorkflowFk.profileObject.profileCode);
				model.currentProjects = GetVOUtil.getProjectObject(model.currentTasks.projectObject.projectId);

				var tasks:Tasks = new Tasks();  
				//tasks = model.currentTasks;
				//tasks.workflowtemplateFK = model.workflowstemplates.nextTaskFk;
				trace('gotoNext :'+model.currentTasks.workflowtemplateFK.nextTaskFk);
				tasks.workflowtemplateFK = model.currentTasks.workflowtemplateFK.nextTaskFk;
				tasks.projectObject = model.currentTasks.projectObject;
				model.currentTasks.tDateEnd = model.currentTime;
				var status1 : Status = new Status();
				tasks.previousTask = model.currentTasks;
				tasks.fileObj = model.currentTasks.fileObj;
				tasks.taskStatusFK = TaskStatus.WAITING;
				tasks.tDateCreation = model.currentTime;
				tasks.tDateEndEstimated = Utils.getCalculatedDate(model.currentTime,tasks.workflowtemplateFK.defaultEstimatedTime); 
				tasks.estimatedTime = tasks.workflowtemplateFK.defaultEstimatedTime;
				model.currentTasks.taskComment = getComment();
				if(model.currentTasks.previousTask!=null)
				  model.currentTasks.fileObj = model.currentTasks.previousTask.fileObj;
				tasks.onairTime = 0;					
				model.release = 0;
				
				//var arrayValidation:Array = ['chp_validation','cpp_validation','agn_validation','comm_validation','ind_validation','imp_validation'];
								
				var dynamicPropertyPj:Propertiespj = assignValidation(itemValidation,"Next");
				var arrC:ArrayCollection = new ArrayCollection();
				if( model.updatedFieldCollection.length != 0 ) {
					//var arrC:ArrayCollection = getPropertiespjSet();
					arrC = getPropertiespjSet();
				}
				arrC.addItem(dynamicPropertyPj);
				model.propertiespjCollection = arrC;
				model.currentTasks.projectObject.propertiespjSet = arrC;
				
				if(fileAttachmentsId.arrayCollFinal.length!=0)
				{
					model.attachmentsFiles = fileAttachmentsId.arrayCollFinal;
				}
				
				if(model.currentTasks.nextTask == null&&model.currentTasks.taskStatusFK!=TaskStatus.FINISHED)
				{
					model.currentTasks.nextTask = tasks;
					model.currentTasks.taskStatusFK = TaskStatus.FINISHED;
					var event : TasksEvent = new TasksEvent( TasksEvent.EVENT_CREATE_TASKS );
					event.tasks = tasks;
					//var handler:IResponder = new Callbacks(result,fault)
				 	//var handler:IResponder = new Callbacks(okResult);
				 	var handler:IResponder = new Callbacks(confirmResult);
					var seq:SequenceGenerator = new SequenceGenerator([event],handler)
		          	seq.dispatch();
				} 
			}
			private function assignValidation(validationName:String,actionName:String):Propertiespj
			{
				var propPreset:Propertiespresets = getPropPreset( validationName );
				var cppvalidPropertyPj:Propertiespj = Utils.getPropertyPj( propPreset.propertyPresetId, model.currentPropertiespjSingle );
				if(actionName == "Next")
					cppvalidPropertyPj.fieldValue = "2";
				else
					cppvalidPropertyPj.fieldValue = "1";
					
				return cppvalidPropertyPj;
			}
			private function getPropPreset( value:String ):Propertiespresets {
				for each( var item:Propertiespresets in projectProperty ) {
					if( item.fieldName == value ) {
						return item;
					}
				}
				return null;
			}
			private function confirmResult(rpcEvent : Object):void{
	        }
	        private function okResult(rpcEvent : Object):void{
	        	model.mainClass.messageSettings();	
	        }
			/* public function result(ev:Event):void {
	       	}
	       	public function fault(ev:Event):void {
	       	} */
	       	
	       	public static function trimSpace(v:String):String{
				return v.replace(/\s+/g, '');
			} 
			
			private var btn_id:String;		
			public function showAlert(event:MouseEvent):void
			{				
				btn_id = event.currentTarget.id;
				trace("TIMESHEET CALLING "+btn_id);
				if(btn_id == 'Previous'){					
					if(trimSpace(model.mainClass.allalert.replyText.text).length ==0 ){
						Alert.show("Please provide Comments",'');
					}
					else{
						trace("TIMESHEET CALLING Previous");
						showConfirmationAlert(event.currentTarget.label);
					}
				}
				else{
					trace("TIMESHEET CALLING NEXT");
					showConfirmationAlert(event.currentTarget.label);
				}
			}
			private function showConfirmationAlert( eventlbl:String):void {
				var title:String = model.currentProjects.projectName+" "+ Utils.dateFormat(model.currentTime);
				Alert.yesLabel = 'Confirmation';
				Alert.buttonWidth = 120;
				var alertStr:String = model.loc.getString('pleaseDoYouConfirm')+" "+eventlbl+". "+model.loc.getString('thanks');
				Alert.show(alertStr,title,Alert.YES|Alert.NO,this,confirmationHandler);
			}
			private function confirmationHandler(event:CloseEvent):void{
				if (event.detail == Alert.YES) {
					switch(btn_id){				
						case "Previous":
							gotoPrevious();
						break;
						case "Next":
							gotoNext();
						break;						
					}
					model.windowsCloseConfirmation = "No";	
				}
			}
			
			public function gotoPrevious() : void
			{
				var currentWorkflowFk:Workflowstemplates = GetVOUtil.getWorkflowTemplate(model.currentTasks.workflowtemplateFK.workflowTemplateId);
				var itemValidation:String = getPropertyString(currentWorkflowFk.profileObject.profileCode);
				
				var tasks:Tasks = new Tasks();
				//tasks.workflowtemplateFK = model.workflowstemplates.prevTaskFk;
				tasks.workflowtemplateFK = model.currentTasks.workflowtemplateFK.prevTaskFk;
				tasks.projectObject = model.currentTasks.projectObject;
				//model.currentProjects = tasks.projectObject;
				tasks.previousTask = model.currentTasks;
				model.currentTasks.tDateEnd = model.currentTime;
				
				var status1 : Status = new Status();
				tasks.previousTask = model.currentTasks;
				tasks.fileObj = model.currentTasks.fileObj;
				if(model.currentTasks.previousTask!=null)
					model.currentTasks.fileObj = model.currentTasks.previousTask.fileObj;
				tasks.taskStatusFK = TaskStatus.WAITING;
				tasks.tDateCreation = model.currentTime;
				tasks.tDateEndEstimated =Utils.getCalculatedDate(model.currentTime,tasks.workflowtemplateFK.defaultEstimatedTime); 
				tasks.estimatedTime = tasks.workflowtemplateFK.defaultEstimatedTime;
				model.currentTasks.taskComment = getComment();
				tasks.onairTime = 54;
					
				var dynamicPropertyPj:Propertiespj = assignValidation(itemValidation,"Previous");
				var arrC:ArrayCollection = new ArrayCollection();
				if(model.updatedFieldCollection.length!=0)
				{
					arrC = getPropertiespjSet();
				}
				arrC.addItem(dynamicPropertyPj);
				model.propertiespjCollection = arrC;				
				model.currentTasks.projectObject.propertiespjSet = arrC;
				
				if(fileAttachmentsId.arrayCollFinal.length!=0)
				{
					model.attachmentsFiles = fileAttachmentsId.arrayCollFinal;
				}
				if(model.currentTasks.nextTask == null&&model.currentTasks.taskStatusFK!=TaskStatus.FINISHED){
					model.currentTasks.nextTask = tasks;
					model.currentTasks.taskStatusFK = TaskStatus.FINISHED;			
					
					var event : TasksEvent = new TasksEvent( TasksEvent.EVENT_CREATE_TASKS);
					event.tasks = tasks;
				 	//var handler:IResponder = new Callbacks(okResult);
				 	var handler:IResponder = new Callbacks(confirmResult);
					var seq:SequenceGenerator = new SequenceGenerator([event],handler)
		          	seq.dispatch();
				}				
			}
			public function getComment() : ByteArray
			{
				var by : ByteArray = new ByteArray();
				//by.writeUTFBytes(model.currentTaskComment);
				by.writeUTFBytes(model.mainClass.allalert.replyText.text);
				return by;
			}
			private function updateTaskFileCollection():void{			
				for each(var item:FileDetails in model.taskFileCollection){
					if(item.taskId == model.currentTasks.previousTask.taskId){
						item.releaseStatus = model.release;	
						model.fileCollectionToUpdate.addItem(item);						
					}
				}
			}						
		]]>
	</mx:Script>
	<mx:VBox width="100%"
		height="100%"
		verticalGap="0"
		horizontalCenter="0"
		backgroundAlpha="0">
		<mx:Canvas width="100%" 
			height="100%" 
			id="maincan"
			backgroundAlpha="0"
			resize="resizeEvt(event)">
					 			
			<mx:VBox id="formaccord"
				width="95%"
				horizontalCenter="0"
				top="10">				
				<!-- Procede D’IMPRESSION, TRAME, MONTAGE, GENCOD,SPOT et MINIMUMS-->
					<mx:Canvas width="100%" >
					
					<!--<mx:HBox width="100%" click="formFun(event,imprimeur)" height="30" backgroundColor="#303030"
							verticalAlign="middle" paddingLeft="15">-->
					<mx:HBox width="100%" click="formFun(event,imprimeur)" height="30" styleName="technicalFormHeader">
						<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
						<mx:Label text="IMPRIMEUR" />
					</mx:HBox>
					<mx:HBox id="imprimeur" width="100%" paddingTop="20" paddingLeft="5" paddingRight="5" 
						      borderStyle="solid"  borderColor="black" paddingBottom="5" includeInLayout="false" visible="false">
					<mx:Form labelWidth="300"  width="100%" height="100%" >
						<!--<mx:FormItem label="{model.loc.getString('companyName')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.company.companyname}" fontWeight="bold" />
						</mx:FormItem>-->
						<mx:FormItem label="{model.loc.getString('firstName')}">
							<mx:HBox>
								<mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personFirstname}" fontWeight="bold" />
							</mx:HBox>
						</mx:FormItem>
						<mx:FormItem label="{model.loc.getString('lastName')}">
							<mx:HBox>
								<mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personLastname}" fontWeight="bold" />
							</mx:HBox>
						</mx:FormItem>
						<mx:FormItem label="{model.loc.getString('personPosition')}">
							<mx:HBox>
								<mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personPosition}" fontWeight="bold" />
							</mx:HBox>
						</mx:FormItem>							 		
						
						<mx:FormItem label="{model.loc.getString('emailAddress')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personEmail}" fontWeight="bold" />
						</mx:FormItem>
						
						<mx:FormItem label="{model.loc.getString('personTele')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personMobile}" fontWeight="bold" />
						</mx:FormItem>
					    <mx:FormItem label="{model.loc.getString('personAddress')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personAddress}" fontWeight="bold" />
						</mx:FormItem>
						<mx:FormItem label="{model.loc.getString('personPostalCode')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personPostalCode}" fontWeight="bold" />
						</mx:FormItem>
						<mx:FormItem label="{model.loc.getString('personCity')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personCity}" fontWeight="bold" />
						</mx:FormItem>
						<mx:FormItem label="{model.loc.getString('personCountry')}">
							 <mx:TextInput enabled="false" styleName="disabledText"  text="{model.impPerson.personCountry}" fontWeight="bold" />
						</mx:FormItem> 
					</mx:Form>			
					<!--<mx:VBox width="100%" paddingTop="20">
							<mx:Form width="100%" >
								<mx:FormItem id="label_validation" label="VALIDATION" /> 
								<mx:FormItem id="label_cuttingplan" width="100%">  
										<view:RadioGropus id="popup_cuttingplan"
											groupName="Plan de découpe"
											numOfColumns="2"  vGap="70"/>												
								</mx:FormItem> 
								<mx:FormItem id="label_spotsize" width="100%" >  
										<view:RadioGropus id="popup_spotsize" 
											groupName="Dimension du spot"
											numOfColumns="2" vGap="70" />
								</mx:FormItem>
							</mx:Form>
						</mx:VBox>-->
					</mx:HBox>
				</mx:Canvas>
				
				<mx:Canvas width="100%" >
					<mx:HBox width="100%" click="formFun(event,procedeForm)" height="30" styleName="technicalFormHeader">
						<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
						<mx:Label text="Procede D’IMPRESSION" />
					</mx:HBox>
					<mx:Form labelWidth="300" id="procedeForm" width="100%" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:FormItem>
							<mx:ComboBox id="popup_print_process"							
							width="150" close="closeHandler(event);"/>
						</mx:FormItem>
						<!-- INDIA -->
						<!--<mx:FormItem id="label_serigraphy" >
							<view:RadioGropus id="popup_serigraphy"
								groupName="Poste sérigraphie"
								numOfColumns="2" />
						</mx:FormItem>-->
						
						<mx:FormItem id="label_print_sens" >
							<mx:CheckBox id="checkbox_print_sens" />
						</mx:FormItem>
						<!--MARCH 24 - Comment -->
						<!--<mx:FormItem id="label_print_support" >
							<view:RadioGropus id="popup_print_support"
									groupName="Support d'mpression"
									numOfColumns="1"/>
						</mx:FormItem>-->
						<!--MARCH 24 - added -->
						<mx:FormItem id="label_print_support" >
							<mx:ComboBox id="popup_print_support" selectedIndex="1" width="150" />
						</mx:FormItem>
						
						<mx:FormItem id="label_vernis" label="Vernis">
							 <mx:TextInput id="text_vernis"
								width="150"
								/>
						</mx:FormItem>
						<mx:FormItem id="label_format" >
							<mx:ComboBox id="popup_format" selectedIndex="1"/>
						</mx:FormItem>
						
						<mx:FormItem id="label_width" >
								<mx:TextInput id="text_width" width="40" />
							</mx:FormItem> 
							<mx:FormItem id="label_height" >
								<mx:TextInput id="text_height" width="40" />
							</mx:FormItem> 
					</mx:Form>			
				</mx:Canvas>	
				
				<!--MARCH 24 - added --> 
				<mx:Canvas width="100%" >
					<mx:HBox width="100%" click="formFun(event,plandedecoupeForm)" height="30" styleName="technicalFormHeader">
						<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
						<mx:Label text="PLAN DE DÉCOUPE" />
					</mx:HBox>
					<mx:Form labelWidth="300" id="plandedecoupeForm" width="100%" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:FormItem id="label_cuttingplan" label="VALIDATION"> 	<!-- label_validation -->							
							<view:RadioGropus id="popup_cuttingplan" groupName="Plan de découpe" numOfColumns="1"  vGap="70" />												
						</mx:FormItem> 
					</mx:Form>			
				</mx:Canvas>
						
				<mx:Canvas width="100%">
						<mx:HBox width="100%" click="formFun(event,trameForm)" height="30" styleName="technicalFormHeader">
							<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
							<mx:Label text="TRAME, RECOUVREMENT, POINT MINIMUM" />
						</mx:HBox>
					<mx:Form labelWidth="300" id="trameForm" width="100%" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:FormItem id="label_trame" label="Trame">
							<mx:TextInput id="text_trame"
								width="150"
								/>
						</mx:FormItem>
						
						<mx:FormItem id="label_point_type" label="Type de points">
							<mx:ComboBox id="popup_point_type"
								width="150"
								close="closeHandler(event)"/>
						</mx:FormItem>
						
						<mx:FormItem id="label_trapping" label="Trapping">
							<mx:TextInput id="text_trapping"
							
								width="150"
								/>
						</mx:FormItem>
						<mx:FormItem id="label_white_takeoff" label="Retrait du blanc">
							<mx:TextInput id="text_white_takeoff"
	
								width="150"
								/>
						</mx:FormItem>
						<mx:FormItem id="label_minimum_point" label="point minimim sur fichier">
							 <mx:TextInput id="text_minimum_point"
							width="46"/>
						</mx:FormItem> 
						<!-- INDIA -->
						<mx:FormItem id="label_point_minimum_sur_imprime" label="Point minimum sur imprimé">
							<mx:TextInput id="text_point_minimum_sur_imprime"
							width="46"
							text="0"/>
						</mx:FormItem>
						<mx:FormItem id="label_max_point_gradient" label="point maximum dans les dégradés">
							<mx:TextInput id="text_max_point_gradient"
							width="46"
							text="0"/>
						</mx:FormItem>
						
						<mx:FormItem id="label_proof_curve" label="courbe d'engraissement épreuve">
							<mx:TextInput id="text_proof_curve"	width="46" text="0"/>
						</mx:FormItem>
						
						<mx:FormItem id="label_ink_pourcentage" label="Taux de superposition (% encrage)">
							<mx:TextInput id="text_ink_pourcentage"	width="46" text="0"/>  
						</mx:FormItem>
						<mx:FormItem id="label_bleed" label="debord de matiere">
							<mx:TextInput id="text_bleed"	width="46" text="0"/>  
						</mx:FormItem>	
						<mx:FormItem id="label_paste_zone" label="Réserve de collage">
							<!--<mx:TextInput id="text_paste_zone"	width="46" text="0"/>  -->
							<view:RadioGropus id="popup_paste_zone"
										groupName="Cercle de repérage par couleur"
										numOfColumns="2"
										vGap="70"/>
						</mx:FormItem>	
						<mx:FormItem id="label_text_security_zone" label="Sécurité des textes par rapport à la coupe et au rainage" toolTip="{label_text_security_zone.label}">
							<mx:TextInput id="text_text_security_zone"	width="46" text="0"/>  
						</mx:FormItem>
						
						<!-- INDIA -->
						<mx:FormItem id="label_color_bleed_laize" label="Débord Couleur">
								<view:TextNumericStepper id="text_color_bleed_laize"
									minimum="0"
									maximum="40"
									stepSize="1"
									text="20"
									width="65"/>
							</mx:FormItem>
						 
						 <mx:FormItem id="label_color_bleed_dev" label="Débord couleur Développement">
								<mx:TextInput id="text_color_bleed_dev" width="46" text="0"/>
							</mx:FormItem>
						 
					</mx:Form>
				</mx:Canvas>
				
				<mx:Canvas width="100%">
						<mx:HBox width="100%" click="formFun(event,montageForm)" height="30" styleName="technicalFormHeader">
							<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
							<mx:Label text="COULEURS" />
						</mx:HBox>
						<mx:Form labelWidth="300" id="montageForm" width="100%" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
							<mx:FormItem id="label_color_number" label="nombre de couleurs">
								<view:TextNumericStepper id="text_color_number"
									minimum="0"
									maximum="40"
									stepSize="1"
									text="20"
									width="65"/>
							</mx:FormItem>
							<!-- INDIA -->
							<mx:FormItem id="label_color_detail" label="détail des couleurs">
								<mx:TextArea id="text_color_detail" width="500" text="0" height="60"/>
							</mx:FormItem>
							<mx:FormItem id="label_color_order" label="Ordre de passage des couleurs Clichés commun">
								<mx:TextInput id="text_color_order" width="500" text="0" height="100"/>
							</mx:FormItem>
							<!-- INDIA -->
							<!--<mx:FormItem id="label_color_bleed_laize" label="Débord Couleur">
								<view:TextNumericStepper id="text_color_bleed_laize"
									minimum="0"
									maximum="40"
									stepSize="1"
									text="20"
									width="65"/>
							</mx:FormItem>-->
							
							<!--<mx:FormItem id="label_color_bleed_dev" label="Débord couleur Développement">
								<mx:TextInput id="text_color_bleed_dev" width="46" text="0"/>
							</mx:FormItem>-->
							
							<mx:FormItem id="label_common_cylinders" label="Cylindres communs">
								<mx:TextInput id="text_common_cylinders" width="142" text="0"/>
							</mx:FormItem>
						</mx:Form>
				</mx:Canvas>
				<mx:Canvas width="100%">
					<mx:HBox width="100%" click="formFun(event,gencodForm)" height="30" styleName="technicalFormHeader">
							<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
							<mx:Label text="GENCOD et SPOT" />
						</mx:HBox>
						<mx:Form labelWidth="300" id="gencodForm" width="100%" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
							<mx:FormItem id="label_gencod_color" label="Couleur">
								<mx:TextInput id="text_gencod_color" width="142" text="0"/>
							</mx:FormItem>
							
							<mx:FormItem id="label_gencod_direction" label="Sens">
								<mx:TextInput id="text_gencod_direction" width="142" text="0"/>
							</mx:FormItem>
							
							<mx:FormItem id="label_gencod_size"  label="Taille" visible="{text_gencod_size.visible}">
								<mx:HBox>
									<mx:TextInput id="text_gencod_size"  width="67" toolTip="Size" text="0"/>
								</mx:HBox>
							</mx:FormItem>
							
							<mx:FormItem id="label_width_bar_reduction" label="Réduction largeur de barre">
								<mx:TextInput id="text_width_bar_reduction" width="142" text="0"/>
							</mx:FormItem>
							
							<mx:FormItem id="label_color_spot" label="Couleur spot">
								<mx:TextInput id="text_color_spot" width="142" text="0"/>
							</mx:FormItem>
							
							<mx:FormItem id="label_color_reading_zone" label="Zone de lecture de spot">
								<mx:TextInput id="text_color_reading_zone" width="142" text="0"/>
							</mx:FormItem>
							
							<!--MARCH 24 - added -->
							<mx:FormItem id="label_spotsize" width="100%" >   
								<view:RadioGropus id="popup_spotsize" groupName="Dimension du spot" numOfColumns="2" vGap="70" />
							</mx:FormItem>
						</mx:Form>
				</mx:Canvas>
				
				<mx:Canvas width="100%" >
						<mx:HBox width="100%" click="formFun(event,spotForm)" height="30" styleName="technicalFormHeader">
							<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
							<mx:Label text="TEXTES et FILETS" />
						</mx:HBox>
						<mx:HBox width="100%" id="spotForm"  height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:Form left="{spotForm.width+10}">
						<!-- INDIA -->
						 <mx:FormItem  id="label_positive_text_min" label="textes positifs">
						 	<mx:TextInput id="text_positive_text_min" width="142" text="0"/>
										<!--<view:TextNumericStepper id="text_positive_text_min"
								minimum="0"
								maximum="40"
								stepSize="1"
								text="20"
								width="65"/>-->
							</mx:FormItem>
							<mx:FormItem  id="label_negative_text_min" label="textes negatifs">
							<mx:TextInput id="text_negative_text_min" width="142" text="0"/>
										<!--<view:TextNumericStepper id="text_negative_text_min"
								minimum="0"
								maximum="40"
								stepSize="1"
								text="20"
								width="65"/>-->
							</mx:FormItem>
							<mx:FormItem  id="label_positive_line_min" label="filets négatifs">
								<mx:TextInput id="text_positive_line_min" width="142" text="0"/>
									<!--	<view:TextNumericStepper id="text_positive_line_min" minimum="0" maximum="40" stepSize="1" text="20" width="65"/>-->
							</mx:FormItem>
							<mx:FormItem  id="label_negative_line_min" label="filets positifs">
								<mx:TextInput id="text_negative_line_min" width="142" text="0"/>
										<!--<view:TextNumericStepper id="text_negative_line_min" minimum="0" maximum="40"
								stepSize="1" text="20" width="65"/>-->
							</mx:FormItem>
							
							<mx:FormItem  id="label_croix_de_reperage"  label="Croix de repérage par couleur">
										<view:RadioGropus id="popup_croix_de_reperage"
										groupName="Croix de repérage par couleur"
										numOfColumns="2"
										vGap="70"/>
							</mx:FormItem>
						</mx:Form>
						<!--<mx:Button label="reset" click="resetForm()"/>-->
				 	</mx:HBox>
				</mx:Canvas>
				
				
				
				<mx:Canvas width="100%" >
						<mx:HBox width="100%" click="formFun(event,reperageForm)" height="30" styleName="technicalFormHeader">
							<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
							<mx:Label text="REPERAGE-PRESSION" />
						</mx:HBox>
						<mx:HBox width="100%" id="reperageForm" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:Form>
							<mx:FormItem  id="label_pressure_square_spot"  label="Carré de pression par couleur">
										<view:RadioGropus id="popup_pressure_square_spot"
										groupName="Carré de pression par couleur"
										numOfColumns="2"
										vGap="70"/>
							</mx:FormItem>
							<mx:FormItem  id="label_color_guide_spot" label="label_color_guide_spot">
										<view:RadioGropus id="popup_color_guide_spot"
										groupName="Cercle de repérage par couleur"
										numOfColumns="2"
										vGap="70"/>
							</mx:FormItem>
						</mx:Form>
				 	</mx:HBox>
				</mx:Canvas>
				
				<mx:Canvas width="100%" >
						<mx:HBox width="100%" click="formFun(event,fournituresForm)" height="30" styleName="technicalFormHeader">
							<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
							<mx:Label text="FOURNITURES" />
						</mx:HBox>
						<mx:HBox width="100%" id="fournituresForm" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
			<mx:VBox horizontalAlign="center" paddingTop="10" verticalGap="0">
				<mx:Label text="Epreuve" fontWeight="bold" fontSize="12"/>
					<!--<mx:Form>
						<mx:FormItem  id="label_gmg" label="GMG">
							<view:TextNumericStepper id="text_gmg" 
								minimum="0"
								maximum="40"
								stepSize="1"
								width="65" 
								/>
						</mx:FormItem>
						<mx:FormItem  id="label_approval" label="Approval">
							<view:TextNumericStepper id="text_approval"
							minimum="0"
							maximum="40"
							stepSize="1" 
							width="65" />
						</mx:FormItem>
						 
						<mx:FormItem  id="label_approval_colors" label="Couleur(s)">
							<view:TextNumericStepper id="text_approval_colors"
								minimum="0"
								maximum="40"
								stepSize="1" 
								width="65" />
						</mx:FormItem>
						<mx:FormItem  id="label_approval_support" label="Support(s)">
							<view:TextNumericStepper id="text_approval_support"
									minimum="0"
									maximum="40"
									stepSize="1" 
									width="65"/>
						</mx:FormItem>
					</mx:Form>-->
					<mx:Form>
								<mx:FormItem  id="label_approval" label="Approval">
									<view:TextNumericStepper id="text_approval"
											minimum="0"
											maximum="40"
											stepSize="1" 
											width="65" />
								</mx:FormItem>						
								<mx:FormItem id="label_support_speciaux" label="Support speciaux">
									<mx:TextArea id="text_support_speciaux" width="300" text="0" height="50" maxChars="250" />									
								</mx:FormItem>						
								<mx:FormItem  id="label_epson" label="Epson">
									<view:TextNumericStepper id="text_epson"
									minimum="0"
									maximum="40"
									stepSize="1" 
									width="65" />
								</mx:FormItem>						
								<mx:FormItem  id="label_jeuxsepa_laser" label="Jeux Sépa. Laser">
									<view:TextNumericStepper id="text_jeuxsepa_laser"
									minimum="0"
									maximum="40"
									stepSize="1" 
									width="65" />
								</mx:FormItem>						
								<mx:FormItem  id="label_traceurhp" label="Traceur HP">
									<view:TextNumericStepper id="text_traceurhp" 
										minimum="0"
										maximum="40"
										stepSize="1"
										width="65" />
								</mx:FormItem>						
								<mx:FormItem  id="label_laser" label="Laser">
									<view:TextNumericStepper id="text_laser"
									minimum="0"
									maximum="40"
									stepSize="1" 
									width="65" />
								</mx:FormItem>	
								<mx:FormItem id="label_support" label="Support">
									<mx:ComboBox id="popup_support" width="150" />
								</mx:FormItem>		
							</mx:Form>					
				</mx:VBox>
				<!-- &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&  -->
				
				<mx:VBox horizontalAlign="center" paddingTop="10" verticalGap="0">
					<mx:Label text="CD / DVD" fontWeight="bold" fontSize="12"/>		
						<mx:Form>
								<mx:FormItem id="label_artpro">
									<mx:CheckBox id="checkbox_artpro" /> 
								</mx:FormItem>
								<mx:FormItem id="label_artpro_version" label="ArtPro version">
								 	<mx:TextInput id="text_artpro_version" maxChars="250" width="56" />
								</mx:FormItem> 
								<mx:FormItem id="label_illustrator">
									<mx:CheckBox id="checkbox_illustrator" />
								</mx:FormItem>							
								<mx:FormItem id="label_illustrator_version" label="Illustrator version">
								 	<mx:TextInput id="text_illustrator_version" maxChars="250" width="56" />
								</mx:FormItem> 
								<mx:FormItem id="label_pdf_hd">
									<mx:CheckBox id="checkbox_pdf_hd" />
								</mx:FormItem>							
							</mx:Form>
					</mx:VBox>
				</mx:HBox>
				</mx:Canvas>
				<!--<mx:Canvas width="100%" >
					<mx:HBox width="100%" click="formFun(event,validationForm)" height="30" styleName="technicalFormHeader">
						<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
						<mx:Label text="Validation" />
					</mx:HBox>
					<mx:HBox width="100%" id="validationForm" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:Form width="100%" >
							<mx:FormItem id="label_cuttingplan" width="100%">  
									<view:RadioGropus id="popup_cuttingplan"
										groupName="Plan de découpe"
										numOfColumns="2"  vGap="70"/>												
							</mx:FormItem> 
							<mx:FormItem id="label_spotsize" width="100%" >   
									<view:RadioGropus id="popup_spotsize" 
										groupName="Dimension du spot"
										numOfColumns="2" vGap="70" />
							</mx:FormItem>
						</mx:Form>
					</mx:HBox>
				</mx:Canvas>	-->			
				<!-- NEW -->
				<mx:Canvas width="100%" >
					<mx:HBox width="100%" click="formFun(event,uploadForm)" height="30" styleName="technicalFormHeader">
						<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
						<mx:Label text="{model.loc.getString('uploadFilesFlex')}" />
					</mx:HBox>
					<mx:HBox width="100%" id="uploadForm" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:Form width="100%" height="100%">
							<mx:VBox width="100%" height="200">
								<viewset:FileAttachments id="fileAttachmentsId" width="100%" height="100%"/>					
							</mx:VBox>
						</mx:Form>
					</mx:HBox>
				</mx:Canvas>
				
				<!--<mx:Canvas width="100%" >
					<mx:HBox width="100%" click="formFun(event,replycodForm)" height="30" styleName="technicalFormHeader">
						<mx:Button toggle="true" styleName="chartViewerButton" selected="true"/>
						<mx:Label text="{model.loc.getString('replyMessageFlex')}" />
					</mx:HBox>					
					<mx:Form labelWidth="150" id="replycodForm" width="100%" height="100%" styleName="technicalFormContainer" includeInLayout="false" visible="false">
						<mx:FormItem label="{model.loc.getString('replyCommentsFlex')}" width="100%">
							<mx:VBox width="100%">	
								<mx:HBox width="100%">
									<mx:TextArea id="replyText" width="100%" height="120" enabled="{model.editForm}"/>
								</mx:HBox>
								<mx:HBox width="100%">
									<mx:Button id="Previous" label="Demande incomplète" name="Previous" styleName="previousBtn" right="50" width="250" click="showAlert(event)" enabled="{model.editForm}"/>
									<mx:Button id="Next" label="VALIDATION" name="Next" styleName="nextBtn" left="50" width="200" click="showAlert(event)" enabled="{model.editForm}"/>
								</mx:HBox>
							</mx:VBox>
						</mx:FormItem>						
					</mx:Form>
				</mx:Canvas>-->
			</mx:VBox>
		</mx:Canvas>
	</mx:VBox>
	<mx:Canvas>
		
	</mx:Canvas>	 	
</mx:Canvas>