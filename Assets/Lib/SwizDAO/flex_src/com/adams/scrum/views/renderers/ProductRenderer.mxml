<?xml version="1.0" encoding="utf-8"?>
<s:ItemRenderer name="CustomListItemRenderer"
				xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:components="com.adams.scrum.views.components.*"
				width="100%" height="100%">
	<fx:Script>
		<![CDATA[ 	 			
			import com.adams.scrum.models.vo.CurrentInstance;
			import com.adams.scrum.models.vo.Products;
			import com.adams.scrum.models.vo.ProfileAccessVO;
			import com.adams.scrum.utils.Utils;
			import com.adams.scrum.views.components.NativeList;
			
			[Inject]
			public var currentInstance:CurrentInstance;
			
 			/**
 			 * The function to handle edit product event
 			 * 
 			 * <p>
 			 * In addition, it dispatches signal to the owner of the renderer
 			 * </p>
			 */
			protected function configBtn_clickHandler(event:MouseEvent):void
			{ 
				Object(owner).renderSignal.dispatch(NativeList.PRODUCTEDITED);
			}

			/**
			 * The function to handle open product event
			 * 
			 * <p>
			 * In addition, it dispatches signal to the owner of the renderer
			 * </p>
			 */
			protected function openBtn_clickHandler(event:MouseEvent):void
			{ 
				Object(owner).renderSignal.dispatch(NativeList.PRODUCTOPENED);
			}

			/**
			 * The function to handle delete product event
			 * 
			 * <p>
			 * In addition, it dispatches signal to the owner of the renderer
			 * </p>
			 */			
			protected function deleteBtn_clickHandler(event:MouseEvent):void
			{ 
				Object(owner).renderSignal.dispatch(NativeList.PRODUCTDELETED);
			} 
			private var product:Products;
			override public function set data(value:Object):void
			{
				super.data = value;
				if(value){
					product = value as Products;
					productNameLbl.text = product.productName;
					productStatusBtn.styleName = Utils.getStatusSkinName(product.productStatusFk,Utils.PRODUCT);
					
					productDeleteBtn.visible = visibleRemoveButton();
				}
			}
			private function visibleRemoveButton():Boolean{	
				return Object(owner).removeRendererProperty;
			}
		]]>
	</fx:Script> 
	<s:layout>
		<s:HorizontalLayout verticalAlign="middle"
							paddingLeft="0" paddingRight="0"
							paddingTop="1" paddingBottom="0" />
	</s:layout>
	<s:states>
		<s:State name="normal" />
		<s:State name="hovered" />
		<s:State name="selected" />
	</s:states>
	<s:Group width="100%" height="100%" id="parentGroup">
			<s:Button id="productStatusBtn" left="0" verticalCenter="0"/>
			<s:Label id="productNameLbl"  
					 maxDisplayedLines="1" left="20"  right="{btnCtrls.width+10}" 
					 showTruncationTip="true" 
					 verticalCenter="0" />
			<s:HGroup verticalAlign="middle" id="btnCtrls" right="5" height="100%">
			<components:NativeButton id="productConfigBtn" styleName="ConfigIcon" 
									 click="configBtn_clickHandler(event)" />
			<components:NativeButton id="productOpenBtn" styleName="OpenIcon" 
									 click="openBtn_clickHandler(event)" />
			<components:NativeButton id="productDeleteBtn" styleName="DeleteSkin" 
									 click="deleteBtn_clickHandler(event)" visible="{visibleRemoveButton()}" />
		</s:HGroup>
	</s:Group> 
</s:ItemRenderer>