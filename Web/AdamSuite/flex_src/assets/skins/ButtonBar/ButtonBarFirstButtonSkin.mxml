<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the first button in a Spark ButtonBar component.  

@see spark.components.ButtonBar
@see spark.components.ButtonBarButton

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" minWidth="21" minHeight="21"
			 alpha.disabledStates="0.5" xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<!-- host component -->
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.ButtonBarButton")]
		]]>
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
        
		/* Define the skin elements that should not be colorized. 
		For toggle button, the graphics are colorized but the label is not. */
		static private const exclusions:Array = ["labelDisplay"];
		
		/** 
		 * @private
		 */     
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		
		/**
		 * @private
		 */
		override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
		{
			var cr:Number = getStyle("cornerRadius");
			
			/* if (cornerRadius != cr)
			{
				cornerRadius = cr;
				shadow.topLeftRadiusX = cornerRadius;
				shadow.bottomLeftRadiusX = cornerRadius;
				fill.topLeftRadiusX = cornerRadius;
				fill.bottomLeftRadiusX = cornerRadius;
				lowlight.topLeftRadiusX = cornerRadius;
				lowlight.bottomLeftRadiusX = cornerRadius;
				highlight.topLeftRadiusX = cornerRadius;
				highlight.bottomLeftRadiusX = cornerRadius;
				highlightStroke.topLeftRadiusX = cornerRadius;
				highlightStroke.bottomLeftRadiusX = cornerRadius;
				border.topLeftRadiusX = cornerRadius;
				border.bottomLeftRadiusX = cornerRadius;
			}
			
			if (hldownstroke1)
			{
				hldownstroke1.topLeftRadiusX = cornerRadius;
				hldownstroke1.bottomLeftRadiusX = cornerRadius;
			}
			if (hldownstroke2)
			{
				hldownstroke2.topLeftRadiusX = cornerRadius;
				hldownstroke2.bottomLeftRadiusX = cornerRadius;
			} */
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
		
		private var cornerRadius:Number = 2;
	</fx:Script>
	
	<!-- states -->
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
	</s:states>
	
	<s:BitmapImage source="@Embed('assets/images/learnMode.png')" alpha.over=".7"
				   source.over="@Embed('assets/images/learnMode.png')"
				   source.down="@Embed('assets/images/learnMode.png')" alpha.overAndSelected=".7"
				   source.overAndSelected="@Embed('assets/images/learnMode_selected.png')"
				   source.upAndSelected="@Embed('assets/images/learnMode_selected.png')"
				   source.downAndSelected="@Embed('assets/images/learnMode_selected.png')"/>
	
	<!-- layer 8: text -->
	<!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="center"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 horizontalCenter="0" verticalCenter="1"
			 left="10" right="10" top="2" bottom="2">
	</s:Label>
	
</s:SparkSkin>
