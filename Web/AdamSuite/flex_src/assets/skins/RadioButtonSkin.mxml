<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark RadioButton component.  

@see spark.components.RadioButton
@see spark.components.RadioButtonGroup

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabledStates="0.5">
	
	<fx:Metadata>
		<![CDATA[ 
		/** 
		* @copy spark.skins.spark.ApplicationSkin#hostComponent
		*/
		[HostComponent("spark.components.RadioButton")]
		]]>
	</fx:Metadata> 
	
	<fx:Script fb:purpose="styling">
		/* Define the skin elements that should not be colorized. 
		For button, the graphics are colorized but the label is not. */
		static private const exclusions:Array = ["labelDisplay", "dot"];
		
		[Bindable]
		[Embed("assets/images/radio_red.png")]
		public var radioRed:Class;
		[Bindable]
		[Embed("assets/images/radio_green.png")]
		public var radioGreen:Class;
		
		/**
		 * @private
		 */
		override public function get colorizeExclusions():Array {return exclusions;}
		
		/* Define the symbol fill items that should be colored by the "symbolColor" style. */
		static private const symbols:Array = ["dotFill"];
		
		/**
		 * @private
		 */
		override public function get symbolItems():Array {return symbols};
		
		/**
		 * @private
		 */
		override protected function initializationComplete():void
		{
			useChromeColor = true;
			super.initializationComplete();
		}
		override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void {
			var disableColor:uint = getStyle("wrongAnswer");
			
			if (disableColor == uint(0xff0000)){
				iconImg.source = radioRed;
			}else if(disableColor == uint(0x00ff00)){
				iconImg.source = radioGreen
			}
			
			super.updateDisplayList(unscaledWidth, unscaledHeight);
		}
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			/** 
			 * @private 
			 */     
			private static const focusExclusions:Array = ["labelDisplay"];
			
			/**
			 *  @private
			 */
			override public function get focusSkinExclusions():Array { return focusExclusions;};
			
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="up" />
		<s:State name="over" stateGroups="overStates" />
		<s:State name="down" stateGroups="downStates" />
		<s:State name="disabled" stateGroups="disabledStates" />
		<s:State name="upAndSelected" stateGroups="selectedStates" />
		<s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
		<s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
		<s:State name="disabledAndSelected" stateGroups="disabledStates, selectedStates" />
	</s:states>
	
	 
		<!-- dot -->
		<!--- Defines the appearance of the RadioButton's dot. To customize the appearance of the dot, create a custom RadioButtonSkin class. -->
		<s:Path visible="false" left="4" top="4" includeIn="selectedStates" id="dot" itemCreationPolicy="immediate"
				data="M 2.5 0 Q 4.5 0.5 5 2.5 Q 4.5 4.5 2.5 5 Q 0.5 4.5 0 2.5 Q 0.5 0.5 2.5 0">
			<s:fill>
				<!--- @private
				Defines the appearance of the dot's fill. The default color is 0x000000. The default alpha is .9. -->
				<s:SolidColor id="dotFill" color="0" alpha="0.9" />
			</s:fill>
		</s:Path>
		 
	<s:BitmapImage id="iconImg" source.up="@Embed('assets/images/radio_up.png')" 
				   
				   source.over="@Embed('assets/images/radio_up.png')" alpha.over=".5"
				   source.down="@Embed('assets/images/radio_up.png')" 
				   source.disabled="@Embed('assets/images/radio_up.png')"
				   
				   source.upAndSelected="@Embed('assets/images/radio_selected.png')"
				   source.overAndSelected="@Embed('assets/images/radio_selected.png')" alpha.overAndSelected=".5"
				   source.downAndSelected="@Embed('assets/images/radio_selected.png')" 
				   source.disabledAndSelected="@Embed('assets/images/radio_selected.png')" 
				   
				   />
	<!-- Label -->
	<!---  @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
	<s:Label id="labelDisplay"
			 textAlign="start" styleName="optionText"
			 verticalAlign="middle"
			 maxDisplayedLines="1"
			 left="18" right="0"  verticalCenter="0" color.disabledStates="{hostComponent.getStyle('wrongAnswer')}" />
	
</s:SparkSkin>
